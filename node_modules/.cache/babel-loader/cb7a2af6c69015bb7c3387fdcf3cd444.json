{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _fs = require('fs');\nvar _path = require('path');\nvar _istanbulLibInstrument = require('istanbul-lib-instrument');\nvar _babelPluginSyntaxObjectRestSpread = require('babel-plugin-syntax-object-rest-spread');\nvar _babelPluginSyntaxObjectRestSpread2 = _interopRequireDefault(_babelPluginSyntaxObjectRestSpread);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar testExclude = require('test-exclude');\nvar findUp = require('find-up');\nfunction getRealpath(n) {\n  try {\n    return (0, _fs.realpathSync)(n) || n;\n  } catch (e) {\n    return n;\n  }\n}\nfunction makeShouldSkip() {\n  var exclude = void 0;\n  return function shouldSkip(file, opts) {\n    if (!exclude) {\n      var cwd = getRealpath(process.env.NYC_CWD || process.cwd());\n      var nycConfig = process.env.NYC_CONFIG ? JSON.parse(process.env.NYC_CONFIG) : {};\n      var config = {};\n      if (Object.keys(opts).length > 0) {\n        // explicitly configuring options in babel\n        // takes precedence.\n        config = opts;\n      } else if (nycConfig.include || nycConfig.exclude) {\n        // nyc was configured in a parent process (keep these settings).\n        config = {\n          include: nycConfig.include,\n          exclude: nycConfig.exclude\n        };\n      } else {\n        // fallback to loading config from key in package.json.\n        config = {\n          configKey: 'nyc',\n          configPath: (0, _path.dirname)(findUp.sync('package.json', {\n            cwd: cwd\n          }))\n        };\n      }\n      exclude = testExclude(Object.assign({\n        cwd: cwd\n      }, config));\n    }\n    return !exclude.shouldInstrument(file);\n  };\n}\nfunction makeVisitor(_ref) {\n  var t = _ref.types;\n  var shouldSkip = makeShouldSkip();\n  return {\n    inherits: _babelPluginSyntaxObjectRestSpread2.default,\n    visitor: {\n      Program: {\n        enter: function enter(path) {\n          this.__dv__ = null;\n          var realPath = getRealpath(this.file.opts.filename);\n          if (shouldSkip(realPath, this.opts)) {\n            return;\n          }\n          var inputSourceMap = this.opts.inputSourceMap;\n          if (this.opts.useInlineSourceMaps !== false) {\n            inputSourceMap = inputSourceMap || this.file.opts.inputSourceMap;\n          }\n          this.__dv__ = (0, _istanbulLibInstrument.programVisitor)(t, realPath, {\n            coverageVariable: '__coverage__',\n            inputSourceMap: inputSourceMap\n          });\n          this.__dv__.enter(path);\n        },\n        exit: function exit(path) {\n          if (!this.__dv__) {\n            return;\n          }\n          var result = this.__dv__.exit(path);\n          if (this.opts.onCover) {\n            this.opts.onCover(getRealpath(this.file.opts.filename), result.fileCoverage);\n          }\n        }\n      }\n    }\n  };\n}\nexports.default = makeVisitor;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\nvar _keys2 = _interopRequireDefault(_keys);\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\nvar _typeof3 = _interopRequireDefault(_typeof2);\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nexports.isBinding = isBinding;\nexports.isReferenced = isReferenced;\nexports.isValidIdentifier = isValidIdentifier;\nexports.isLet = isLet;\nexports.isBlockScoped = isBlockScoped;\nexports.isVar = isVar;\nexports.isSpecifierDefault = isSpecifierDefault;\nexports.isScope = isScope;\nexports.isImmutable = isImmutable;\nexports.isNodesEquivalent = isNodesEquivalent;\nvar _retrievers = require(\"./retrievers\");\nvar _esutils = require(\"esutils\");\nvar _esutils2 = _interopRequireDefault(_esutils);\nvar _index = require(\"./index\");\nvar t = _interopRequireWildcard(_index);\nvar _constants = require(\"./constants\");\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isBinding(node, parent) {\n  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var val = parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isReferenced(node, parent) {\n  switch (parent.type) {\n    case \"BindExpression\":\n      return parent.object === node || parent.callee === node;\n    case \"MemberExpression\":\n    case \"JSXMemberExpression\":\n      if (parent.property === node && parent.computed) {\n        return true;\n      } else if (parent.object === node) {\n        return true;\n      } else {\n        return false;\n      }\n    case \"MetaProperty\":\n      return false;\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return parent.computed;\n      }\n    case \"VariableDeclarator\":\n      return parent.id !== node;\n    case \"ArrowFunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      for (var _iterator = parent.params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var param = _ref;\n        if (param === node) return false;\n      }\n      return parent.id !== node;\n    case \"ExportSpecifier\":\n      if (parent.source) {\n        return false;\n      } else {\n        return parent.local === node;\n      }\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n    case \"JSXAttribute\":\n      return parent.name !== node;\n    case \"ClassProperty\":\n      if (parent.key === node) {\n        return parent.computed;\n      } else {\n        return parent.value === node;\n      }\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.id !== node;\n    case \"ClassMethod\":\n    case \"ObjectMethod\":\n      return parent.key === node && parent.computed;\n    case \"LabeledStatement\":\n      return false;\n    case \"CatchClause\":\n      return parent.param !== node;\n    case \"RestElement\":\n      return false;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n    case \"AssignmentPattern\":\n      return parent.right === node;\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n  }\n  return true;\n}\nfunction isValidIdentifier(name) {\n  if (typeof name !== \"string\" || _esutils2.default.keyword.isReservedWordES6(name, true)) {\n    return false;\n  } else if (name === \"await\") {\n    return false;\n  } else {\n    return _esutils2.default.keyword.isIdentifierNameES6(name);\n  }\n}\nfunction isLet(node) {\n  return t.isVariableDeclaration(node) && (node.kind !== \"var\" || node[_constants.BLOCK_SCOPED_SYMBOL]);\n}\nfunction isBlockScoped(node) {\n  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);\n}\nfunction isVar(node) {\n  return t.isVariableDeclaration(node, {\n    kind: \"var\"\n  }) && !node[_constants.BLOCK_SCOPED_SYMBOL];\n}\nfunction isSpecifierDefault(specifier) {\n  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, {\n    name: \"default\"\n  });\n}\nfunction isScope(node, parent) {\n  if (t.isBlockStatement(node) && t.isFunction(parent, {\n    body: node\n  })) {\n    return false;\n  }\n  return t.isScopable(node);\n}\nfunction isImmutable(node) {\n  if (t.isType(node.type, \"Immutable\")) return true;\n  if (t.isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}\nfunction isNodesEquivalent(a, b) {\n  if ((typeof a === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(a)) !== \"object\" || (typeof a === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(a)) !== \"object\" || a == null || b == null) {\n    return a === b;\n  }\n  if (a.type !== b.type) {\n    return false;\n  }\n  var fields = (0, _keys2.default)(t.NODE_FIELDS[a.type] || a.type);\n  for (var _iterator2 = fields, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n    var _ref2;\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref2 = _i2.value;\n    }\n    var field = _ref2;\n    if ((0, _typeof3.default)(a[field]) !== (0, _typeof3.default)(b[field])) {\n      return false;\n    }\n    if (Array.isArray(a[field])) {\n      if (!Array.isArray(b[field])) {\n        return false;\n      }\n      if (a[field].length !== b[field].length) {\n        return false;\n      }\n      for (var i = 0; i < a[field].length; i++) {\n        if (!isNodesEquivalent(a[field][i], b[field][i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n    if (!isNodesEquivalent(a[field], b[field])) {\n      return false;\n    }\n  }\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}
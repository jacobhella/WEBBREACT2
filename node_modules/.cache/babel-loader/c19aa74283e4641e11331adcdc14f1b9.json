{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = setFromArgv;\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar specialArgs = ['_', '$0', 'h', 'help', 'config'];\nfunction setFromArgv(options, argv) {\n  // $FlowFixMe: Seems like flow doesn't approve of string values\n  var argvToOptions = Object.keys(argv).filter(function (key) {\n    return argv[key] !== undefined && specialArgs.indexOf(key) === -1;\n  }).reduce(function (options, key) {\n    switch (key) {\n      case 'coverage':\n        options.collectCoverage = argv[key];\n        break;\n      case 'json':\n        options.useStderr = argv[key];\n        break;\n      case 'watchAll':\n        options.watch = false;\n        options.watchAll = argv[key];\n        break;\n      case 'env':\n        options.testEnvironment = argv[key];\n        break;\n      case 'config':\n        break;\n      case 'coverageThreshold':\n      case 'globals':\n      case 'moduleNameMapper':\n      case 'transform':\n      case 'haste':\n        if ((0, (_utils || _load_utils()).isJSONString)(argv[key])) {\n          options[key] = JSON.parse(argv[key]);\n        }\n        break;\n      default:\n        options[key] = argv[key];\n    }\n    return options;\n  }, {});\n  return Object.assign({}, options, (0, (_utils || _load_utils()).isJSONString)(argv.config) ? JSON.parse(argv.config) : null, argvToOptions);\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar execa = require('execa');\nvar lcid = require('lcid');\nvar mem = require('mem');\nvar defaultOptions = {\n  spawn: true\n};\nvar defaultLocale = 'en_US';\nfunction getEnvLocale() {\n  var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.env;\n  return env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n}\nfunction parseLocale(string) {\n  var env = string.split('\\n').reduce(function (env, def) {\n    var _def$split = def.split('='),\n      _def$split2 = _slicedToArray(_def$split, 2),\n      key = _def$split2[0],\n      value = _def$split2[1];\n    env[key] = value.replace(/^\"|\"$/g, '');\n    return env;\n  }, {});\n  return getEnvLocale(env);\n}\nfunction getLocale(string) {\n  return string && string.replace(/[.:].*/, '');\n}\nfunction getLocales() {\n  return execa.stdout('locale', ['-a']);\n}\nfunction getLocalesSync() {\n  return execa.sync('locale', ['-a']).stdout;\n}\nfunction getSupportedLocale(locale) {\n  var locales = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return locales.includes(locale) ? locale : defaultLocale;\n}\nfunction getAppleLocale() {\n  return Promise.all([execa.stdout('defaults', ['read', '-globalDomain', 'AppleLocale']), getLocales()]).then(function (results) {\n    return getSupportedLocale(results[0], results[1]);\n  });\n}\nfunction getAppleLocaleSync() {\n  return getSupportedLocale(execa.sync('defaults', ['read', '-globalDomain', 'AppleLocale']).stdout, getLocalesSync());\n}\nfunction getUnixLocale() {\n  if (process.platform === 'darwin') {\n    return getAppleLocale();\n  }\n  return execa.stdout('locale').then(function (stdout) {\n    return getLocale(parseLocale(stdout));\n  });\n}\nfunction getUnixLocaleSync() {\n  if (process.platform === 'darwin') {\n    return getAppleLocaleSync();\n  }\n  return getLocale(parseLocale(execa.sync('locale').stdout));\n}\nfunction getWinLocale() {\n  return execa.stdout('wmic', ['os', 'get', 'locale']).then(function (stdout) {\n    var lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n    return lcid.from(lcidCode);\n  });\n}\nfunction getWinLocaleSync() {\n  var _execa$sync = execa.sync('wmic', ['os', 'get', 'locale']),\n    stdout = _execa$sync.stdout;\n  var lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n  return lcid.from(lcidCode);\n}\nmodule.exports = mem(function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n  var envLocale = getEnvLocale();\n  var thenable;\n  if (envLocale || options.spawn === false) {\n    thenable = Promise.resolve(getLocale(envLocale));\n  } else if (process.platform === 'win32') {\n    thenable = getWinLocale();\n  } else {\n    thenable = getUnixLocale();\n  }\n  return thenable.then(function (locale) {\n    return locale || defaultLocale;\n  }).catch(function () {\n    return defaultLocale;\n  });\n});\nmodule.exports.sync = mem(function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n  var envLocale = getEnvLocale();\n  var res;\n  if (envLocale || options.spawn === false) {\n    res = getLocale(envLocale);\n  } else {\n    try {\n      res = process.platform === 'win32' ? getWinLocaleSync() : getUnixLocaleSync();\n    } catch (_) {}\n  }\n  return res || defaultLocale;\n});","map":null,"metadata":{},"sourceType":"script"}
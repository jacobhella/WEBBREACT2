{"ast":null,"code":"'use strict';\n\nvar $ = exports;\nvar el = require('./elements');\nvar noop = function noop(v) {\n  return v;\n};\nfunction toPrompt(type, args) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise(function (res, rej) {\n    var p = new el[type](args);\n    var onAbort = opts.onAbort || noop;\n    var onSubmit = opts.onSubmit || noop;\n    p.on('state', args.onState || noop);\n    p.on('submit', function (x) {\n      return res(onSubmit(x));\n    });\n    p.on('abort', function (x) {\n      return rej(onAbort(x));\n    });\n  });\n}\n\n/**\n * Text prompt\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.text = function (args) {\n  return toPrompt('TextPrompt', args);\n};\n\n/**\n * Password prompt with masked input\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n *\n */\n$.password = function (args) {\n  args.style = 'password';\n  return $.text(args);\n};\n\n/**\n * Prompt where input is invisible, like sudo\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.invisible = function (args) {\n  args.style = 'invisible';\n  return $.text(args);\n};\n\n/**\n * Number prompt\n * @param {string} args.message Prompt message to display\n * @param {number} args.initial Default number value\n * @param {function} [args.onState] On state change callback\n * @param {number} [args.max] Max value\n * @param {number} [args.min] Min value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n * @returns {Promise} Promise with user input\n */\n$.number = function (args) {\n  return toPrompt('NumberPrompt', args);\n};\n\n/**\n * Classic yes/no prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.confirm = function (args) {\n  return toPrompt('ConfirmPrompt', args);\n};\n\n/**\n * List prompt, split intput string by `seperator`\n * @param {string} args.message Prompt message to display\n * @param {string} [args.initial] Default string value\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {string} [args.separator] String separator\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input, in form of an `Array`\n */\n$.list = function (args) {\n  var sep = args.separator || ',';\n  return toPrompt('TextPrompt', args, {\n    onSubmit: function onSubmit(str) {\n      return str.split(sep).map(function (s) {\n        return s.trim();\n      });\n    }\n  });\n};\n\n/**\n * Toggle/switch prompt\n * @param {string} args.message Prompt message to display\n * @param {boolean} [args.initial=false] Default value\n * @param {string} [args.active=\"on\"] Text for `active` state\n * @param {string} [args.inactive=\"off\"] Text for `inactive` state\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.toggle = function (args) {\n  return toPrompt('TogglePrompt', args);\n};\n\n/**\n * Interactive select prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value }, ...]`\n * @param {number} [args.initial] Index of default value\n * @param {String} [args.hint] Hint to display\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.select = function (args) {\n  return toPrompt('SelectPrompt', args);\n};\n\n/**\n * Interactive multi-select prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of choices objects `[{ title, value, [selected] }, ...]`\n * @param {number} [args.max] Max select\n * @param {string} [args.hint] Hint to display user\n * @param {Number} [args.cursor=0] Cursor start position\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.multiselect = function (args) {\n  args.choices = [].concat(args.choices || []);\n  var toSelected = function toSelected(items) {\n    return items.filter(function (item) {\n      return item.selected;\n    }).map(function (item) {\n      return item.value;\n    });\n  };\n  return toPrompt('MultiselectPrompt', args, {\n    onAbort: toSelected,\n    onSubmit: toSelected\n  });\n};\nvar byTitle = function byTitle(input, choices) {\n  return Promise.resolve(choices.filter(function (item) {\n    return item.title.slice(0, input.length).toLowerCase() === input.toLowerCase();\n  }));\n};\n\n/**\n * Interactive auto-complete prompt\n * @param {string} args.message Prompt message to display\n * @param {Array} args.choices Array of auto-complete choices objects `[{ title, value }, ...]`\n * @param {Function} [args.suggest] Function to filter results based on user input. Defaults to sort by `title`\n * @param {number} [args.limit=10] Max number of results to show\n * @param {string} [args.style=\"default\"] Render style ('default', 'password', 'invisible')\n * @param {String} [args.initial] Index of the default value\n * @param {String} [args.fallback] Fallback message - defaults to initial value\n * @param {function} [args.onState] On state change callback\n * @returns {Promise} Promise with user input\n */\n$.autocomplete = function (args) {\n  args.suggest = args.suggest || byTitle;\n  args.choices = [].concat(args.choices || []);\n  return toPrompt('AutocompletePrompt', args);\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar watch = require('watch');\nvar common = require('./common');\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Constants\n */\n\nvar DEFAULT_DELAY = common.DEFAULT_DELAY;\nvar CHANGE_EVENT = common.CHANGE_EVENT;\nvar DELETE_EVENT = common.DELETE_EVENT;\nvar ADD_EVENT = common.ADD_EVENT;\nvar ALL_EVENT = common.ALL_EVENT;\n\n/**\n * Export `PollWatcher` class.\n */\n\nmodule.exports = PollWatcher;\n\n/**\n * Watches `dir`.\n *\n * @class PollWatcher\n * @param String dir\n * @param {Object} opts\n * @public\n */\n\nfunction PollWatcher(dir, opts) {\n  opts = common.assignOptions(this, opts);\n  this.watched = Object.create(null);\n  this.root = path.resolve(dir);\n  watch.createMonitor(this.root, {\n    interval: opts.interval || DEFAULT_DELAY,\n    filter: this.filter.bind(this)\n  }, this.init.bind(this));\n}\nPollWatcher.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Given a fullpath of a file or directory check if we need to watch it.\n *\n * @param {string} filepath\n * @param {object} stat\n * @private\n */\n\nPollWatcher.prototype.filter = function (filepath, stat) {\n  return stat.isDirectory() || common.isFileIncluded(this.globs, this.dot, this.doIgnore, path.relative(this.root, filepath));\n};\n\n/**\n * Initiate the polling file watcher with the event emitter passed from\n * `watch.watchTree`.\n *\n * @param {EventEmitter} monitor\n * @public\n */\n\nPollWatcher.prototype.init = function (monitor) {\n  this.watched = monitor.files;\n  monitor.on('changed', this.emitEvent.bind(this, CHANGE_EVENT));\n  monitor.on('removed', this.emitEvent.bind(this, DELETE_EVENT));\n  monitor.on('created', this.emitEvent.bind(this, ADD_EVENT));\n  // 1 second wait because mtime is second-based.\n  setTimeout(this.emit.bind(this, 'ready'), 1000);\n};\n\n/**\n * Transform and emit an event comming from the poller.\n *\n * @param {EventEmitter} monitor\n * @public\n */\n\nPollWatcher.prototype.emitEvent = function (type, file, stat) {\n  file = path.relative(this.root, file);\n  if (type === DELETE_EVENT) {\n    // Matching the non-polling API\n    stat = null;\n  }\n  this.emit(type, file, this.root, stat);\n  this.emit(ALL_EVENT, type, file, this.root, stat);\n};\n\n/**\n * End watching.\n *\n * @public\n */\n\nPollWatcher.prototype.close = function (callback) {\n  Object.keys(this.watched).forEach(function (filepath) {\n    fs.unwatchFile(filepath);\n  });\n  this.removeAllListeners();\n  if (typeof callback === 'function') {\n    setImmediate(callback.bind(null, null, true));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.explode = explode;\nexports.merge = merge;\nexports.verify = verify;\nvar virtualTypes = require(\"./path/lib/virtual-types\");\nvar _t = require(\"@babel/types\");\nvar DEPRECATED_KEYS = _t.DEPRECATED_KEYS,\n  DEPRECATED_ALIASES = _t.DEPRECATED_ALIASES,\n  FLIPPED_ALIAS_KEYS = _t.FLIPPED_ALIAS_KEYS,\n  TYPES = _t.TYPES,\n  deprecationWarning = _t.__internal__deprecationWarning;\nfunction isVirtualType(type) {\n  return type in virtualTypes;\n}\nfunction explode(visitor) {\n  if (visitor._exploded) return visitor;\n  visitor._exploded = true;\n  for (var _i = 0, _Object$keys = Object.keys(visitor); _i < _Object$keys.length; _i++) {\n    var nodeType = _Object$keys[_i];\n    if (shouldIgnoreKey(nodeType)) continue;\n    var parts = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n    var fns = visitor[nodeType];\n    delete visitor[nodeType];\n    var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var part = _step.value;\n        visitor[part] = fns;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  verify(visitor);\n  delete visitor.__esModule;\n  ensureEntranceObjects(visitor);\n  ensureCallbackArrays(visitor);\n  for (var _i2 = 0, _Object$keys2 = Object.keys(visitor); _i2 < _Object$keys2.length; _i2++) {\n    var _nodeType = _Object$keys2[_i2];\n    if (shouldIgnoreKey(_nodeType)) continue;\n    if (!isVirtualType(_nodeType)) continue;\n    var _fns = visitor[_nodeType];\n    for (var _i3 = 0, _Object$keys3 = Object.keys(_fns); _i3 < _Object$keys3.length; _i3++) {\n      var type = _Object$keys3[_i3];\n      _fns[type] = wrapCheck(_nodeType, _fns[type]);\n    }\n    delete visitor[_nodeType];\n    var types = virtualTypes[_nodeType];\n    if (types !== null) {\n      var _iterator2 = _createForOfIteratorHelper(types),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _type = _step2.value;\n          if (visitor[_type]) {\n            mergePair(visitor[_type], _fns);\n          } else {\n            visitor[_type] = _fns;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else {\n      mergePair(visitor, _fns);\n    }\n  }\n  for (var _i4 = 0, _Object$keys4 = Object.keys(visitor); _i4 < _Object$keys4.length; _i4++) {\n    var _nodeType2 = _Object$keys4[_i4];\n    if (shouldIgnoreKey(_nodeType2)) continue;\n    var aliases = FLIPPED_ALIAS_KEYS[_nodeType2];\n    if (_nodeType2 in DEPRECATED_KEYS) {\n      var deprecatedKey = DEPRECATED_KEYS[_nodeType2];\n      deprecationWarning(_nodeType2, deprecatedKey, \"Visitor \");\n      aliases = [deprecatedKey];\n    } else if (_nodeType2 in DEPRECATED_ALIASES) {\n      var deprecatedAlias = DEPRECATED_ALIASES[_nodeType2];\n      deprecationWarning(_nodeType2, deprecatedAlias, \"Visitor \");\n      aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];\n    }\n    if (!aliases) continue;\n    var _fns2 = visitor[_nodeType2];\n    delete visitor[_nodeType2];\n    var _iterator3 = _createForOfIteratorHelper(aliases),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var alias = _step3.value;\n        var existing = visitor[alias];\n        if (existing) {\n          mergePair(existing, _fns2);\n        } else {\n          visitor[alias] = Object.assign({}, _fns2);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  for (var _i5 = 0, _Object$keys5 = Object.keys(visitor); _i5 < _Object$keys5.length; _i5++) {\n    var _nodeType3 = _Object$keys5[_i5];\n    if (shouldIgnoreKey(_nodeType3)) continue;\n    ensureCallbackArrays(visitor[_nodeType3]);\n  }\n  return visitor;\n}\nfunction verify(visitor) {\n  if (visitor._verified) return;\n  if (typeof visitor === \"function\") {\n    throw new Error(\"You passed `traverse()` a function when it expected a visitor object, \" + \"are you sure you didn't mean `{ enter: Function }`?\");\n  }\n  for (var _i6 = 0, _Object$keys6 = Object.keys(visitor); _i6 < _Object$keys6.length; _i6++) {\n    var nodeType = _Object$keys6[_i6];\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n    if (shouldIgnoreKey(nodeType)) continue;\n    if (TYPES.indexOf(nodeType) < 0) {\n      throw new Error(\"You gave us a visitor for the node type \".concat(nodeType, \" but it's not a valid type\"));\n    }\n    var visitors = visitor[nodeType];\n    if (typeof visitors === \"object\") {\n      for (var _i7 = 0, _Object$keys7 = Object.keys(visitors); _i7 < _Object$keys7.length; _i7++) {\n        var visitorKey = _Object$keys7[_i7];\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          validateVisitorMethods(\"\".concat(nodeType, \".\").concat(visitorKey), visitors[visitorKey]);\n        } else {\n          throw new Error(\"You passed `traverse()` a visitor object with the property \" + \"\".concat(nodeType, \" that has the invalid property \").concat(visitorKey));\n        }\n      }\n    }\n  }\n  visitor._verified = true;\n}\nfunction validateVisitorMethods(path, val) {\n  var fns = [].concat(val);\n  var _iterator4 = _createForOfIteratorHelper(fns),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var fn = _step4.value;\n      if (typeof fn !== \"function\") {\n        throw new TypeError(\"Non-function found defined in \".concat(path, \" with type \").concat(typeof fn));\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\nfunction merge(visitors) {\n  var states = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var wrapper = arguments.length > 2 ? arguments[2] : undefined;\n  var rootVisitor = {};\n  for (var i = 0; i < visitors.length; i++) {\n    var visitor = visitors[i];\n    var state = states[i];\n    explode(visitor);\n    for (var _i8 = 0, _Object$keys8 = Object.keys(visitor); _i8 < _Object$keys8.length; _i8++) {\n      var type = _Object$keys8[_i8];\n      var visitorType = visitor[type];\n      if (state || wrapper) {\n        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);\n      }\n      var nodeVisitor = rootVisitor[type] || (rootVisitor[type] = {});\n      mergePair(nodeVisitor, visitorType);\n    }\n  }\n  return rootVisitor;\n}\nfunction wrapWithStateOrWrapper(oldVisitor, state, wrapper) {\n  var newVisitor = {};\n  var _loop = function _loop() {\n    var key = _Object$keys9[_i9];\n    var fns = oldVisitor[key];\n    if (!Array.isArray(fns)) return \"continue\";\n    fns = fns.map(function (fn) {\n      var newFn = fn;\n      if (state) {\n        newFn = function newFn(path) {\n          return fn.call(state, path, state);\n        };\n      }\n      if (wrapper) {\n        newFn = wrapper(state.key, key, newFn);\n      }\n      if (newFn !== fn) {\n        newFn.toString = function () {\n          return fn.toString();\n        };\n      }\n      return newFn;\n    });\n    newVisitor[key] = fns;\n  };\n  for (var _i9 = 0, _Object$keys9 = Object.keys(oldVisitor); _i9 < _Object$keys9.length; _i9++) {\n    var _ret = _loop();\n    if (_ret === \"continue\") continue;\n  }\n  return newVisitor;\n}\nfunction ensureEntranceObjects(obj) {\n  for (var _i10 = 0, _Object$keys10 = Object.keys(obj); _i10 < _Object$keys10.length; _i10++) {\n    var key = _Object$keys10[_i10];\n    if (shouldIgnoreKey(key)) continue;\n    var fns = obj[key];\n    if (typeof fns === \"function\") {\n      obj[key] = {\n        enter: fns\n      };\n    }\n  }\n}\nfunction ensureCallbackArrays(obj) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\nfunction wrapCheck(nodeType, fn) {\n  var newFn = function newFn(path) {\n    if (path[\"is\".concat(nodeType)]()) {\n      return fn.apply(this, arguments);\n    }\n  };\n  newFn.toString = function () {\n    return fn.toString();\n  };\n  return newFn;\n}\nfunction shouldIgnoreKey(key) {\n  if (key[0] === \"_\") return true;\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n  if (key === \"denylist\" || key === \"noScope\" || key === \"skipKeys\" || key === \"blacklist\") {\n    return true;\n  }\n  return false;\n}\nfunction mergePair(dest, src) {\n  for (var _i11 = 0, _Object$keys11 = Object.keys(src); _i11 < _Object$keys11.length; _i11++) {\n    var key = _Object$keys11[_i11];\n    dest[key] = [].concat(dest[key] || [], src[key]);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.find = find;\nexports.findParent = findParent;\nexports.getAncestry = getAncestry;\nexports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;\nexports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;\nexports.getFunctionParent = getFunctionParent;\nexports.getStatementParent = getStatementParent;\nexports.inType = inType;\nexports.isAncestor = isAncestor;\nexports.isDescendant = isDescendant;\nvar _t = require(\"@babel/types\");\nvar VISITOR_KEYS = _t.VISITOR_KEYS;\nfunction findParent(callback) {\n  var path = this;\n  while (path = path.parentPath) {\n    if (callback(path)) return path;\n  }\n  return null;\n}\nfunction find(callback) {\n  var path = this;\n  do {\n    if (callback(path)) return path;\n  } while (path = path.parentPath);\n  return null;\n}\nfunction getFunctionParent() {\n  return this.findParent(function (p) {\n    return p.isFunction();\n  });\n}\nfunction getStatementParent() {\n  var path = this;\n  do {\n    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\"File/Program node, we can't possibly find a statement parent to this\");\n  }\n  return path;\n}\nfunction getEarliestCommonAncestorFrom(paths) {\n  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {\n    var earliest;\n    var keys = VISITOR_KEYS[deepest.type];\n    var _iterator = _createForOfIteratorHelper(ancestries),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var ancestry = _step.value;\n        var path = ancestry[i + 1];\n        if (!earliest) {\n          earliest = path;\n          continue;\n        }\n        if (path.listKey && earliest.listKey === path.listKey) {\n          if (path.key < earliest.key) {\n            earliest = path;\n            continue;\n          }\n        }\n        var earliestKeyIndex = keys.indexOf(earliest.parentKey);\n        var currentKeyIndex = keys.indexOf(path.parentKey);\n        if (earliestKeyIndex > currentKeyIndex) {\n          earliest = path;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return earliest;\n  });\n}\nfunction getDeepestCommonAncestorFrom(paths, filter) {\n  var _this = this;\n  if (!paths.length) {\n    return this;\n  }\n  if (paths.length === 1) {\n    return paths[0];\n  }\n  var minDepth = Infinity;\n  var lastCommonIndex, lastCommon;\n  var ancestries = paths.map(function (path) {\n    var ancestry = [];\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== _this);\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n    return ancestry;\n  });\n  var first = ancestries[0];\n  depthLoop: for (var i = 0; i < minDepth; i++) {\n    var shouldMatch = first[i];\n    var _iterator2 = _createForOfIteratorHelper(ancestries),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var ancestry = _step2.value;\n        if (ancestry[i] !== shouldMatch) {\n          break depthLoop;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\nfunction getAncestry() {\n  var path = this;\n  var paths = [];\n  do {\n    paths.push(path);\n  } while (path = path.parentPath);\n  return paths;\n}\nfunction isAncestor(maybeDescendant) {\n  return maybeDescendant.isDescendant(this);\n}\nfunction isDescendant(maybeAncestor) {\n  return !!this.findParent(function (parent) {\n    return parent === maybeAncestor;\n  });\n}\nfunction inType() {\n  var path = this;\n  for (var _len = arguments.length, candidateTypes = new Array(_len), _key = 0; _key < _len; _key++) {\n    candidateTypes[_key] = arguments[_key];\n  }\n  while (path) {\n    var _iterator3 = _createForOfIteratorHelper(candidateTypes),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var type = _step3.value;\n        if (path.node.type === type) return true;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    path = path.parentPath;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\nvar _assign2 = _interopRequireDefault(_assign);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nexports.default = buildConfigChain;\nvar _resolve = require(\"../../../helpers/resolve\");\nvar _resolve2 = _interopRequireDefault(_resolve);\nvar _json = require(\"json5\");\nvar _json2 = _interopRequireDefault(_json);\nvar _pathIsAbsolute = require(\"path-is-absolute\");\nvar _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);\nvar _path = require(\"path\");\nvar _path2 = _interopRequireDefault(_path);\nvar _fs = require(\"fs\");\nvar _fs2 = _interopRequireDefault(_fs);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar existsCache = {};\nvar jsonCache = {};\nvar BABELIGNORE_FILENAME = \".babelignore\";\nvar BABELRC_FILENAME = \".babelrc\";\nvar PACKAGE_FILENAME = \"package.json\";\nfunction exists(filename) {\n  var cached = existsCache[filename];\n  if (cached == null) {\n    return existsCache[filename] = _fs2.default.existsSync(filename);\n  } else {\n    return cached;\n  }\n}\nfunction buildConfigChain() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var log = arguments[1];\n  var filename = opts.filename;\n  var builder = new ConfigChainBuilder(log);\n  if (opts.babelrc !== false) {\n    builder.findConfigs(filename);\n  }\n  builder.mergeConfig({\n    options: opts,\n    alias: \"base\",\n    dirname: filename && _path2.default.dirname(filename)\n  });\n  return builder.configs;\n}\nvar ConfigChainBuilder = function () {\n  function ConfigChainBuilder(log) {\n    (0, _classCallCheck3.default)(this, ConfigChainBuilder);\n    this.resolvedConfigs = [];\n    this.configs = [];\n    this.log = log;\n  }\n  ConfigChainBuilder.prototype.findConfigs = function findConfigs(loc) {\n    if (!loc) return;\n    if (!(0, _pathIsAbsolute2.default)(loc)) {\n      loc = _path2.default.join(process.cwd(), loc);\n    }\n    var foundConfig = false;\n    var foundIgnore = false;\n    while (loc !== (loc = _path2.default.dirname(loc))) {\n      if (!foundConfig) {\n        var configLoc = _path2.default.join(loc, BABELRC_FILENAME);\n        if (exists(configLoc)) {\n          this.addConfig(configLoc);\n          foundConfig = true;\n        }\n        var pkgLoc = _path2.default.join(loc, PACKAGE_FILENAME);\n        if (!foundConfig && exists(pkgLoc)) {\n          foundConfig = this.addConfig(pkgLoc, \"babel\", JSON);\n        }\n      }\n      if (!foundIgnore) {\n        var ignoreLoc = _path2.default.join(loc, BABELIGNORE_FILENAME);\n        if (exists(ignoreLoc)) {\n          this.addIgnoreConfig(ignoreLoc);\n          foundIgnore = true;\n        }\n      }\n      if (foundIgnore && foundConfig) return;\n    }\n  };\n  ConfigChainBuilder.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {\n    var file = _fs2.default.readFileSync(loc, \"utf8\");\n    var lines = file.split(\"\\n\");\n    lines = lines.map(function (line) {\n      return line.replace(/#(.*?)$/, \"\").trim();\n    }).filter(function (line) {\n      return !!line;\n    });\n    if (lines.length) {\n      this.mergeConfig({\n        options: {\n          ignore: lines\n        },\n        alias: loc,\n        dirname: _path2.default.dirname(loc)\n      });\n    }\n  };\n  ConfigChainBuilder.prototype.addConfig = function addConfig(loc, key) {\n    var json = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _json2.default;\n    if (this.resolvedConfigs.indexOf(loc) >= 0) {\n      return false;\n    }\n    this.resolvedConfigs.push(loc);\n    var content = _fs2.default.readFileSync(loc, \"utf8\");\n    var options = void 0;\n    try {\n      options = jsonCache[content] = jsonCache[content] || json.parse(content);\n      if (key) options = options[key];\n    } catch (err) {\n      err.message = loc + \": Error while parsing JSON - \" + err.message;\n      throw err;\n    }\n    this.mergeConfig({\n      options: options,\n      alias: loc,\n      dirname: _path2.default.dirname(loc)\n    });\n    return !!options;\n  };\n  ConfigChainBuilder.prototype.mergeConfig = function mergeConfig(_ref) {\n    var options = _ref.options,\n      alias = _ref.alias,\n      loc = _ref.loc,\n      dirname = _ref.dirname;\n    if (!options) {\n      return false;\n    }\n    options = (0, _assign2.default)({}, options);\n    dirname = dirname || process.cwd();\n    loc = loc || alias;\n    if (options.extends) {\n      var extendsLoc = (0, _resolve2.default)(options.extends, dirname);\n      if (extendsLoc) {\n        this.addConfig(extendsLoc);\n      } else {\n        if (this.log) this.log.error(\"Couldn't resolve extends clause of \" + options.extends + \" in \" + alias);\n      }\n      delete options.extends;\n    }\n    this.configs.push({\n      options: options,\n      alias: alias,\n      loc: loc,\n      dirname: dirname\n    });\n    var envOpts = void 0;\n    var envKey = process.env.BABEL_ENV || process.env.NODE_ENV || \"development\";\n    if (options.env) {\n      envOpts = options.env[envKey];\n      delete options.env;\n    }\n    this.mergeConfig({\n      options: envOpts,\n      alias: alias + \".env.\" + envKey,\n      dirname: dirname\n    });\n  };\n  return ConfigChainBuilder;\n}();\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
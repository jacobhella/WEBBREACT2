{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getKey = _getKey;\nexports._getPattern = _getPattern;\nexports.get = get;\nexports.getAllNextSiblings = getAllNextSiblings;\nexports.getAllPrevSiblings = getAllPrevSiblings;\nexports.getBindingIdentifierPaths = getBindingIdentifierPaths;\nexports.getBindingIdentifiers = getBindingIdentifiers;\nexports.getCompletionRecords = getCompletionRecords;\nexports.getNextSibling = getNextSibling;\nexports.getOpposite = getOpposite;\nexports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;\nexports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;\nexports.getPrevSibling = getPrevSibling;\nexports.getSibling = getSibling;\nvar _index = require(\"./index\");\nvar _t = require(\"@babel/types\");\nvar _getBindingIdentifiers = _t.getBindingIdentifiers,\n  _getOuterBindingIdentifiers = _t.getOuterBindingIdentifiers,\n  isDeclaration = _t.isDeclaration,\n  numericLiteral = _t.numericLiteral,\n  unaryExpression = _t.unaryExpression;\nvar NORMAL_COMPLETION = 0;\nvar BREAK_COMPLETION = 1;\nfunction NormalCompletion(path) {\n  return {\n    type: NORMAL_COMPLETION,\n    path: path\n  };\n}\nfunction BreakCompletion(path) {\n  return {\n    type: BREAK_COMPLETION,\n    path: path\n  };\n}\nfunction getOpposite() {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n  return null;\n}\nfunction addCompletionRecords(path, records, context) {\n  if (path) {\n    records.push.apply(records, _toConsumableArray(_getCompletionRecords(path, context)));\n  }\n  return records;\n}\nfunction completionRecordForSwitch(cases, records, context) {\n  var lastNormalCompletions = [];\n  for (var i = 0; i < cases.length; i++) {\n    var casePath = cases[i];\n    var caseCompletions = _getCompletionRecords(casePath, context);\n    var normalCompletions = [];\n    var breakCompletions = [];\n    var _iterator = _createForOfIteratorHelper(caseCompletions),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n        if (c.type === NORMAL_COMPLETION) {\n          normalCompletions.push(c);\n        }\n        if (c.type === BREAK_COMPLETION) {\n          breakCompletions.push(c);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n    records.push.apply(records, breakCompletions);\n  }\n  records.push.apply(records, _toConsumableArray(lastNormalCompletions));\n  return records;\n}\nfunction normalCompletionToBreak(completions) {\n  completions.forEach(function (c) {\n    c.type = BREAK_COMPLETION;\n  });\n}\nfunction replaceBreakStatementInBreakCompletion(completions, reachable) {\n  completions.forEach(function (c) {\n    if (c.path.isBreakStatement({\n      label: null\n    })) {\n      if (reachable) {\n        c.path.replaceWith(unaryExpression(\"void\", numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\nfunction getStatementListCompletion(paths, context) {\n  var completions = [];\n  if (context.canHaveBreak) {\n    var lastNormalCompletions = [];\n    for (var i = 0; i < paths.length; i++) {\n      var path = paths[i];\n      var newContext = Object.assign({}, context, {\n        inCaseClause: false\n      });\n      if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n      var statementCompletions = _getCompletionRecords(path, newContext);\n      if (statementCompletions.length > 0 && statementCompletions.every(function (c) {\n        return c.type === BREAK_COMPLETION;\n      })) {\n        if (lastNormalCompletions.length > 0 && statementCompletions.every(function (c) {\n          return c.path.isBreakStatement({\n            label: null\n          });\n        })) {\n          normalCompletionToBreak(lastNormalCompletions);\n          completions.push.apply(completions, _toConsumableArray(lastNormalCompletions));\n          if (lastNormalCompletions.some(function (c) {\n            return c.path.isDeclaration();\n          })) {\n            completions.push.apply(completions, _toConsumableArray(statementCompletions));\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n          replaceBreakStatementInBreakCompletion(statementCompletions, false);\n        } else {\n          completions.push.apply(completions, _toConsumableArray(statementCompletions));\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(statementCompletions, true);\n          }\n        }\n        break;\n      }\n      if (i === paths.length - 1) {\n        completions.push.apply(completions, _toConsumableArray(statementCompletions));\n      } else {\n        lastNormalCompletions = [];\n        for (var _i = 0; _i < statementCompletions.length; _i++) {\n          var c = statementCompletions[_i];\n          if (c.type === BREAK_COMPLETION) {\n            completions.push(c);\n          }\n          if (c.type === NORMAL_COMPLETION) {\n            lastNormalCompletions.push(c);\n          }\n        }\n      }\n    }\n  } else if (paths.length) {\n    for (var _i2 = paths.length - 1; _i2 >= 0; _i2--) {\n      var pathCompletions = _getCompletionRecords(paths[_i2], context);\n      if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {\n        completions.push.apply(completions, _toConsumableArray(pathCompletions));\n        break;\n      }\n    }\n  }\n  return completions;\n}\nfunction _getCompletionRecords(path, context) {\n  var records = [];\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    return getStatementListCompletion(path.get(\"body\"), context);\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    return completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    return getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true\n    });\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n  return records;\n}\nfunction getCompletionRecords() {\n  var records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false\n  });\n  return records.map(function (r) {\n    return r.path;\n  });\n}\nfunction getSibling(key) {\n  return _index.default.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key\n  }).setContext(this.context);\n}\nfunction getPrevSibling() {\n  return this.getSibling(this.key - 1);\n}\nfunction getNextSibling() {\n  return this.getSibling(this.key + 1);\n}\nfunction getAllNextSiblings() {\n  var _key = this.key;\n  var sibling = this.getSibling(++_key);\n  var siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n  return siblings;\n}\nfunction getAllPrevSiblings() {\n  var _key = this.key;\n  var sibling = this.getSibling(--_key);\n  var siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n  return siblings;\n}\nfunction get(key) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (context === true) context = this.context;\n  var parts = key.split(\".\");\n  if (parts.length === 1) {\n    return this._getKey(key, context);\n  } else {\n    return this._getPattern(parts, context);\n  }\n}\nfunction _getKey(key, context) {\n  var _this = this;\n  var node = this.node;\n  var container = node[key];\n  if (Array.isArray(container)) {\n    return container.map(function (_, i) {\n      return _index.default.get({\n        listKey: key,\n        parentPath: _this,\n        parent: node,\n        container: container,\n        key: i\n      }).setContext(context);\n    });\n  } else {\n    return _index.default.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key\n    }).setContext(context);\n  }\n}\nfunction _getPattern(parts, context) {\n  var path = this;\n  var _iterator2 = _createForOfIteratorHelper(parts),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var part = _step2.value;\n      if (part === \".\") {\n        path = path.parentPath;\n      } else {\n        if (Array.isArray(path)) {\n          path = path[part];\n        } else {\n          path = path.get(part, context);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return path;\n}\nfunction getBindingIdentifiers(duplicates) {\n  return _getBindingIdentifiers(this.node, duplicates);\n}\nfunction getOuterBindingIdentifiers(duplicates) {\n  return _getOuterBindingIdentifiers(this.node, duplicates);\n}\nfunction getBindingIdentifierPaths() {\n  var duplicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var outerOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var path = this;\n  var search = [path];\n  var ids = Object.create(null);\n  while (search.length) {\n    var id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n    var keys = _getBindingIdentifiers.keys[id.node.type];\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        var _ids = ids[id.node.name] = ids[id.node.name] || [];\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n      continue;\n    }\n    if (id.isExportDeclaration()) {\n      var declaration = id.get(\"declaration\");\n      if (isDeclaration(declaration)) {\n        search.push(declaration);\n      }\n      continue;\n    }\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n    if (keys) {\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var child = id.get(key);\n        if (Array.isArray(child)) {\n          search.push.apply(search, _toConsumableArray(child));\n        } else if (child.node) {\n          search.push(child);\n        }\n      }\n    }\n  }\n  return ids;\n}\nfunction getOuterBindingIdentifierPaths() {\n  var duplicates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return this.getBindingIdentifierPaths(duplicates, true);\n}","map":null,"metadata":{},"sourceType":"script"}
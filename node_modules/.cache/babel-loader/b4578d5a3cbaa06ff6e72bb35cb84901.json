{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction helpers() {\n  var data = require(\"@babel/helpers\");\n  helpers = function helpers() {\n    return data;\n  };\n  return data;\n}\nfunction _traverse() {\n  var data = require(\"@babel/traverse\");\n  _traverse = function _traverse() {\n    return data;\n  };\n  return data;\n}\nfunction _codeFrame() {\n  var data = require(\"@babel/code-frame\");\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n  return data;\n}\nfunction _t() {\n  var data = require(\"@babel/types\");\n  _t = function _t() {\n    return data;\n  };\n  return data;\n}\nfunction _helperModuleTransforms() {\n  var data = require(\"@babel/helper-module-transforms\");\n  _helperModuleTransforms = function _helperModuleTransforms() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = require(\"semver\");\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nvar _t2 = _t(),\n  cloneNode = _t2.cloneNode,\n  interpreterDirective = _t2.interpreterDirective;\nvar errorVisitor = {\n  enter: function enter(path, state) {\n    var loc = path.node.loc;\n    if (loc) {\n      state.loc = loc;\n      path.stop();\n    }\n  }\n};\nvar File = /*#__PURE__*/function () {\n  function File(options, _ref) {\n    var _this = this;\n    var code = _ref.code,\n      ast = _ref.ast,\n      inputMap = _ref.inputMap;\n    _classCallCheck(this, File);\n    this._map = new Map();\n    this.opts = void 0;\n    this.declarations = {};\n    this.path = void 0;\n    this.ast = void 0;\n    this.scope = void 0;\n    this.metadata = {};\n    this.code = \"\";\n    this.inputMap = void 0;\n    this.hub = {\n      file: this,\n      getCode: function getCode() {\n        return _this.code;\n      },\n      getScope: function getScope() {\n        return _this.scope;\n      },\n      addHelper: this.addHelper.bind(this),\n      buildError: this.buildCodeFrameError.bind(this)\n    };\n    this.opts = options;\n    this.code = code;\n    this.ast = ast;\n    this.inputMap = inputMap;\n    this.path = _traverse().NodePath.get({\n      hub: this.hub,\n      parentPath: null,\n      parent: this.ast,\n      container: this.ast,\n      key: \"program\"\n    }).setContext();\n    this.scope = this.path.scope;\n  }\n  _createClass(File, [{\n    key: \"set\",\n    value: function set(key, val) {\n      if (key === \"helpersNamespace\") {\n        throw new Error(\"Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.\" + \"If you are using @babel/plugin-external-helpers you will need to use a newer \" + \"version than the one you currently have installed. \" + \"If you have your own implementation, you'll want to explore using 'helperGenerator' \" + \"alongside 'file.availableHelper()'.\");\n      }\n      this._map.set(key, val);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this._map.get(key);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this._map.has(key);\n    }\n  }, {\n    key: \"getModuleName\",\n    value: function getModuleName() {\n      return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);\n    }\n  }, {\n    key: \"addImport\",\n    value: function addImport() {\n      throw new Error(\"This API has been removed. If you're looking for this \" + \"functionality in Babel 7, you should import the \" + \"'@babel/helper-module-imports' module and use the functions exposed \" + \" from that module, such as 'addNamed' or 'addDefault'.\");\n    }\n  }, {\n    key: \"availableHelper\",\n    value: function availableHelper(name, versionRange) {\n      var minVersion;\n      try {\n        minVersion = helpers().minVersion(name);\n      } catch (err) {\n        if (err.code !== \"BABEL_HELPER_UNKNOWN\") throw err;\n        return false;\n      }\n      if (typeof versionRange !== \"string\") return true;\n      if (_semver().valid(versionRange)) versionRange = \"^\".concat(versionRange);\n      return !_semver().intersects(\"<\".concat(minVersion), versionRange) && !_semver().intersects(\">=8.0.0\", versionRange);\n    }\n  }, {\n    key: \"addHelper\",\n    value: function addHelper(name) {\n      var _this2 = this;\n      var declar = this.declarations[name];\n      if (declar) return cloneNode(declar);\n      var generator = this.get(\"helperGenerator\");\n      if (generator) {\n        var res = generator(name);\n        if (res) return res;\n      }\n      helpers().ensure(name, File);\n      var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);\n      var dependencies = {};\n      var _iterator = _createForOfIteratorHelper(helpers().getDependencies(name)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dep = _step.value;\n          dependencies[dep] = this.addHelper(dep);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _helpers$get = helpers().get(name, function (dep) {\n          return dependencies[dep];\n        }, uid, Object.keys(this.scope.getAllBindings())),\n        nodes = _helpers$get.nodes,\n        globals = _helpers$get.globals;\n      globals.forEach(function (name) {\n        if (_this2.path.scope.hasBinding(name, true)) {\n          _this2.path.scope.rename(name);\n        }\n      });\n      nodes.forEach(function (node) {\n        node._compact = true;\n      });\n      this.path.unshiftContainer(\"body\", nodes);\n      this.path.get(\"body\").forEach(function (path) {\n        if (nodes.indexOf(path.node) === -1) return;\n        if (path.isVariableDeclaration()) _this2.scope.registerDeclaration(path);\n      });\n      return uid;\n    }\n  }, {\n    key: \"addTemplateObject\",\n    value: function addTemplateObject() {\n      throw new Error(\"This function has been moved into the template literal transform itself.\");\n    }\n  }, {\n    key: \"buildCodeFrameError\",\n    value: function buildCodeFrameError(node, msg) {\n      var _Error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SyntaxError;\n      var loc = node && (node.loc || node._loc);\n      if (!loc && node) {\n        var state = {\n          loc: null\n        };\n        (0, _traverse().default)(node, errorVisitor, this.scope, state);\n        loc = state.loc;\n        var txt = \"This is an error on an internal node. Probably an internal error.\";\n        if (loc) txt += \" Location has been estimated.\";\n        msg += \" (\".concat(txt, \")\");\n      }\n      if (loc) {\n        var _this$opts$highlightC = this.opts.highlightCode,\n          highlightCode = _this$opts$highlightC === void 0 ? true : _this$opts$highlightC;\n        msg += \"\\n\" + (0, _codeFrame().codeFrameColumns)(this.code, {\n          start: {\n            line: loc.start.line,\n            column: loc.start.column + 1\n          },\n          end: loc.end && loc.start.line === loc.end.line ? {\n            line: loc.end.line,\n            column: loc.end.column + 1\n          } : undefined\n        }, {\n          highlightCode: highlightCode\n        });\n      }\n      return new _Error(msg);\n    }\n  }, {\n    key: \"shebang\",\n    get: function get() {\n      var interpreter = this.path.node.interpreter;\n      return interpreter ? interpreter.value : \"\";\n    },\n    set: function set(value) {\n      if (value) {\n        this.path.get(\"interpreter\").replaceWith(interpreterDirective(value));\n      } else {\n        this.path.get(\"interpreter\").remove();\n      }\n    }\n  }]);\n  return File;\n}();\nexports.default = File;\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
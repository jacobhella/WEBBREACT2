{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/set-array'), require('@jridgewell/sourcemap-codec')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/set-array', '@jridgewell/sourcemap-codec'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.genMapping = {}, global.setArray, global.sourcemapCodec));\n})(this, function (exports, setArray, sourcemapCodec) {\n  'use strict';\n\n  /**\n   * A low-level API to associate a generated position with an original source position. Line and\n   * column here are 0-based, unlike `addMapping`.\n   */\n  exports.addSegment = void 0;\n  /**\n   * A high-level API to associate a generated position with an original source position. Line is\n   * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n   */\n  exports.addMapping = void 0;\n  /**\n   * Adds/removes the content of the source file to the source map.\n   */\n  exports.setSourceContent = void 0;\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  exports.decodedMap = void 0;\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  exports.encodedMap = void 0;\n  /**\n   * Returns an array of high-level mapping objects for every recorded segment, which could then be\n   * passed to the `source-map` library.\n   */\n  exports.allMappings = void 0;\n  /**\n   * Provides the state to generate a sourcemap.\n   */\n  var GenMapping = function GenMapping() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      file = _ref.file,\n      sourceRoot = _ref.sourceRoot;\n    _classCallCheck(this, GenMapping);\n    this._names = new setArray.SetArray();\n    this._sources = new setArray.SetArray();\n    this._sourcesContent = [];\n    this._mappings = [];\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  };\n  (function () {\n    exports.addSegment = function (map, genLine, genColumn, source, sourceLine, sourceColumn, name) {\n      var mappings = map._mappings,\n        sources = map._sources,\n        sourcesContent = map._sourcesContent,\n        names = map._names;\n      var line = getLine(mappings, genLine);\n      if (source == null) {\n        var _seg = [genColumn];\n        var _index = getColumnIndex(line, genColumn, _seg);\n        return insert(line, _index, _seg);\n      }\n      var sourcesIndex = setArray.put(sources, source);\n      var seg = name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, setArray.put(names, name)] : [genColumn, sourcesIndex, sourceLine, sourceColumn];\n      var index = getColumnIndex(line, genColumn, seg);\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = null;\n      insert(line, index, seg);\n    };\n    exports.addMapping = function (map, mapping) {\n      var generated = mapping.generated,\n        source = mapping.source,\n        original = mapping.original,\n        name = mapping.name;\n      return exports.addSegment(map, generated.line - 1, generated.column, source, original == null ? undefined : original.line - 1, original === null || original === void 0 ? void 0 : original.column, name);\n    };\n    exports.setSourceContent = function (map, source, content) {\n      var sources = map._sources,\n        sourcesContent = map._sourcesContent;\n      sourcesContent[setArray.put(sources, source)] = content;\n    };\n    exports.decodedMap = function (map) {\n      var file = map.file,\n        sourceRoot = map.sourceRoot,\n        mappings = map._mappings,\n        sources = map._sources,\n        sourcesContent = map._sourcesContent,\n        names = map._names;\n      return {\n        version: 3,\n        file: file,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent: sourcesContent,\n        mappings: mappings\n      };\n    };\n    exports.encodedMap = function (map) {\n      var decoded = exports.decodedMap(map);\n      return Object.assign(Object.assign({}, decoded), {\n        mappings: sourcemapCodec.encode(decoded.mappings)\n      });\n    };\n    exports.allMappings = function (map) {\n      var out = [];\n      var mappings = map._mappings,\n        sources = map._sources,\n        names = map._names;\n      for (var i = 0; i < mappings.length; i++) {\n        var line = mappings[i];\n        for (var j = 0; j < line.length; j++) {\n          var seg = line[j];\n          var generated = {\n            line: i + 1,\n            column: seg[0]\n          };\n          var source = undefined;\n          var original = undefined;\n          var name = undefined;\n          if (seg.length !== 1) {\n            source = sources.array[seg[1]];\n            original = {\n              line: seg[2] + 1,\n              column: seg[3]\n            };\n            if (seg.length === 5) name = names.array[seg[4]];\n          }\n          out.push({\n            generated: generated,\n            source: source,\n            original: original,\n            name: name\n          });\n        }\n      }\n      return out;\n    };\n  })();\n  function getLine(mappings, index) {\n    for (var i = mappings.length; i <= index; i++) {\n      mappings[i] = [];\n    }\n    return mappings[index];\n  }\n  function getColumnIndex(line, column, seg) {\n    var index = line.length;\n    for (var i = index - 1; i >= 0; i--, index--) {\n      var current = line[i];\n      var col = current[0];\n      if (col > column) continue;\n      if (col < column) break;\n      var cmp = compare(current, seg);\n      if (cmp === 0) return index;\n      if (cmp < 0) break;\n    }\n    return index;\n  }\n  function compare(a, b) {\n    var cmp = compareNum(a.length, b.length);\n    if (cmp !== 0) return cmp;\n    // We've already checked genColumn\n    if (a.length === 1) return 0;\n    cmp = compareNum(a[1], b[1]);\n    if (cmp !== 0) return cmp;\n    cmp = compareNum(a[2], b[2]);\n    if (cmp !== 0) return cmp;\n    cmp = compareNum(a[3], b[3]);\n    if (cmp !== 0) return cmp;\n    if (a.length === 4) return 0;\n    return compareNum(a[4], b[4]);\n  }\n  function compareNum(a, b) {\n    return a - b;\n  }\n  function insert(array, index, value) {\n    if (index === -1) return;\n    for (var i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n    array[index] = value;\n  }\n  exports.GenMapping = GenMapping;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}
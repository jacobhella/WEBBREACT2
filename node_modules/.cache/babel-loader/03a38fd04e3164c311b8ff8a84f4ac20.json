{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.isJSONString = exports.getTestEnvironment = exports._replaceRootDirTags = exports.replaceRootDirInPath = exports.escapeGlobCharacters = exports.resolve = exports.DOCUMENTATION_NOTE = exports.BULLET = undefined;\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _jestValidate;\nfunction _load_jestValidate() {\n  return _jestValidate = require('jest-validate');\n}\nvar _jestResolve;\nfunction _load_jestResolve() {\n  return _jestResolve = _interopRequireDefault(require('jest-resolve'));\n}\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar BULLET = exports.BULLET = (_chalk || _load_chalk()).default.bold(\"\\u25CF \");\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar DOCUMENTATION_NOTE = exports.DOCUMENTATION_NOTE = \"  \".concat((_chalk || _load_chalk()).default.bold('Configuration Documentation:'), \"\\n  https://jestjs.io/docs/configuration.html\\n\");\nvar createValidationError = function createValidationError(message) {\n  return new (_jestValidate || _load_jestValidate()).ValidationError(\"\".concat(BULLET, \"Validation Error\"), message, DOCUMENTATION_NOTE);\n};\nvar resolve = exports.resolve = function (resolver, _ref) {\n  var key = _ref.key,\n    filePath = _ref.filePath,\n    rootDir = _ref.rootDir,\n    optional = _ref.optional;\n  var module = (_jestResolve || _load_jestResolve()).default.findNodeModule(replaceRootDirInPath(rootDir, filePath), {\n    basedir: rootDir,\n    resolver: resolver\n  });\n  if (!module && !optional) {\n    throw createValidationError(\"  Module \".concat((_chalk || _load_chalk()).default.bold(filePath), \" in the \").concat((_chalk || _load_chalk()).default.bold(key), \" option was not found.\\n         \").concat((_chalk || _load_chalk()).default.bold('<rootDir>'), \" is: \").concat(rootDir));\n  }\n  return module;\n};\nvar escapeGlobCharacters = exports.escapeGlobCharacters = function (path) {\n  return path.replace(/([()*{}\\[\\]!?\\\\])/g, '\\\\$1');\n};\nvar replaceRootDirInPath = exports.replaceRootDirInPath = function (rootDir, filePath) {\n  if (!/^<rootDir>/.test(filePath)) {\n    return filePath;\n  }\n  return (_path || _load_path()).default.resolve(rootDir, (_path || _load_path()).default.normalize('./' + filePath.substr('<rootDir>'.length)));\n};\nvar _replaceRootDirInObject = function _replaceRootDirInObject(rootDir, config) {\n  if (config !== null) {\n    var newConfig = {};\n    for (var configKey in config) {\n      newConfig[configKey] = configKey === 'rootDir' ? config[configKey] : _replaceRootDirTags(rootDir, config[configKey]);\n    }\n    return newConfig;\n  }\n  return config;\n};\nvar _replaceRootDirTags = exports._replaceRootDirTags = function (rootDir, config) {\n  switch (typeof config) {\n    case 'object':\n      if (Array.isArray(config)) {\n        return config.map(function (item) {\n          return _replaceRootDirTags(rootDir, item);\n        });\n      }\n      if (config instanceof RegExp) {\n        return config;\n      }\n      return _replaceRootDirInObject(rootDir, config);\n    case 'string':\n      return replaceRootDirInPath(rootDir, config);\n  }\n  return config;\n};\n\n/**\n * Finds the test environment to use:\n *\n * 1. looks for jest-environment-<name> relative to project.\n * 1. looks for jest-environment-<name> relative to Jest.\n * 1. looks for <name> relative to project.\n * 1. looks for <name> relative to Jest.\n */\nvar getTestEnvironment = exports.getTestEnvironment = function (config) {\n  var env = replaceRootDirInPath(config.rootDir, config.testEnvironment);\n  var module = (_jestResolve || _load_jestResolve()).default.findNodeModule(\"jest-environment-\".concat(env), {\n    basedir: config.rootDir\n  });\n  if (module) {\n    return module;\n  }\n  try {\n    return require.resolve(\"jest-environment-\".concat(env));\n  } catch (e) {}\n  module = (_jestResolve || _load_jestResolve()).default.findNodeModule(env, {\n    basedir: config.rootDir\n  });\n  if (module) {\n    return module;\n  }\n  try {\n    return require.resolve(env);\n  } catch (e) {}\n  throw createValidationError(\"  Test environment \".concat((_chalk || _load_chalk()).default.bold(env), \" cannot be found. Make sure the \").concat((_chalk || _load_chalk()).default.bold('testEnvironment'), \" configuration option points to an existing node module.\"));\n};\nvar isJSONString = exports.isJSONString = function (text) {\n  return text && typeof text === 'string' && text.startsWith('{') && text.endsWith('}');\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = expectationResultFactory;\nvar _prettyFormat = require('pretty-format');\nvar _prettyFormat2 = _interopRequireDefault(_prettyFormat);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction messageFormatter(_ref) {\n  var error = _ref.error,\n    message = _ref.message,\n    passed = _ref.passed;\n  if (passed) {\n    return 'Passed.';\n  }\n  if (message) {\n    return message;\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  if (\n  // duck-type Error, see #2549\n  error && typeof error === 'object' && typeof error.message === 'string' && typeof error.name === 'string') {\n    return \"\".concat(error.name, \": \").concat(error.message);\n  }\n  return \"thrown: \".concat((0, _prettyFormat2.default)(error, {\n    maxDepth: 3\n  }));\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nfunction stackFormatter(options, initError, errorMessage) {\n  if (options.passed) {\n    return '';\n  }\n  if (options.error) {\n    if (options.error.stack) {\n      return options.error.stack;\n    }\n    if (options.error === errorMessage) {\n      return errorMessage;\n    }\n  }\n  if (initError) {\n    return errorMessage.trimRight() + '\\n\\n' + initError.stack;\n  }\n  return new Error(errorMessage).stack;\n}\nfunction expectationResultFactory(options, initError) {\n  var message = messageFormatter(options);\n  var stack = stackFormatter(options, initError, message);\n  if (options.passed) {\n    return {\n      error: options.error,\n      matcherName: options.matcherName,\n      message: message,\n      passed: options.passed,\n      stack: stack\n    };\n  }\n  return {\n    actual: options.actual,\n    error: options.error,\n    expected: options.expected,\n    matcherName: options.matcherName,\n    message: message,\n    passed: options.passed,\n    stack: stack\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SourceCoverage = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _istanbulLibCoverage = require('istanbul-lib-coverage');\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction cloneLocation(loc) {\n  return {\n    start: {\n      line: loc && loc.start.line,\n      column: loc && loc.start.column\n    },\n    end: {\n      line: loc && loc.end.line,\n      column: loc && loc.end.column\n    }\n  };\n}\n/**\n * SourceCoverage provides mutation methods to manipulate the structure of\n * a file coverage object. Used by the instrumenter to create a full coverage\n * object for a file incrementally.\n *\n * @private\n * @param pathOrObj {String|Object} - see the argument for {@link FileCoverage}\n * @extends FileCoverage\n * @constructor\n */\n\nvar SourceCoverage = function (_classes$FileCoverage) {\n  _inherits(SourceCoverage, _classes$FileCoverage);\n  function SourceCoverage(pathOrObj) {\n    _classCallCheck(this, SourceCoverage);\n    var _this = _possibleConstructorReturn(this, (SourceCoverage.__proto__ || Object.getPrototypeOf(SourceCoverage)).call(this, pathOrObj));\n    _this.meta = {\n      last: {\n        s: 0,\n        f: 0,\n        b: 0\n      }\n    };\n    return _this;\n  }\n  _createClass(SourceCoverage, [{\n    key: 'newStatement',\n    value: function newStatement(loc) {\n      var s = this.meta.last.s;\n      this.data.statementMap[s] = cloneLocation(loc);\n      this.data.s[s] = 0;\n      this.meta.last.s += 1;\n      return s;\n    }\n  }, {\n    key: 'newFunction',\n    value: function newFunction(name, decl, loc) {\n      var f = this.meta.last.f;\n      name = name || '(anonymous_' + f + ')';\n      this.data.fnMap[f] = {\n        name: name,\n        decl: cloneLocation(decl),\n        loc: cloneLocation(loc),\n        // DEPRECATED: some legacy reports require this info.\n        line: loc && loc.start.line\n      };\n      this.data.f[f] = 0;\n      this.meta.last.f += 1;\n      return f;\n    }\n  }, {\n    key: 'newBranch',\n    value: function newBranch(type, loc) {\n      var b = this.meta.last.b;\n      this.data.b[b] = [];\n      this.data.branchMap[b] = {\n        loc: cloneLocation(loc),\n        type: type,\n        locations: [],\n        // DEPRECATED: some legacy reports require this info.\n        line: loc && loc.start.line\n      };\n      this.meta.last.b += 1;\n      return b;\n    }\n  }, {\n    key: 'addBranchPath',\n    value: function addBranchPath(name, location) {\n      var bMeta = this.data.branchMap[name],\n        counts = this.data.b[name];\n\n      /* istanbul ignore if: paranoid check */\n      if (!bMeta) {\n        throw new Error(\"Invalid branch \" + name);\n      }\n      bMeta.locations.push(cloneLocation(location));\n      counts.push(0);\n      return counts.length - 1;\n    }\n\n    /**\n     * Assigns an input source map to the coverage that can be used\n     * to remap the coverage output to the original source\n     * @param sourceMap {object} the source map\n     */\n  }, {\n    key: 'inputSourceMap',\n    value: function inputSourceMap(sourceMap) {\n      this.data.inputSourceMap = sourceMap;\n    }\n  }, {\n    key: 'freeze',\n    value: function freeze() {\n      // prune empty branches\n      var map = this.data.branchMap,\n        branches = this.data.b;\n      Object.keys(map).forEach(function (b) {\n        if (map[b].locations.length === 0) {\n          delete map[b];\n          delete branches[b];\n        }\n      });\n    }\n  }]);\n  return SourceCoverage;\n}(_istanbulLibCoverage.classes.FileCoverage);\nexports.SourceCoverage = SourceCoverage;","map":null,"metadata":{},"sourceType":"script"}
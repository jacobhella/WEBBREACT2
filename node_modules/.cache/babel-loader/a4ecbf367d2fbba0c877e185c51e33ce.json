{"ast":null,"code":"var $ = {\n  enabled: true\n};\nvar CODES = {\n  // modifiers\n  reset: fmt(0, 0),\n  bold: fmt(1, 22),\n  dim: fmt(2, 22),\n  italic: fmt(3, 23),\n  underline: fmt(4, 24),\n  inverse: fmt(7, 27),\n  hidden: fmt(8, 28),\n  strikethrough: fmt(9, 29),\n  // colors\n  black: fmt(30, 39),\n  red: fmt(31, 39),\n  green: fmt(32, 39),\n  yellow: fmt(33, 39),\n  blue: fmt(34, 39),\n  magenta: fmt(35, 39),\n  cyan: fmt(36, 39),\n  white: fmt(37, 39),\n  gray: fmt(90, 39),\n  // background colors\n  bgBlack: fmt(40, 49),\n  bgRed: fmt(41, 49),\n  bgGreen: fmt(42, 49),\n  bgYellow: fmt(43, 49),\n  bgBlue: fmt(44, 49),\n  bgMagenta: fmt(45, 49),\n  bgCyan: fmt(46, 49),\n  bgWhite: fmt(47, 49)\n};\nfunction fmt(x, y) {\n  return {\n    open: \"\\x1B[\".concat(x, \"m\"),\n    close: \"\\x1B[\".concat(y, \"m\"),\n    rgx: new RegExp(\"\\\\x1b\\\\[\".concat(y, \"m\"), 'g')\n  };\n}\nfunction run(key, str) {\n  var tmp = CODES[key];\n  return tmp.open + str.replace(tmp.rgx, tmp.open) + tmp.close;\n}\nfunction exec(key, str) {\n  str += '';\n  if (!$.enabled) return str;\n  var arr = this.keys;\n  while (arr.length > 0) {\n    str = run(arr.shift(), str);\n  }\n  this.keys.push(key);\n  return str;\n}\nfunction attach(key) {\n  var ctx = {\n    keys: [key]\n  };\n  var fn = exec.bind(ctx, key);\n  var _loop = function _loop(k) {\n    Reflect.defineProperty(fn, k, {\n      get: function get() {\n        ctx.keys.push(k);\n        return fn;\n      }\n    });\n  };\n  for (var k in CODES) {\n    _loop(k);\n  }\n  return fn;\n}\nfor (var k in CODES) {\n  $[k] = attach(k);\n}\nmodule.exports = $;","map":null,"metadata":{},"sourceType":"script"}
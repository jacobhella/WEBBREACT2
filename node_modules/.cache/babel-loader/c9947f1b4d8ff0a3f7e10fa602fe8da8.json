{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\nvar _options = require(\"./options\");\nvar _parse = require(\"./parse\");\nvar _populate = require(\"./populate\");\nfunction literalTemplate(formatter, tpl, opts) {\n  var _buildLiteralData = buildLiteralData(formatter, tpl, opts),\n    metadata = _buildLiteralData.metadata,\n    names = _buildLiteralData.names;\n  return function (arg) {\n    var defaultReplacements = {};\n    arg.forEach(function (replacement, i) {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return function (arg) {\n      var replacements = (0, _options.normalizeReplacements)(arg);\n      if (replacements) {\n        Object.keys(replacements).forEach(function (key) {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\nfunction buildLiteralData(formatter, tpl, opts) {\n  var names;\n  var nameSet;\n  var metadata;\n  var prefix = \"\";\n  do {\n    prefix += \"$\";\n    var result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(function (placeholder) {\n    return placeholder.isDuplicate && nameSet.has(placeholder.name);\n  }));\n  return {\n    metadata: metadata,\n    names: names\n  };\n}\nfunction buildTemplateCode(tpl, prefix) {\n  var names = [];\n  var code = tpl[0];\n  for (var i = 1; i < tpl.length; i++) {\n    var value = \"\".concat(prefix).concat(i - 1);\n    names.push(value);\n    code += value + tpl[i];\n  }\n  return {\n    names: names,\n    code: code\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
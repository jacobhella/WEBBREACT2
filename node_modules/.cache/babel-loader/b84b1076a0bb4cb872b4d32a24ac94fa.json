{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nvar get;\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nvar put;\n/**\n * Pops the last added item out of the SetArray.\n */\nvar pop;\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nvar SetArray = function SetArray() {\n  _classCallCheck(this, SetArray);\n  this._indexes = {\n    __proto__: null\n  };\n  this.array = [];\n};\n(function () {\n  get = function get(strarr, key) {\n    return strarr._indexes[key];\n  };\n  put = function put(strarr, key) {\n    // The key may or may not be present. If it is present, it's a number.\n    var index = get(strarr, key);\n    if (index !== undefined) return index;\n    var array = strarr.array,\n      indexes = strarr._indexes;\n    return indexes[key] = array.push(key) - 1;\n  };\n  pop = function pop(strarr) {\n    var array = strarr.array,\n      indexes = strarr._indexes;\n    if (array.length === 0) return;\n    var last = array.pop();\n    indexes[last] = undefined;\n  };\n})();\nexport { SetArray, get, pop, put };","map":null,"metadata":{},"sourceType":"module"}
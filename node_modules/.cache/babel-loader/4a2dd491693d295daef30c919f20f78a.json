{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.run = run;\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _os;\nfunction _load_os() {\n  return _os = _interopRequireDefault(require('os'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _yargs;\nfunction _load_yargs() {\n  return _yargs = _interopRequireDefault(require('yargs'));\n}\nvar _jestUtil;\nfunction _load_jestUtil() {\n  return _jestUtil = require('jest-util');\n}\nvar _jestValidate;\nfunction _load_jestValidate() {\n  return _jestValidate = require('jest-validate');\n}\nvar _jestConfig;\nfunction _load_jestConfig() {\n  return _jestConfig = require('jest-config');\n}\nvar _;\nfunction _load_() {\n  return _ = _interopRequireDefault(require('../'));\n}\nvar _args;\nfunction _load_args() {\n  return _args = _interopRequireWildcard(require('./args'));\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// eslint-disable-next-line import/default\nvar VERSION = require('../../package.json').version;\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nfunction run(cliArgv, cliInfo) {\n  var realFs = require('fs');\n  var fs = require('graceful-fs');\n  fs.gracefulify(realFs);\n  var argv;\n  if (cliArgv) {\n    argv = cliArgv;\n  } else {\n    argv = (_yargs || _load_yargs()).default.usage((_args || _load_args()).usage).help(false).version(false).options((_args || _load_args()).options).argv;\n    (0, (_jestValidate || _load_jestValidate()).validateCLIOptions)(argv, Object.assign({}, (_args || _load_args()).options, {\n      deprecationEntries: (_jestConfig || _load_jestConfig()).deprecationEntries\n    }));\n  }\n  if (argv.help) {\n    (_yargs || _load_yargs()).default.showHelp();\n    process.on('exit', function () {\n      return process.exitCode = 1;\n    });\n    return;\n  }\n  if (argv.version) {\n    console.log(\"v\".concat(VERSION, \"\\n\"));\n    return;\n  }\n  if (!argv._.length) {\n    console.log('Please provide a path to a script. (See --help for details)');\n    process.on('exit', function () {\n      return process.exitCode = 1;\n    });\n    return;\n  }\n  var root = process.cwd();\n  var filePath = (_path || _load_path()).default.resolve(root, argv._[0]);\n  if (argv.debug) {\n    var info = cliInfo ? ', ' + cliInfo.join(', ') : '';\n    console.log(\"Using Jest Runtime v\".concat(VERSION).concat(info));\n  }\n  var options = (0, (_jestConfig || _load_jestConfig()).readConfig)(argv, root);\n  var globalConfig = options.globalConfig;\n  // Always disable automocking in scripts.\n  var config = Object.assign({}, options.projectConfig, {\n    automock: false,\n    unmockedModulePathPatterns: null\n  });\n  (_ || _load_()).default.createContext(config, {\n    maxWorkers: (_os || _load_os()).default.cpus().length - 1,\n    watchman: globalConfig.watchman\n  }).then(function (hasteMap) {\n    /* $FlowFixMe */\n    var Environment = require(config.testEnvironment);\n    var environment = new Environment(config);\n    (0, (_jestUtil || _load_jestUtil()).setGlobal)(environment.global, 'console', new (_jestUtil || _load_jestUtil()).Console(process.stdout, process.stderr));\n    environment.global.jestProjectConfig = config;\n    environment.global.jestGlobalConfig = globalConfig;\n    var runtime = new (_ || _load_()).default(config, environment, hasteMap.resolver);\n    runtime.requireModule(filePath);\n  }).catch(function (e) {\n    console.error((_chalk || _load_chalk()).default.red(e.stack || e));\n    process.on('exit', function () {\n      return process.exitCode = 1;\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
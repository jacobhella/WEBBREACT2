{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _jestMatcherUtils = require('jest-matcher-utils');\nvar _chalk = require('chalk');\nvar _chalk2 = _interopRequireDefault(_chalk);\nvar _jestDiff = require('jest-diff');\nvar _jestDiff2 = _interopRequireDefault(_jestDiff);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar assertOperatorsMap = {\n  '!=': 'notEqual',\n  '!==': 'notStrictEqual',\n  '==': 'equal',\n  '===': 'strictEqual'\n};\nvar humanReadableOperators = {\n  deepEqual: 'to deeply equal',\n  deepStrictEqual: 'to deeply and strictly equal',\n  equal: 'to be equal',\n  notDeepEqual: 'not to deeply equal',\n  notDeepStrictEqual: 'not to deeply and strictly equal',\n  notEqual: 'to not be equal',\n  notStrictEqual: 'not be strictly equal',\n  strictEqual: 'to strictly be equal'\n};\nvar getOperatorName = function getOperatorName(operator, stack) {\n  if (typeof operator === 'string') {\n    return assertOperatorsMap[operator] || operator;\n  }\n  if (stack.match('.doesNotThrow')) {\n    return 'doesNotThrow';\n  }\n  if (stack.match('.throws')) {\n    return 'throws';\n  }\n  return '';\n};\nvar operatorMessage = function operatorMessage(operator) {\n  var niceOperatorName = getOperatorName(operator, '');\n  // $FlowFixMe: we default to the operator itself, so holes in the map doesn't matter\n  var humanReadableOperator = humanReadableOperators[niceOperatorName];\n  return typeof operator === 'string' ? \"\".concat(humanReadableOperator || niceOperatorName, \" to:\\n\") : '';\n};\nvar assertThrowingMatcherHint = function assertThrowingMatcherHint(operatorName) {\n  return _chalk2.default.dim('assert') + _chalk2.default.dim('.' + operatorName + '(') + _chalk2.default.red('function') + _chalk2.default.dim(')');\n};\nvar assertMatcherHint = function assertMatcherHint(operator, operatorName) {\n  var message = _chalk2.default.dim('assert') + _chalk2.default.dim('.' + operatorName + '(') + _chalk2.default.red('received') + _chalk2.default.dim(', ') + _chalk2.default.green('expected') + _chalk2.default.dim(')');\n  if (operator === '==') {\n    message += ' or ' + _chalk2.default.dim('assert') + _chalk2.default.dim('(') + _chalk2.default.red('received') + _chalk2.default.dim(') ');\n  }\n  return message;\n};\nfunction assertionErrorMessage(error, options) {\n  var expected = error.expected,\n    actual = error.actual,\n    generatedMessage = error.generatedMessage,\n    message = error.message,\n    operator = error.operator,\n    stack = error.stack;\n  var diffString = (0, _jestDiff2.default)(expected, actual, options);\n  var hasCustomMessage = !generatedMessage;\n  var operatorName = getOperatorName(operator, stack);\n  var trimmedStack = stack.replace(message, '').replace(/AssertionError(.*)/g, '');\n  if (operatorName === 'doesNotThrow') {\n    return assertThrowingMatcherHint(operatorName) + '\\n\\n' + _chalk2.default.reset(\"Expected the function not to throw an error.\\n\") + _chalk2.default.reset(\"Instead, it threw:\\n\") + \"  \".concat((0, _jestMatcherUtils.printReceived)(actual)) + _chalk2.default.reset(hasCustomMessage ? '\\n\\nMessage:\\n  ' + message : '') + trimmedStack;\n  }\n  if (operatorName === 'throws') {\n    return assertThrowingMatcherHint(operatorName) + '\\n\\n' + _chalk2.default.reset(\"Expected the function to throw an error.\\n\") + _chalk2.default.reset(\"But it didn't throw anything.\") + _chalk2.default.reset(hasCustomMessage ? '\\n\\nMessage:\\n  ' + message : '') + trimmedStack;\n  }\n  return assertMatcherHint(operator, operatorName) + '\\n\\n' + _chalk2.default.reset(\"Expected value \".concat(operatorMessage(operator))) + \"  \".concat((0, _jestMatcherUtils.printExpected)(expected), \"\\n\") + _chalk2.default.reset(\"Received:\\n\") + \"  \".concat((0, _jestMatcherUtils.printReceived)(actual)) + _chalk2.default.reset(hasCustomMessage ? '\\n\\nMessage:\\n  ' + message : '') + (diffString ? \"\\n\\nDifference:\\n\\n\".concat(diffString) : '') + trimmedStack;\n}\nexports.default = assertionErrorMessage;","map":null,"metadata":{},"sourceType":"script"}
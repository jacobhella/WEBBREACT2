{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBindingIdentifier = isBindingIdentifier;\nexports.isBlockScoped = isBlockScoped;\nexports.isExistentialTypeParam = isExistentialTypeParam;\nexports.isExpression = isExpression;\nexports.isFlow = isFlow;\nexports.isForAwaitStatement = isForAwaitStatement;\nexports.isGenerated = isGenerated;\nexports.isNumericLiteralTypeAnnotation = isNumericLiteralTypeAnnotation;\nexports.isPure = isPure;\nexports.isReferenced = isReferenced;\nexports.isReferencedIdentifier = isReferencedIdentifier;\nexports.isReferencedMemberExpression = isReferencedMemberExpression;\nexports.isRestProperty = isRestProperty;\nexports.isScope = isScope;\nexports.isSpreadProperty = isSpreadProperty;\nexports.isStatement = isStatement;\nexports.isUser = isUser;\nexports.isVar = isVar;\nvar _t = require(\"@babel/types\");\nvar isBinding = _t.isBinding,\n  nodeIsBlockScoped = _t.isBlockScoped,\n  isExportDeclaration = _t.isExportDeclaration,\n  nodeIsExpression = _t.isExpression,\n  nodeIsFlow = _t.isFlow,\n  isForStatement = _t.isForStatement,\n  isForXStatement = _t.isForXStatement,\n  isIdentifier = _t.isIdentifier,\n  isImportDeclaration = _t.isImportDeclaration,\n  isImportSpecifier = _t.isImportSpecifier,\n  isJSXIdentifier = _t.isJSXIdentifier,\n  isJSXMemberExpression = _t.isJSXMemberExpression,\n  isMemberExpression = _t.isMemberExpression,\n  nodeIsRestElement = _t.isRestElement,\n  nodeIsReferenced = _t.isReferenced,\n  nodeIsScope = _t.isScope,\n  nodeIsStatement = _t.isStatement,\n  nodeIsVar = _t.isVar,\n  isVariableDeclaration = _t.isVariableDeclaration,\n  react = _t.react,\n  isForOfStatement = _t.isForOfStatement;\nvar isCompatTag = react.isCompatTag;\nfunction isReferencedIdentifier(opts) {\n  var node = this.node,\n    parent = this.parent;\n  if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n    if (isJSXIdentifier(node, opts)) {\n      if (isCompatTag(node.name)) return false;\n    } else {\n      return false;\n    }\n  }\n  return nodeIsReferenced(node, parent, this.parentPath.parent);\n}\nfunction isReferencedMemberExpression() {\n  var node = this.node,\n    parent = this.parent;\n  return isMemberExpression(node) && nodeIsReferenced(node, parent);\n}\nfunction isBindingIdentifier() {\n  var node = this.node,\n    parent = this.parent;\n  var grandparent = this.parentPath.parent;\n  return isIdentifier(node) && isBinding(node, parent, grandparent);\n}\nfunction isStatement() {\n  var node = this.node,\n    parent = this.parent;\n  if (nodeIsStatement(node)) {\n    if (isVariableDeclaration(node)) {\n      if (isForXStatement(parent, {\n        left: node\n      })) return false;\n      if (isForStatement(parent, {\n        init: node\n      })) return false;\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isExpression() {\n  if (this.isIdentifier()) {\n    return this.isReferencedIdentifier();\n  } else {\n    return nodeIsExpression(this.node);\n  }\n}\nfunction isScope() {\n  return nodeIsScope(this.node, this.parent);\n}\nfunction isReferenced() {\n  return nodeIsReferenced(this.node, this.parent);\n}\nfunction isBlockScoped() {\n  return nodeIsBlockScoped(this.node);\n}\nfunction isVar() {\n  return nodeIsVar(this.node);\n}\nfunction isUser() {\n  return this.node && !!this.node.loc;\n}\nfunction isGenerated() {\n  return !this.isUser();\n}\nfunction isPure(constantsOnly) {\n  return this.scope.isPure(this.node, constantsOnly);\n}\nfunction isFlow() {\n  var node = this.node;\n  if (nodeIsFlow(node)) {\n    return true;\n  } else if (isImportDeclaration(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else if (isExportDeclaration(node)) {\n    return node.exportKind === \"type\";\n  } else if (isImportSpecifier(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else {\n    return false;\n  }\n}\nfunction isRestProperty() {\n  return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();\n}\nfunction isSpreadProperty() {\n  return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();\n}\nfunction isForAwaitStatement() {\n  return isForOfStatement(this.node, {\n    await: true\n  });\n}\nfunction isExistentialTypeParam() {\n  throw new Error(\"`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.\");\n}\nfunction isNumericLiteralTypeAnnotation() {\n  throw new Error(\"`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.\");\n}","map":null,"metadata":{},"sourceType":"script"}
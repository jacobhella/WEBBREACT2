{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePluginObject = validatePluginObject;\nvar _optionAssertions = require(\"./option-assertions\");\nvar VALIDATORS = {\n  name: _optionAssertions.assertString,\n  manipulateOptions: _optionAssertions.assertFunction,\n  pre: _optionAssertions.assertFunction,\n  post: _optionAssertions.assertFunction,\n  inherits: _optionAssertions.assertFunction,\n  visitor: assertVisitorMap,\n  parserOverride: _optionAssertions.assertFunction,\n  generatorOverride: _optionAssertions.assertFunction\n};\nfunction assertVisitorMap(loc, value) {\n  var obj = (0, _optionAssertions.assertObject)(loc, value);\n  if (obj) {\n    Object.keys(obj).forEach(function (prop) {\n      return assertVisitorHandler(prop, obj[prop]);\n    });\n    if (obj.enter || obj.exit) {\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" cannot contain catch-all \\\"enter\\\" or \\\"exit\\\" handlers. Please target individual nodes.\"));\n    }\n  }\n  return obj;\n}\nfunction assertVisitorHandler(key, value) {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach(function (handler) {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(\".visitor[\\\"\".concat(key, \"\\\"] may only have .enter and/or .exit handlers.\"));\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(\".visitor[\\\"\".concat(key, \"\\\"] must be a function\"));\n  }\n  return value;\n}\nfunction validatePluginObject(obj) {\n  var rootPath = {\n    type: \"root\",\n    source: \"plugin\"\n  };\n  Object.keys(obj).forEach(function (key) {\n    var validator = VALIDATORS[key];\n    if (validator) {\n      var optLoc = {\n        type: \"option\",\n        name: key,\n        parent: rootPath\n      };\n      validator(optLoc, obj[key]);\n    } else {\n      var invalidPluginPropertyError = new Error(\".\".concat(key, \" is not a valid Plugin property\"));\n      invalidPluginPropertyError.code = \"BABEL_UNKNOWN_PLUGIN_PROPERTY\";\n      throw invalidPluginPropertyError;\n    }\n  });\n  return obj;\n}\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
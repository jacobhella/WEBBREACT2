{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.File = undefined;\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _create = require(\"babel-runtime/core-js/object/create\");\nvar _create2 = _interopRequireDefault(_create);\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\nvar _assign2 = _interopRequireDefault(_assign);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\nvar _inherits3 = _interopRequireDefault(_inherits2);\nvar _babelHelpers = require(\"babel-helpers\");\nvar _babelHelpers2 = _interopRequireDefault(_babelHelpers);\nvar _metadata = require(\"./metadata\");\nvar metadataVisitor = _interopRequireWildcard(_metadata);\nvar _convertSourceMap = require(\"convert-source-map\");\nvar _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);\nvar _optionManager = require(\"./options/option-manager\");\nvar _optionManager2 = _interopRequireDefault(_optionManager);\nvar _pluginPass = require(\"../plugin-pass\");\nvar _pluginPass2 = _interopRequireDefault(_pluginPass);\nvar _babelTraverse = require(\"babel-traverse\");\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\nvar _babelGenerator = require(\"babel-generator\");\nvar _babelGenerator2 = _interopRequireDefault(_babelGenerator);\nvar _babelCodeFrame = require(\"babel-code-frame\");\nvar _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);\nvar _defaults = require(\"lodash/defaults\");\nvar _defaults2 = _interopRequireDefault(_defaults);\nvar _logger = require(\"./logger\");\nvar _logger2 = _interopRequireDefault(_logger);\nvar _store = require(\"../../store\");\nvar _store2 = _interopRequireDefault(_store);\nvar _babylon = require(\"babylon\");\nvar _util = require(\"../../util\");\nvar util = _interopRequireWildcard(_util);\nvar _path = require(\"path\");\nvar _path2 = _interopRequireDefault(_path);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nvar _mergeMap = require(\"./merge-map\");\nvar _mergeMap2 = _interopRequireDefault(_mergeMap);\nvar _resolve = require(\"../../helpers/resolve\");\nvar _resolve2 = _interopRequireDefault(_resolve);\nvar _blockHoist = require(\"../internal-plugins/block-hoist\");\nvar _blockHoist2 = _interopRequireDefault(_blockHoist);\nvar _shadowFunctions = require(\"../internal-plugins/shadow-functions\");\nvar _shadowFunctions2 = _interopRequireDefault(_shadowFunctions);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar shebangRegex = /^#!.*/;\nvar INTERNAL_PLUGINS = [[_blockHoist2.default], [_shadowFunctions2.default]];\nvar errorVisitor = {\n  enter: function enter(path, state) {\n    var loc = path.node.loc;\n    if (loc) {\n      state.loc = loc;\n      path.stop();\n    }\n  }\n};\nvar File = function (_Store) {\n  (0, _inherits3.default)(File, _Store);\n  function File() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var pipeline = arguments[1];\n    (0, _classCallCheck3.default)(this, File);\n    var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));\n    _this.pipeline = pipeline;\n    _this.log = new _logger2.default(_this, opts.filename || \"unknown\");\n    _this.opts = _this.initOptions(opts);\n    _this.parserOpts = {\n      sourceType: _this.opts.sourceType,\n      sourceFileName: _this.opts.filename,\n      plugins: []\n    };\n    _this.pluginVisitors = [];\n    _this.pluginPasses = [];\n    _this.buildPluginsForOptions(_this.opts);\n    if (_this.opts.passPerPreset) {\n      _this.perPresetOpts = [];\n      _this.opts.presets.forEach(function (presetOpts) {\n        var perPresetOpts = (0, _assign2.default)((0, _create2.default)(_this.opts), presetOpts);\n        _this.perPresetOpts.push(perPresetOpts);\n        _this.buildPluginsForOptions(perPresetOpts);\n      });\n    }\n    _this.metadata = {\n      usedHelpers: [],\n      marked: [],\n      modules: {\n        imports: [],\n        exports: {\n          exported: [],\n          specifiers: []\n        }\n      }\n    };\n    _this.dynamicImportTypes = {};\n    _this.dynamicImportIds = {};\n    _this.dynamicImports = [];\n    _this.declarations = {};\n    _this.usedHelpers = {};\n    _this.path = null;\n    _this.ast = {};\n    _this.code = \"\";\n    _this.shebang = \"\";\n    _this.hub = new _babelTraverse.Hub(_this);\n    return _this;\n  }\n  File.prototype.getMetadata = function getMetadata() {\n    var has = false;\n    for (var _iterator = this.ast.program.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var node = _ref;\n      if (t.isModuleDeclaration(node)) {\n        has = true;\n        break;\n      }\n    }\n    if (has) {\n      this.path.traverse(metadataVisitor, this);\n    }\n  };\n  File.prototype.initOptions = function initOptions(opts) {\n    opts = new _optionManager2.default(this.log, this.pipeline).init(opts);\n    if (opts.inputSourceMap) {\n      opts.sourceMaps = true;\n    }\n    if (opts.moduleId) {\n      opts.moduleIds = true;\n    }\n    opts.basename = _path2.default.basename(opts.filename, _path2.default.extname(opts.filename));\n    opts.ignore = util.arrayify(opts.ignore, util.regexify);\n    if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);\n    (0, _defaults2.default)(opts, {\n      moduleRoot: opts.sourceRoot\n    });\n    (0, _defaults2.default)(opts, {\n      sourceRoot: opts.moduleRoot\n    });\n    (0, _defaults2.default)(opts, {\n      filenameRelative: opts.filename\n    });\n    var basenameRelative = _path2.default.basename(opts.filenameRelative);\n    (0, _defaults2.default)(opts, {\n      sourceFileName: basenameRelative,\n      sourceMapTarget: basenameRelative\n    });\n    return opts;\n  };\n  File.prototype.buildPluginsForOptions = function buildPluginsForOptions(opts) {\n    if (!Array.isArray(opts.plugins)) {\n      return;\n    }\n    var plugins = opts.plugins.concat(INTERNAL_PLUGINS);\n    var currentPluginVisitors = [];\n    var currentPluginPasses = [];\n    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var ref = _ref2;\n      var plugin = ref[0],\n        pluginOpts = ref[1];\n      currentPluginVisitors.push(plugin.visitor);\n      currentPluginPasses.push(new _pluginPass2.default(this, plugin, pluginOpts));\n      if (plugin.manipulateOptions) {\n        plugin.manipulateOptions(opts, this.parserOpts, this);\n      }\n    }\n    this.pluginVisitors.push(currentPluginVisitors);\n    this.pluginPasses.push(currentPluginPasses);\n  };\n  File.prototype.getModuleName = function getModuleName() {\n    var opts = this.opts;\n    if (!opts.moduleIds) {\n      return null;\n    }\n    if (opts.moduleId != null && !opts.getModuleId) {\n      return opts.moduleId;\n    }\n    var filenameRelative = opts.filenameRelative;\n    var moduleName = \"\";\n    if (opts.moduleRoot != null) {\n      moduleName = opts.moduleRoot + \"/\";\n    }\n    if (!opts.filenameRelative) {\n      return moduleName + opts.filename.replace(/^\\//, \"\");\n    }\n    if (opts.sourceRoot != null) {\n      var sourceRootRegEx = new RegExp(\"^\" + opts.sourceRoot + \"\\/?\");\n      filenameRelative = filenameRelative.replace(sourceRootRegEx, \"\");\n    }\n    filenameRelative = filenameRelative.replace(/\\.(\\w*?)$/, \"\");\n    moduleName += filenameRelative;\n    moduleName = moduleName.replace(/\\\\/g, \"/\");\n    if (opts.getModuleId) {\n      return opts.getModuleId(moduleName) || moduleName;\n    } else {\n      return moduleName;\n    }\n  };\n  File.prototype.resolveModuleSource = function resolveModuleSource(source) {\n    var resolveModuleSource = this.opts.resolveModuleSource;\n    if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);\n    return source;\n  };\n  File.prototype.addImport = function addImport(source, imported) {\n    var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : imported;\n    var alias = source + \":\" + imported;\n    var id = this.dynamicImportIds[alias];\n    if (!id) {\n      source = this.resolveModuleSource(source);\n      id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);\n      var specifiers = [];\n      if (imported === \"*\") {\n        specifiers.push(t.importNamespaceSpecifier(id));\n      } else if (imported === \"default\") {\n        specifiers.push(t.importDefaultSpecifier(id));\n      } else {\n        specifiers.push(t.importSpecifier(id, t.identifier(imported)));\n      }\n      var declar = t.importDeclaration(specifiers, t.stringLiteral(source));\n      declar._blockHoist = 3;\n      this.path.unshiftContainer(\"body\", declar);\n    }\n    return id;\n  };\n  File.prototype.addHelper = function addHelper(name) {\n    var declar = this.declarations[name];\n    if (declar) return declar;\n    if (!this.usedHelpers[name]) {\n      this.metadata.usedHelpers.push(name);\n      this.usedHelpers[name] = true;\n    }\n    var generator = this.get(\"helperGenerator\");\n    var runtime = this.get(\"helpersNamespace\");\n    if (generator) {\n      var res = generator(name);\n      if (res) return res;\n    } else if (runtime) {\n      return t.memberExpression(runtime, t.identifier(name));\n    }\n    var ref = (0, _babelHelpers2.default)(name);\n    var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);\n    if (t.isFunctionExpression(ref) && !ref.id) {\n      ref.body._compact = true;\n      ref._generated = true;\n      ref.id = uid;\n      ref.type = \"FunctionDeclaration\";\n      this.path.unshiftContainer(\"body\", ref);\n    } else {\n      ref._compact = true;\n      this.scope.push({\n        id: uid,\n        init: ref,\n        unique: true\n      });\n    }\n    return uid;\n  };\n  File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {\n    var stringIds = raw.elements.map(function (string) {\n      return string.value;\n    });\n    var name = helperName + \"_\" + raw.elements.length + \"_\" + stringIds.join(\",\");\n    var declar = this.declarations[name];\n    if (declar) return declar;\n    var uid = this.declarations[name] = this.scope.generateUidIdentifier(\"templateObject\");\n    var helperId = this.addHelper(helperName);\n    var init = t.callExpression(helperId, [strings, raw]);\n    init._compact = true;\n    this.scope.push({\n      id: uid,\n      init: init,\n      _blockHoist: 1.9\n    });\n    return uid;\n  };\n  File.prototype.buildCodeFrameError = function buildCodeFrameError(node, msg) {\n    var Error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : SyntaxError;\n    var loc = node && (node.loc || node._loc);\n    var err = new Error(msg);\n    if (loc) {\n      err.loc = loc.start;\n    } else {\n      (0, _babelTraverse2.default)(node, errorVisitor, this.scope, err);\n      err.message += \" (This is an error on an internal node. Probably an internal error\";\n      if (err.loc) {\n        err.message += \". Location has been estimated.\";\n      }\n      err.message += \")\";\n    }\n    return err;\n  };\n  File.prototype.mergeSourceMap = function mergeSourceMap(map) {\n    var inputMap = this.opts.inputSourceMap;\n    if (inputMap && map) {\n      return (0, _mergeMap2.default)(inputMap, map);\n    } else {\n      return map;\n    }\n  };\n  File.prototype.parse = function parse(code) {\n    var parseCode = _babylon.parse;\n    var parserOpts = this.opts.parserOpts;\n    if (parserOpts) {\n      parserOpts = (0, _assign2.default)({}, this.parserOpts, parserOpts);\n      if (parserOpts.parser) {\n        if (typeof parserOpts.parser === \"string\") {\n          var dirname = _path2.default.dirname(this.opts.filename) || process.cwd();\n          var parser = (0, _resolve2.default)(parserOpts.parser, dirname);\n          if (parser) {\n            parseCode = require(parser).parse;\n          } else {\n            throw new Error(\"Couldn't find parser \" + parserOpts.parser + \" with \\\"parse\\\" method \" + (\"relative to directory \" + dirname));\n          }\n        } else {\n          parseCode = parserOpts.parser;\n        }\n        parserOpts.parser = {\n          parse: function parse(source) {\n            return (0, _babylon.parse)(source, parserOpts);\n          }\n        };\n      }\n    }\n    this.log.debug(\"Parse start\");\n    var ast = parseCode(code, parserOpts || this.parserOpts);\n    this.log.debug(\"Parse stop\");\n    return ast;\n  };\n  File.prototype._addAst = function _addAst(ast) {\n    this.path = _babelTraverse.NodePath.get({\n      hub: this.hub,\n      parentPath: null,\n      parent: ast,\n      container: ast,\n      key: \"program\"\n    }).setContext();\n    this.scope = this.path.scope;\n    this.ast = ast;\n    this.getMetadata();\n  };\n  File.prototype.addAst = function addAst(ast) {\n    this.log.debug(\"Start set AST\");\n    this._addAst(ast);\n    this.log.debug(\"End set AST\");\n  };\n  File.prototype.transform = function transform() {\n    for (var i = 0; i < this.pluginPasses.length; i++) {\n      var pluginPasses = this.pluginPasses[i];\n      this.call(\"pre\", pluginPasses);\n      this.log.debug(\"Start transform traverse\");\n      var visitor = _babelTraverse2.default.visitors.merge(this.pluginVisitors[i], pluginPasses, this.opts.wrapPluginVisitorMethod);\n      (0, _babelTraverse2.default)(this.ast, visitor, this.scope);\n      this.log.debug(\"End transform traverse\");\n      this.call(\"post\", pluginPasses);\n    }\n    return this.generate();\n  };\n  File.prototype.wrap = function wrap(code, callback) {\n    code = code + \"\";\n    try {\n      if (this.shouldIgnore()) {\n        return this.makeResult({\n          code: code,\n          ignored: true\n        });\n      } else {\n        return callback();\n      }\n    } catch (err) {\n      if (err._babel) {\n        throw err;\n      } else {\n        err._babel = true;\n      }\n      var message = err.message = this.opts.filename + \": \" + err.message;\n      var loc = err.loc;\n      if (loc) {\n        err.codeFrame = (0, _babelCodeFrame2.default)(code, loc.line, loc.column + 1, this.opts);\n        message += \"\\n\" + err.codeFrame;\n      }\n      if (process.browser) {\n        err.message = message;\n      }\n      if (err.stack) {\n        var newStack = err.stack.replace(err.message, message);\n        err.stack = newStack;\n      }\n      throw err;\n    }\n  };\n  File.prototype.addCode = function addCode(code) {\n    code = (code || \"\") + \"\";\n    code = this.parseInputSourceMap(code);\n    this.code = code;\n  };\n  File.prototype.parseCode = function parseCode() {\n    this.parseShebang();\n    var ast = this.parse(this.code);\n    this.addAst(ast);\n  };\n  File.prototype.shouldIgnore = function shouldIgnore() {\n    var opts = this.opts;\n    return util.shouldIgnore(opts.filename, opts.ignore, opts.only);\n  };\n  File.prototype.call = function call(key, pluginPasses) {\n    for (var _iterator3 = pluginPasses, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n      var _ref3;\n      if (_isArray3) {\n        if (_i3 >= _iterator3.length) break;\n        _ref3 = _iterator3[_i3++];\n      } else {\n        _i3 = _iterator3.next();\n        if (_i3.done) break;\n        _ref3 = _i3.value;\n      }\n      var pass = _ref3;\n      var plugin = pass.plugin;\n      var fn = plugin[key];\n      if (fn) fn.call(pass, this);\n    }\n  };\n  File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {\n    var opts = this.opts;\n    if (opts.inputSourceMap !== false) {\n      var inputMap = _convertSourceMap2.default.fromSource(code);\n      if (inputMap) {\n        opts.inputSourceMap = inputMap.toObject();\n        code = _convertSourceMap2.default.removeComments(code);\n      }\n    }\n    return code;\n  };\n  File.prototype.parseShebang = function parseShebang() {\n    var shebangMatch = shebangRegex.exec(this.code);\n    if (shebangMatch) {\n      this.shebang = shebangMatch[0];\n      this.code = this.code.replace(shebangRegex, \"\");\n    }\n  };\n  File.prototype.makeResult = function makeResult(_ref4) {\n    var code = _ref4.code,\n      map = _ref4.map,\n      ast = _ref4.ast,\n      ignored = _ref4.ignored;\n    var result = {\n      metadata: null,\n      options: this.opts,\n      ignored: !!ignored,\n      code: null,\n      ast: null,\n      map: map || null\n    };\n    if (this.opts.code) {\n      result.code = code;\n    }\n    if (this.opts.ast) {\n      result.ast = ast;\n    }\n    if (this.opts.metadata) {\n      result.metadata = this.metadata;\n    }\n    return result;\n  };\n  File.prototype.generate = function generate() {\n    var opts = this.opts;\n    var ast = this.ast;\n    var result = {\n      ast: ast\n    };\n    if (!opts.code) return this.makeResult(result);\n    var gen = _babelGenerator2.default;\n    if (opts.generatorOpts.generator) {\n      gen = opts.generatorOpts.generator;\n      if (typeof gen === \"string\") {\n        var dirname = _path2.default.dirname(this.opts.filename) || process.cwd();\n        var generator = (0, _resolve2.default)(gen, dirname);\n        if (generator) {\n          gen = require(generator).print;\n        } else {\n          throw new Error(\"Couldn't find generator \" + gen + \" with \\\"print\\\" method relative \" + (\"to directory \" + dirname));\n        }\n      }\n    }\n    this.log.debug(\"Generation start\");\n    var _result = gen(ast, opts.generatorOpts ? (0, _assign2.default)(opts, opts.generatorOpts) : opts, this.code);\n    result.code = _result.code;\n    result.map = _result.map;\n    this.log.debug(\"Generation end\");\n    if (this.shebang) {\n      result.code = this.shebang + \"\\n\" + result.code;\n    }\n    if (result.map) {\n      result.map = this.mergeSourceMap(result.map);\n    }\n    if (opts.sourceMaps === \"inline\" || opts.sourceMaps === \"both\") {\n      result.code += \"\\n\" + _convertSourceMap2.default.fromObject(result.map).toComment();\n    }\n    if (opts.sourceMaps === \"inline\") {\n      result.map = null;\n    }\n    return this.makeResult(result);\n  };\n  return File;\n}(_store2.default);\nexports.default = File;\nexports.File = File;","map":null,"metadata":{},"sourceType":"script"}
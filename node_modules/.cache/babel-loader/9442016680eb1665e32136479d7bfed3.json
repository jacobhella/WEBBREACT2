{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = SpyRegistry;\nvar _call_tracker = require('./call_tracker');\nvar _call_tracker2 = _interopRequireDefault(_call_tracker);\nvar _create_spy = require('./create_spy');\nvar _create_spy2 = _interopRequireDefault(_create_spy);\nvar _spy_strategy = require('./spy_strategy');\nvar _spy_strategy2 = _interopRequireDefault(_spy_strategy);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar formatErrorMsg = function formatErrorMsg(domain, usage) {\n  var usageDefinition = usage ? '\\nUsage: ' + usage : '';\n  return function (msg) {\n    return domain + ' : ' + msg + usageDefinition;\n  };\n};\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// This file is a heavily modified fork of Jasmine. Original license:\n/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nfunction isSpy(putativeSpy) {\n  if (!putativeSpy) {\n    return false;\n  }\n  return putativeSpy.and instanceof _spy_strategy2.default && putativeSpy.calls instanceof _call_tracker2.default;\n}\nvar getErrorMsg = formatErrorMsg('<spyOn>', 'spyOn(<object>, <methodName>)');\nfunction SpyRegistry(options) {\n  options = options || {};\n  var currentSpies = options.currentSpies || function () {\n    return [];\n  };\n  this.allowRespy = function (allow) {\n    this.respy = allow;\n  };\n  this.spyOn = function (obj, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(obj, methodName, accessType);\n    }\n    if (obj === void 0) {\n      throw new Error(getErrorMsg('could not find an object to spy upon for ' + methodName + '()'));\n    }\n    if (methodName === void 0) {\n      throw new Error(getErrorMsg('No method name supplied'));\n    }\n    if (obj[methodName] === void 0) {\n      throw new Error(getErrorMsg(methodName + '() method does not exist'));\n    }\n    if (obj[methodName] && isSpy(obj[methodName])) {\n      if (this.respy) {\n        return obj[methodName];\n      } else {\n        throw new Error(getErrorMsg(methodName + ' has already been spied upon'));\n      }\n    }\n    var descriptor;\n    try {\n      descriptor = Object.getOwnPropertyDescriptor(obj, methodName);\n    } catch (e) {\n      // IE 8 doesn't support `definePropery` on non-DOM nodes\n    }\n    if (descriptor && !(descriptor.writable || descriptor.set)) {\n      throw new Error(getErrorMsg(methodName + ' is not declared writable or has no setter'));\n    }\n    var originalMethod = obj[methodName];\n    var spiedMethod = (0, _create_spy2.default)(methodName, originalMethod);\n    var restoreStrategy;\n    if (Object.prototype.hasOwnProperty.call(obj, methodName)) {\n      restoreStrategy = function restoreStrategy() {\n        obj[methodName] = originalMethod;\n      };\n    } else {\n      restoreStrategy = function restoreStrategy() {\n        if (!delete obj[methodName]) {\n          obj[methodName] = originalMethod;\n        }\n      };\n    }\n    currentSpies().push({\n      restoreObjectToOriginalState: restoreStrategy\n    });\n    obj[methodName] = spiedMethod;\n    return spiedMethod;\n  };\n  this._spyOnProperty = function (obj, propertyName) {\n    var accessType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'get';\n    if (!obj) {\n      throw new Error(getErrorMsg('could not find an object to spy upon for ' + propertyName));\n    }\n    if (!propertyName) {\n      throw new Error(getErrorMsg('No property name supplied'));\n    }\n    var descriptor;\n    try {\n      descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    } catch (e) {\n      // IE 8 doesn't support `definePropery` on non-DOM nodes\n    }\n    if (!descriptor) {\n      throw new Error(getErrorMsg(propertyName + ' property does not exist'));\n    }\n    if (!descriptor.configurable) {\n      throw new Error(getErrorMsg(propertyName + ' is not declared configurable'));\n    }\n    if (!descriptor[accessType]) {\n      throw new Error(getErrorMsg('Property ' + propertyName + ' does not have access type ' + accessType));\n    }\n    if (obj[propertyName] && isSpy(obj[propertyName])) {\n      if (this.respy) {\n        return obj[propertyName];\n      } else {\n        throw new Error(getErrorMsg(propertyName + ' has already been spied upon'));\n      }\n    }\n    var originalDescriptor = descriptor;\n    var spiedProperty = (0, _create_spy2.default)(propertyName, descriptor[accessType]);\n    var restoreStrategy;\n    if (Object.prototype.hasOwnProperty.call(obj, propertyName)) {\n      restoreStrategy = function restoreStrategy() {\n        Object.defineProperty(obj, propertyName, originalDescriptor);\n      };\n    } else {\n      restoreStrategy = function restoreStrategy() {\n        delete obj[propertyName];\n      };\n    }\n    currentSpies().push({\n      restoreObjectToOriginalState: restoreStrategy\n    });\n    var spiedDescriptor = Object.assign({}, descriptor, _defineProperty({}, accessType, spiedProperty));\n    Object.defineProperty(obj, propertyName, spiedDescriptor);\n    return spiedProperty;\n  };\n  this.clearSpies = function () {\n    var spies = currentSpies();\n    for (var i = spies.length - 1; i >= 0; i--) {\n      var spyEntry = spies[i];\n      spyEntry.restoreObjectToOriginalState();\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _objectWithoutProperties2 = require(\"babel-runtime/helpers/objectWithoutProperties\");\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\nvar _stringify2 = _interopRequireDefault(_stringify);\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\nvar _assign2 = _interopRequireDefault(_assign);\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\nvar _typeof3 = _interopRequireDefault(_typeof2);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _node = require(\"../../../api/node\");\nvar context = _interopRequireWildcard(_node);\nvar _plugin2 = require(\"../../plugin\");\nvar _plugin3 = _interopRequireDefault(_plugin2);\nvar _babelMessages = require(\"babel-messages\");\nvar messages = _interopRequireWildcard(_babelMessages);\nvar _index = require(\"./index\");\nvar _resolvePlugin = require(\"../../../helpers/resolve-plugin\");\nvar _resolvePlugin2 = _interopRequireDefault(_resolvePlugin);\nvar _resolvePreset = require(\"../../../helpers/resolve-preset\");\nvar _resolvePreset2 = _interopRequireDefault(_resolvePreset);\nvar _cloneDeepWith = require(\"lodash/cloneDeepWith\");\nvar _cloneDeepWith2 = _interopRequireDefault(_cloneDeepWith);\nvar _clone = require(\"lodash/clone\");\nvar _clone2 = _interopRequireDefault(_clone);\nvar _merge = require(\"../../../helpers/merge\");\nvar _merge2 = _interopRequireDefault(_merge);\nvar _config2 = require(\"./config\");\nvar _config3 = _interopRequireDefault(_config2);\nvar _removed = require(\"./removed\");\nvar _removed2 = _interopRequireDefault(_removed);\nvar _buildConfigChain = require(\"./build-config-chain\");\nvar _buildConfigChain2 = _interopRequireDefault(_buildConfigChain);\nvar _path = require(\"path\");\nvar _path2 = _interopRequireDefault(_path);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar OptionManager = function () {\n  function OptionManager(log) {\n    (0, _classCallCheck3.default)(this, OptionManager);\n    this.resolvedConfigs = [];\n    this.options = OptionManager.createBareOptions();\n    this.log = log;\n  }\n  OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {\n    for (var _iterator = OptionManager.memoisedPlugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var cache = _ref;\n      if (cache.container === fn) return cache.plugin;\n    }\n    var obj = void 0;\n    if (typeof fn === \"function\") {\n      obj = fn(context);\n    } else {\n      obj = fn;\n    }\n    if ((typeof obj === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(obj)) === \"object\") {\n      var _plugin = new _plugin3.default(obj, alias);\n      OptionManager.memoisedPlugins.push({\n        container: fn,\n        plugin: _plugin\n      });\n      return _plugin;\n    } else {\n      throw new TypeError(messages.get(\"pluginNotObject\", loc, i, typeof obj === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(obj)) + loc + i);\n    }\n  };\n  OptionManager.createBareOptions = function createBareOptions() {\n    var opts = {};\n    for (var _key in _config3.default) {\n      var opt = _config3.default[_key];\n      opts[_key] = (0, _clone2.default)(opt.default);\n    }\n    return opts;\n  };\n  OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {\n    plugin = plugin.__esModule ? plugin.default : plugin;\n    if (!(plugin instanceof _plugin3.default)) {\n      if (typeof plugin === \"function\" || (typeof plugin === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(plugin)) === \"object\") {\n        plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);\n      } else {\n        throw new TypeError(messages.get(\"pluginNotFunction\", loc, i, typeof plugin === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(plugin)));\n      }\n    }\n    plugin.init(loc, i);\n    return plugin;\n  };\n  OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {\n    return plugins.map(function (val, i) {\n      var plugin = void 0,\n        options = void 0;\n      if (!val) {\n        throw new TypeError(\"Falsy value found in plugins\");\n      }\n      if (Array.isArray(val)) {\n        plugin = val[0];\n        options = val[1];\n      } else {\n        plugin = val;\n      }\n      var alias = typeof plugin === \"string\" ? plugin : loc + \"$\" + i;\n      if (typeof plugin === \"string\") {\n        var pluginLoc = (0, _resolvePlugin2.default)(plugin, dirname);\n        if (pluginLoc) {\n          plugin = require(pluginLoc);\n        } else {\n          throw new ReferenceError(messages.get(\"pluginUnknown\", plugin, loc, i, dirname));\n        }\n      }\n      plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);\n      return [plugin, options];\n    });\n  };\n  OptionManager.prototype.mergeOptions = function mergeOptions(_ref2) {\n    var _this = this;\n    var rawOpts = _ref2.options,\n      extendingOpts = _ref2.extending,\n      alias = _ref2.alias,\n      loc = _ref2.loc,\n      dirname = _ref2.dirname;\n    alias = alias || \"foreign\";\n    if (!rawOpts) return;\n    if ((typeof rawOpts === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(rawOpts)) !== \"object\" || Array.isArray(rawOpts)) {\n      this.log.error(\"Invalid options type for \" + alias, TypeError);\n    }\n    var opts = (0, _cloneDeepWith2.default)(rawOpts, function (val) {\n      if (val instanceof _plugin3.default) {\n        return val;\n      }\n    });\n    dirname = dirname || process.cwd();\n    loc = loc || alias;\n    for (var _key2 in opts) {\n      var option = _config3.default[_key2];\n      if (!option && this.log) {\n        if (_removed2.default[_key2]) {\n          this.log.error(\"Using removed Babel 5 option: \" + alias + \".\" + _key2 + \" - \" + _removed2.default[_key2].message, ReferenceError);\n        } else {\n          var unknownOptErr = \"Unknown option: \" + alias + \".\" + _key2 + \". Check out http://babeljs.io/docs/usage/options/ for more information about options.\";\n          var presetConfigErr = \"A common cause of this error is the presence of a configuration options object without the corresponding preset name. Example:\\n\\nInvalid:\\n  `{ presets: [{option: value}] }`\\nValid:\\n  `{ presets: [['presetName', {option: value}]] }`\\n\\nFor more detailed information on preset configuration, please see https://babeljs.io/docs/en/plugins#pluginpresets-options.\";\n          this.log.error(unknownOptErr + \"\\n\\n\" + presetConfigErr, ReferenceError);\n        }\n      }\n    }\n    (0, _index.normaliseOptions)(opts);\n    if (opts.plugins) {\n      opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);\n    }\n    if (opts.presets) {\n      if (opts.passPerPreset) {\n        opts.presets = this.resolvePresets(opts.presets, dirname, function (preset, presetLoc) {\n          _this.mergeOptions({\n            options: preset,\n            extending: preset,\n            alias: presetLoc,\n            loc: presetLoc,\n            dirname: dirname\n          });\n        });\n      } else {\n        this.mergePresets(opts.presets, dirname);\n        delete opts.presets;\n      }\n    }\n    if (rawOpts === extendingOpts) {\n      (0, _assign2.default)(extendingOpts, opts);\n    } else {\n      (0, _merge2.default)(extendingOpts || this.options, opts);\n    }\n  };\n  OptionManager.prototype.mergePresets = function mergePresets(presets, dirname) {\n    var _this2 = this;\n    this.resolvePresets(presets, dirname, function (presetOpts, presetLoc) {\n      _this2.mergeOptions({\n        options: presetOpts,\n        alias: presetLoc,\n        loc: presetLoc,\n        dirname: _path2.default.dirname(presetLoc || \"\")\n      });\n    });\n  };\n  OptionManager.prototype.resolvePresets = function resolvePresets(presets, dirname, onResolve) {\n    return presets.map(function (val) {\n      var options = void 0;\n      if (Array.isArray(val)) {\n        if (val.length > 2) {\n          throw new Error(\"Unexpected extra options \" + (0, _stringify2.default)(val.slice(2)) + \" passed to preset.\");\n        }\n        var _val = val;\n        val = _val[0];\n        options = _val[1];\n      }\n      var presetLoc = void 0;\n      try {\n        if (typeof val === \"string\") {\n          presetLoc = (0, _resolvePreset2.default)(val, dirname);\n          if (!presetLoc) {\n            throw new Error(\"Couldn't find preset \" + (0, _stringify2.default)(val) + \" relative to directory \" + (0, _stringify2.default)(dirname));\n          }\n          val = require(presetLoc);\n        }\n        if ((typeof val === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(val)) === \"object\" && val.__esModule) {\n          if (val.default) {\n            val = val.default;\n          } else {\n            var _val2 = val,\n              __esModule = _val2.__esModule,\n              rest = (0, _objectWithoutProperties3.default)(_val2, [\"__esModule\"]);\n            val = rest;\n          }\n        }\n        if ((typeof val === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(val)) === \"object\" && val.buildPreset) val = val.buildPreset;\n        if (typeof val !== \"function\" && options !== undefined) {\n          throw new Error(\"Options \" + (0, _stringify2.default)(options) + \" passed to \" + (presetLoc || \"a preset\") + \" which does not accept options.\");\n        }\n        if (typeof val === \"function\") val = val(context, options, {\n          dirname: dirname\n        });\n        if ((typeof val === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(val)) !== \"object\") {\n          throw new Error(\"Unsupported preset format: \" + val + \".\");\n        }\n        onResolve && onResolve(val, presetLoc);\n      } catch (e) {\n        if (presetLoc) {\n          e.message += \" (While processing preset: \" + (0, _stringify2.default)(presetLoc) + \")\";\n        }\n        throw e;\n      }\n      return val;\n    });\n  };\n  OptionManager.prototype.normaliseOptions = function normaliseOptions() {\n    var opts = this.options;\n    for (var _key3 in _config3.default) {\n      var option = _config3.default[_key3];\n      var val = opts[_key3];\n      if (!val && option.optional) continue;\n      if (option.alias) {\n        opts[option.alias] = opts[option.alias] || val;\n      } else {\n        opts[_key3] = val;\n      }\n    }\n  };\n  OptionManager.prototype.init = function init() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    for (var _iterator2 = (0, _buildConfigChain2.default)(opts, this.log), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref3;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref3 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref3 = _i2.value;\n      }\n      var _config = _ref3;\n      this.mergeOptions(_config);\n    }\n    this.normaliseOptions(opts);\n    return this.options;\n  };\n  return OptionManager;\n}();\nexports.default = OptionManager;\nOptionManager.memoisedPlugins = [];\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
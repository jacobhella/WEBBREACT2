{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _micromatch;\nfunction _load_micromatch() {\n  return _micromatch = _interopRequireDefault(require('micromatch'));\n}\nvar _jestResolveDependencies;\nfunction _load_jestResolveDependencies() {\n  return _jestResolveDependencies = _interopRequireDefault(require('jest-resolve-dependencies'));\n}\nvar _testPathPatternToRegexp;\nfunction _load_testPathPatternToRegexp() {\n  return _testPathPatternToRegexp = _interopRequireDefault(require('./testPathPatternToRegexp'));\n}\nvar _jestRegexUtil;\nfunction _load_jestRegexUtil() {\n  return _jestRegexUtil = require('jest-regex-util');\n}\nvar _jestConfig;\nfunction _load_jestConfig() {\n  return _jestConfig = require('jest-config');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar globsToMatcher = function globsToMatcher(globs) {\n  if (globs == null || globs.length === 0) {\n    return function () {\n      return true;\n    };\n  }\n  return function (path) {\n    return (0, (_micromatch || _load_micromatch()).default)([path], globs, {\n      dot: true\n    }).length > 0;\n  };\n};\nvar regexToMatcher = function regexToMatcher(testRegex) {\n  if (!testRegex) {\n    return function () {\n      return true;\n    };\n  }\n  var regex = new RegExp(testRegex);\n  return function (path) {\n    return regex.test(path);\n  };\n};\nvar toTests = function toTests(context, tests) {\n  return tests.map(function (path) {\n    return {\n      context: context,\n      duration: undefined,\n      path: path\n    };\n  });\n};\nvar SearchSource = /*#__PURE__*/function () {\n  function SearchSource(context) {\n    var _this3 = this;\n    _classCallCheck(this, SearchSource);\n    var config = context.config;\n    this._context = context;\n    this._rootPattern = new RegExp(config.roots.map(function (dir) {\n      return (0, (_jestRegexUtil || _load_jestRegexUtil()).escapePathForRegex)(dir + (_path || _load_path()).default.sep);\n    }).join('|'));\n    var ignorePattern = config.testPathIgnorePatterns;\n    this._testIgnorePattern = ignorePattern.length ? new RegExp(ignorePattern.join('|')) : null;\n    this._testPathCases = {\n      roots: function roots(path) {\n        return _this3._rootPattern.test(path);\n      },\n      testMatch: globsToMatcher(config.testMatch),\n      testPathIgnorePatterns: function testPathIgnorePatterns(path) {\n        return !_this3._testIgnorePattern || !_this3._testIgnorePattern.test(path);\n      },\n      testRegex: regexToMatcher(config.testRegex)\n    };\n  }\n  _createClass(SearchSource, [{\n    key: \"_filterTestPathsWithStats\",\n    value: function _filterTestPathsWithStats(allPaths, testPathPattern) {\n      var data = {\n        stats: {},\n        tests: [],\n        total: allPaths.length\n      };\n      var testCases = Object.assign({}, this._testPathCases);\n      if (testPathPattern) {\n        var regex = (0, (_testPathPatternToRegexp || _load_testPathPatternToRegexp()).default)(testPathPattern);\n        testCases.testPathPattern = function (path) {\n          return regex.test(path);\n        };\n      }\n      var testCasesKeys = Object.keys(testCases);\n      data.tests = allPaths.filter(function (test) {\n        return testCasesKeys.reduce(function (flag, key) {\n          if (testCases[key](test.path)) {\n            data.stats[key] = ++data.stats[key] || 1;\n            return flag && true;\n          }\n          data.stats[key] = data.stats[key] || 0;\n          return false;\n        }, true);\n      });\n      return data;\n    }\n  }, {\n    key: \"_getAllTestPaths\",\n    value: function _getAllTestPaths(testPathPattern) {\n      return this._filterTestPathsWithStats(toTests(this._context, this._context.hasteFS.getAllFiles()), testPathPattern);\n    }\n  }, {\n    key: \"isTestFilePath\",\n    value: function isTestFilePath(path) {\n      var _this4 = this;\n      return Object.keys(this._testPathCases).every(function (key) {\n        return _this4._testPathCases[key](path);\n      });\n    }\n  }, {\n    key: \"findMatchingTests\",\n    value: function findMatchingTests(testPathPattern) {\n      return this._getAllTestPaths(testPathPattern);\n    }\n  }, {\n    key: \"findRelatedTests\",\n    value: function findRelatedTests(allPaths, collectCoverage) {\n      var _this5 = this;\n      var dependencyResolver = new (_jestResolveDependencies || _load_jestResolveDependencies()).default(this._context.resolver, this._context.hasteFS);\n      var tests = toTests(this._context, dependencyResolver.resolveInverse(allPaths, this.isTestFilePath.bind(this), {\n        skipNodeResolution: this._context.config.skipNodeResolution\n      }));\n      var collectCoverageFrom;\n\n      // If we are collecting coverage, also return collectCoverageFrom patterns\n      if (collectCoverage) {\n        collectCoverageFrom = Array.from(allPaths).map(function (filename) {\n          filename = (0, (_jestConfig || _load_jestConfig()).replaceRootDirInPath)(_this5._context.config.rootDir, filename);\n          return (_path || _load_path()).default.isAbsolute(filename) ? (_path || _load_path()).default.relative(_this5._context.config.rootDir, filename) : filename;\n        });\n      }\n      return {\n        collectCoverageFrom: collectCoverageFrom,\n        tests: tests\n      };\n    }\n  }, {\n    key: \"findTestsByPaths\",\n    value: function findTestsByPaths(paths) {\n      return {\n        tests: toTests(this._context, paths.map(function (p) {\n          return (_path || _load_path()).default.resolve(process.cwd(), p);\n        }).filter(this.isTestFilePath.bind(this)))\n      };\n    }\n  }, {\n    key: \"findRelatedTestsFromPattern\",\n    value: function findRelatedTestsFromPattern(paths, collectCoverage) {\n      if (Array.isArray(paths) && paths.length) {\n        var resolvedPaths = paths.map(function (p) {\n          return (_path || _load_path()).default.resolve(process.cwd(), p);\n        });\n        return this.findRelatedTests(new Set(resolvedPaths), collectCoverage);\n      }\n      return {\n        tests: []\n      };\n    }\n  }, {\n    key: \"findTestRelatedToChangedFiles\",\n    value: function findTestRelatedToChangedFiles(changedFilesPromise, collectCoverage) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _ref, repos, changedFiles, noSCM;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return changedFilesPromise;\n            case 2:\n              _ref = _context.sent;\n              repos = _ref.repos, changedFiles = _ref.changedFiles; // no SCM (git/hg/...) is found in any of the roots.\n              noSCM = Object.keys(repos).every(function (scm) {\n                return repos[scm].size === 0;\n              });\n              return _context.abrupt(\"return\", noSCM ? {\n                noSCM: true,\n                tests: []\n              } : _this.findRelatedTests(changedFiles, collectCoverage));\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"_getTestPaths\",\n    value: function _getTestPaths(globalConfig, changedFilesPromise) {\n      var paths = globalConfig.nonFlagArgs;\n      if (globalConfig.onlyChanged) {\n        if (!changedFilesPromise) {\n          throw new Error('This promise must be present when running with -o.');\n        }\n        return this.findTestRelatedToChangedFiles(changedFilesPromise, globalConfig.collectCoverage);\n      } else if (globalConfig.runTestsByPath && paths && paths.length) {\n        return Promise.resolve(this.findTestsByPaths(paths));\n      } else if (globalConfig.findRelatedTests && paths && paths.length) {\n        return Promise.resolve(this.findRelatedTestsFromPattern(paths, globalConfig.collectCoverage));\n      } else if (globalConfig.testPathPattern != null) {\n        return Promise.resolve(this.findMatchingTests(globalConfig.testPathPattern));\n      } else {\n        return Promise.resolve({\n          tests: []\n        });\n      }\n    }\n  }, {\n    key: \"getTestPaths\",\n    value: function getTestPaths(globalConfig, changedFilesPromise) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var searchResult, filterPath, tests, filter, filterResult, filteredSet;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2._getTestPaths(globalConfig, changedFilesPromise);\n            case 2:\n              searchResult = _context2.sent;\n              filterPath = globalConfig.filter;\n              if (!(filterPath && !globalConfig.skipFilter)) {\n                _context2.next = 14;\n                break;\n              }\n              tests = searchResult.tests; // $FlowFixMe: dynamic require.\n              filter = require(filterPath);\n              _context2.next = 9;\n              return filter(tests.map(function (test) {\n                return test.path;\n              }));\n            case 9:\n              filterResult = _context2.sent;\n              if (Array.isArray(filterResult.filtered)) {\n                _context2.next = 12;\n                break;\n              }\n              throw new Error(\"Filter \".concat(filterPath, \" did not return a valid test list\"));\n            case 12:\n              filteredSet = new Set(filterResult.filtered.map(function (result) {\n                return result.test;\n              })); // $FlowFixMe: Object.assign with empty object causes troubles to Flow.\n              return _context2.abrupt(\"return\", Object.assign({}, searchResult, {\n                tests: tests.filter(function (test) {\n                  return filteredSet.has(test.path);\n                })\n              }));\n            case 14:\n              return _context2.abrupt(\"return\", searchResult);\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  }]);\n  return SearchSource;\n}();\nexports.default = SearchSource;","map":null,"metadata":{},"sourceType":"script"}
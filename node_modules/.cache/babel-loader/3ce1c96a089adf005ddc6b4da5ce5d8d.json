{"ast":null,"code":"/* eslint-disable no-nested-ternary */\n'use strict';\n\nvar arr = [];\nvar charCodeCache = [];\nmodule.exports = function (a, b) {\n  if (a === b) {\n    return 0;\n  }\n  var swap = a;\n\n  // Swapping the strings if `a` is longer than `b` so we know which one is the\n  // shortest & which one is the longest\n  if (a.length > b.length) {\n    a = b;\n    b = swap;\n  }\n  var aLen = a.length;\n  var bLen = b.length;\n  if (aLen === 0) {\n    return bLen;\n  }\n  if (bLen === 0) {\n    return aLen;\n  }\n\n  // Performing suffix trimming:\n  // We can linearly drop suffix common to both strings since they\n  // don't increase distance at all\n  // Note: `~-` is the bitwise way to perform a `- 1` operation\n  while (aLen > 0 && a.charCodeAt(~-aLen) === b.charCodeAt(~-bLen)) {\n    aLen--;\n    bLen--;\n  }\n  if (aLen === 0) {\n    return bLen;\n  }\n\n  // Performing prefix trimming\n  // We can linearly drop prefix common to both strings since they\n  // don't increase distance at all\n  var start = 0;\n  while (start < aLen && a.charCodeAt(start) === b.charCodeAt(start)) {\n    start++;\n  }\n  aLen -= start;\n  bLen -= start;\n  if (aLen === 0) {\n    return bLen;\n  }\n  var bCharCode;\n  var ret;\n  var tmp;\n  var tmp2;\n  var i = 0;\n  var j = 0;\n  while (i < aLen) {\n    charCodeCache[start + i] = a.charCodeAt(start + i);\n    arr[i] = ++i;\n  }\n  while (j < bLen) {\n    bCharCode = b.charCodeAt(start + j);\n    tmp = j++;\n    ret = j;\n    for (i = 0; i < aLen; i++) {\n      tmp2 = bCharCode === charCodeCache[start + i] ? tmp : tmp + 1;\n      tmp = arr[i];\n      ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n    }\n  }\n  return ret;\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\nvar _typeof3 = _interopRequireDefault(_typeof2);\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _map = require(\"babel-runtime/core-js/map\");\nvar _map2 = _interopRequireDefault(_map);\nexports.evaluateTruthy = evaluateTruthy;\nexports.evaluate = evaluate;\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar VALID_CALLEES = [\"String\", \"Number\", \"Math\"];\nvar INVALID_METHODS = [\"random\"];\nfunction evaluateTruthy() {\n  var res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\nfunction evaluate() {\n  var confident = true;\n  var deoptPath = void 0;\n  var seen = new _map2.default();\n  function deopt(path) {\n    if (!confident) return;\n    deoptPath = path;\n    confident = false;\n  }\n  var value = evaluate(this);\n  if (!confident) value = undefined;\n  return {\n    confident: confident,\n    deopt: deoptPath,\n    value: value\n  };\n  function evaluate(path) {\n    var node = path.node;\n    if (seen.has(node)) {\n      var existing = seen.get(node);\n      if (existing.resolved) {\n        return existing.value;\n      } else {\n        deopt(path);\n        return;\n      }\n    } else {\n      var item = {\n        resolved: false\n      };\n      seen.set(node, item);\n      var val = _evaluate(path);\n      if (confident) {\n        item.resolved = true;\n        item.value = val;\n      }\n      return val;\n    }\n  }\n  function _evaluate(path) {\n    if (!confident) return;\n    var node = path.node;\n    if (path.isSequenceExpression()) {\n      var exprs = path.get(\"expressions\");\n      return evaluate(exprs[exprs.length - 1]);\n    }\n    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {\n      return node.value;\n    }\n    if (path.isNullLiteral()) {\n      return null;\n    }\n    if (path.isTemplateLiteral()) {\n      var str = \"\";\n      var i = 0;\n      var _exprs = path.get(\"expressions\");\n      for (var _iterator = node.quasis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n        var _ref;\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n        var elem = _ref;\n        if (!confident) break;\n        str += elem.value.cooked;\n        var expr = _exprs[i++];\n        if (expr) str += String(evaluate(expr));\n      }\n      if (!confident) return;\n      return str;\n    }\n    if (path.isConditionalExpression()) {\n      var testResult = evaluate(path.get(\"test\"));\n      if (!confident) return;\n      if (testResult) {\n        return evaluate(path.get(\"consequent\"));\n      } else {\n        return evaluate(path.get(\"alternate\"));\n      }\n    }\n    if (path.isExpressionWrapper()) {\n      return evaluate(path.get(\"expression\"));\n    }\n    if (path.isMemberExpression() && !path.parentPath.isCallExpression({\n      callee: node\n    })) {\n      var property = path.get(\"property\");\n      var object = path.get(\"object\");\n      if (object.isLiteral() && property.isIdentifier()) {\n        var _value = object.node.value;\n        var type = typeof _value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(_value);\n        if (type === \"number\" || type === \"string\") {\n          return _value[property.node.name];\n        }\n      }\n    }\n    if (path.isReferencedIdentifier()) {\n      var binding = path.scope.getBinding(node.name);\n      if (binding && binding.constantViolations.length > 0) {\n        return deopt(binding.path);\n      }\n      if (binding && path.node.start < binding.path.node.end) {\n        return deopt(binding.path);\n      }\n      if (binding && binding.hasValue) {\n        return binding.value;\n      } else {\n        if (node.name === \"undefined\") {\n          return binding ? deopt(binding.path) : undefined;\n        } else if (node.name === \"Infinity\") {\n          return binding ? deopt(binding.path) : Infinity;\n        } else if (node.name === \"NaN\") {\n          return binding ? deopt(binding.path) : NaN;\n        }\n        var resolved = path.resolve();\n        if (resolved === path) {\n          return deopt(path);\n        } else {\n          return evaluate(resolved);\n        }\n      }\n    }\n    if (path.isUnaryExpression({\n      prefix: true\n    })) {\n      if (node.operator === \"void\") {\n        return undefined;\n      }\n      var argument = path.get(\"argument\");\n      if (node.operator === \"typeof\" && (argument.isFunction() || argument.isClass())) {\n        return \"function\";\n      }\n      var arg = evaluate(argument);\n      if (!confident) return;\n      switch (node.operator) {\n        case \"!\":\n          return !arg;\n        case \"+\":\n          return +arg;\n        case \"-\":\n          return -arg;\n        case \"~\":\n          return ~arg;\n        case \"typeof\":\n          return typeof arg === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(arg);\n      }\n    }\n    if (path.isArrayExpression()) {\n      var arr = [];\n      var elems = path.get(\"elements\");\n      for (var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var _elem = _ref2;\n        _elem = _elem.evaluate();\n        if (_elem.confident) {\n          arr.push(_elem.value);\n        } else {\n          return deopt(_elem);\n        }\n      }\n      return arr;\n    }\n    if (path.isObjectExpression()) {\n      var obj = {};\n      var props = path.get(\"properties\");\n      for (var _iterator3 = props, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var prop = _ref3;\n        if (prop.isObjectMethod() || prop.isSpreadProperty()) {\n          return deopt(prop);\n        }\n        var keyPath = prop.get(\"key\");\n        var key = keyPath;\n        if (prop.node.computed) {\n          key = key.evaluate();\n          if (!key.confident) {\n            return deopt(keyPath);\n          }\n          key = key.value;\n        } else if (key.isIdentifier()) {\n          key = key.node.name;\n        } else {\n          key = key.node.value;\n        }\n        var valuePath = prop.get(\"value\");\n        var _value2 = valuePath.evaluate();\n        if (!_value2.confident) {\n          return deopt(valuePath);\n        }\n        _value2 = _value2.value;\n        obj[key] = _value2;\n      }\n      return obj;\n    }\n    if (path.isLogicalExpression()) {\n      var wasConfident = confident;\n      var left = evaluate(path.get(\"left\"));\n      var leftConfident = confident;\n      confident = wasConfident;\n      var right = evaluate(path.get(\"right\"));\n      var rightConfident = confident;\n      confident = leftConfident && rightConfident;\n      switch (node.operator) {\n        case \"||\":\n          if (left && leftConfident) {\n            confident = true;\n            return left;\n          }\n          if (!confident) return;\n          return left || right;\n        case \"&&\":\n          if (!left && leftConfident || !right && rightConfident) {\n            confident = true;\n          }\n          if (!confident) return;\n          return left && right;\n      }\n    }\n    if (path.isBinaryExpression()) {\n      var _left = evaluate(path.get(\"left\"));\n      if (!confident) return;\n      var _right = evaluate(path.get(\"right\"));\n      if (!confident) return;\n      switch (node.operator) {\n        case \"-\":\n          return _left - _right;\n        case \"+\":\n          return _left + _right;\n        case \"/\":\n          return _left / _right;\n        case \"*\":\n          return _left * _right;\n        case \"%\":\n          return _left % _right;\n        case \"**\":\n          return Math.pow(_left, _right);\n        case \"<\":\n          return _left < _right;\n        case \">\":\n          return _left > _right;\n        case \"<=\":\n          return _left <= _right;\n        case \">=\":\n          return _left >= _right;\n        case \"==\":\n          return _left == _right;\n        case \"!=\":\n          return _left != _right;\n        case \"===\":\n          return _left === _right;\n        case \"!==\":\n          return _left !== _right;\n        case \"|\":\n          return _left | _right;\n        case \"&\":\n          return _left & _right;\n        case \"^\":\n          return _left ^ _right;\n        case \"<<\":\n          return _left << _right;\n        case \">>\":\n          return _left >> _right;\n        case \">>>\":\n          return _left >>> _right;\n      }\n    }\n    if (path.isCallExpression()) {\n      var callee = path.get(\"callee\");\n      var context = void 0;\n      var func = void 0;\n      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {\n        func = global[node.callee.name];\n      }\n      if (callee.isMemberExpression()) {\n        var _object = callee.get(\"object\");\n        var _property = callee.get(\"property\");\n        if (_object.isIdentifier() && _property.isIdentifier() && VALID_CALLEES.indexOf(_object.node.name) >= 0 && INVALID_METHODS.indexOf(_property.node.name) < 0) {\n          context = global[_object.node.name];\n          func = context[_property.node.name];\n        }\n        if (_object.isLiteral() && _property.isIdentifier()) {\n          var _type = (0, _typeof3.default)(_object.node.value);\n          if (_type === \"string\" || _type === \"number\") {\n            context = _object.node.value;\n            func = context[_property.node.name];\n          }\n        }\n      }\n      if (func) {\n        var args = path.get(\"arguments\").map(evaluate);\n        if (!confident) return;\n        return func.apply(context, args);\n      }\n    }\n    deopt(path);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar path = require('path'),\n  configuration = require('./config'),\n  inputError = require('./input-error'),\n  libReport = require('istanbul-lib-report'),\n  libReports = require('istanbul-reports');\nfunction Reporter(cfg, opts) {\n  opts = opts || {};\n  this.config = cfg || configuration.loadFile();\n  this.dir = path.resolve(this.config.reporting.dir());\n  this.reports = {};\n  var summarizer = opts.summarizer,\n    s = this.config.reporting.summarizer();\n  if (summarizer && typeof summarizer === 'function') {\n    this.summarizer = summarizer;\n  } else {\n    summarizer = libReport.summarizers[s];\n    if (!summarizer) {\n      throw inputError.create('Invalid summarizer in report config: ' + s);\n    }\n    this.summarizer = summarizer;\n  }\n}\nReporter.prototype = {\n  /**\n   * adds a report to be generated. Must be one of the entries returned\n   * by `Report.getReportList()`\n   * @method add\n   * @param {String} fmt the format of the report to generate\n   */\n  add: function add(fmt) {\n    if (this.reports[fmt]) {\n      // already added\n      return;\n    }\n    var config = this.config,\n      rptConfig = config.reporting.reportConfig()[fmt] || {};\n    rptConfig.verbose = config.verbose;\n    try {\n      if (this.config.verbose) {\n        console.error('Create report', fmt, ' with', rptConfig);\n      }\n      this.reports[fmt] = libReports.create(fmt, rptConfig);\n    } catch (ex) {\n      throw inputError.create('Invalid report format [' + fmt + ']');\n    }\n  },\n  /**\n   * adds an array of report formats to be generated\n   * @method addAll\n   * @param {Array} fmts an array of report formats\n   */\n  addAll: function addAll(fmts) {\n    var that = this;\n    fmts.forEach(function (f) {\n      that.add(f);\n    });\n  },\n  /**\n   * writes all reports added\n   * @method write\n   */\n  write: function write(coverageMap, opts) {\n    opts = opts || {};\n    var that = this,\n      sourceFinder = opts.sourceFinder || null,\n      context,\n      tree;\n    context = libReport.createContext({\n      dir: this.dir,\n      watermarks: this.config.reporting.watermarks(),\n      sourceFinder: sourceFinder\n    });\n    tree = this.summarizer(coverageMap);\n    Object.keys(this.reports).forEach(function (name) {\n      var report = that.reports[name];\n      tree.visit(report, context);\n    });\n  }\n};\nmodule.exports = Reporter;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = nodeModulesPaths;\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _realpathNative;\nfunction _load_realpathNative() {\n  return _realpathNative = require('realpath-native');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction nodeModulesPaths(basedir, options) {\n  var modules = options && options.moduleDirectory ? [].concat(options.moduleDirectory) : ['node_modules'];\n\n  // ensure that `basedir` is an absolute path at this point,\n  // resolving against the process' current working directory\n  var basedirAbs = (_path || _load_path()).default.resolve(basedir);\n  var prefix = '/';\n  if (/^([A-Za-z]:)/.test(basedirAbs)) {\n    prefix = '';\n  } else if (/^\\\\\\\\/.test(basedirAbs)) {\n    prefix = '\\\\\\\\';\n  }\n\n  // The node resolution algorithm (as implemented by NodeJS and TypeScript)\n  // traverses parents of the physical path, not the symlinked path\n  var physicalBasedir;\n  try {\n    physicalBasedir = (0, (_realpathNative || _load_realpathNative()).sync)(basedirAbs);\n  } catch (err) {\n    // realpath can throw, e.g. on mapped drives\n    physicalBasedir = basedirAbs;\n  }\n  var paths = [physicalBasedir];\n  var parsed = (_path || _load_path()).default.parse(physicalBasedir);\n  while (parsed.dir !== paths[paths.length - 1]) {\n    paths.push(parsed.dir);\n    parsed = (_path || _load_path()).default.parse(parsed.dir);\n  }\n  var dirs = paths.reduce(function (dirs, aPath) {\n    return dirs.concat(modules.map(function (moduleDir) {\n      return (_path || _load_path()).default.isAbsolute(moduleDir) ? aPath === basedirAbs ? moduleDir : '' : (_path || _load_path()).default.join(prefix, aPath, moduleDir);\n    }));\n  }, []).filter(function (dir) {\n    return dir !== '';\n  });\n  return options.paths ? dirs.concat(options.paths) : dirs;\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Adapted from: https://github.com/substack/node-resolve\n *\n *\n */","map":null,"metadata":{},"sourceType":"script"}
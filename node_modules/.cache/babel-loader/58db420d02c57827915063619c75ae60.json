{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar LONG_TEST_COLOR = (_chalk || _load_chalk()).default.reset.bold.bgRed;\n// Explicitly reset for these messages since they can get written out in the\n// middle of error logging\nvar FAIL_TEXT = 'FAIL';\nvar PASS_TEXT = 'PASS';\nvar FAIL = (_chalk || _load_chalk()).default.supportsColor ? (_chalk || _load_chalk()).default.reset.inverse.bold.red(\" \".concat(FAIL_TEXT, \" \")) : FAIL_TEXT;\nvar PASS = (_chalk || _load_chalk()).default.supportsColor ? (_chalk || _load_chalk()).default.reset.inverse.bold.green(\" \".concat(PASS_TEXT, \" \")) : PASS_TEXT;\nexports.default = function (result, globalConfig, projectConfig) {\n  var testPath = result.testFilePath;\n  var status = result.numFailingTests > 0 || result.testExecError ? FAIL : PASS;\n  var runTime = result.perfStats ? (result.perfStats.end - result.perfStats.start) / 1000 : null;\n  var testDetail = [];\n  if (runTime !== null && runTime > 5) {\n    testDetail.push(LONG_TEST_COLOR(runTime + 's'));\n  }\n  if (result.memoryUsage) {\n    var toMB = function toMB(bytes) {\n      return Math.floor(bytes / 1024 / 1024);\n    };\n    testDetail.push(\"\".concat(toMB(result.memoryUsage), \" MB heap size\"));\n  }\n  var projectDisplayName = projectConfig && projectConfig.displayName ? (0, (_utils || _load_utils()).printDisplayName)(projectConfig) + ' ' : '';\n  return \"\".concat(status, \" \").concat(projectDisplayName).concat((0, (_utils || _load_utils()).formatTestPath)(projectConfig ? projectConfig : globalConfig, testPath)) + (testDetail.length ? \" (\".concat(testDetail.join(', '), \")\") : '');\n};","map":null,"metadata":{},"sourceType":"script"}
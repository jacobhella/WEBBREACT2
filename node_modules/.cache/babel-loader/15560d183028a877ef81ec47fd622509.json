{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _virtualTypes = require(\"./lib/virtual-types\");\nvar virtualTypes = _interopRequireWildcard(_virtualTypes);\nvar _debug2 = require(\"debug\");\nvar _debug3 = _interopRequireDefault(_debug2);\nvar _invariant = require(\"invariant\");\nvar _invariant2 = _interopRequireDefault(_invariant);\nvar _index = require(\"../index\");\nvar _index2 = _interopRequireDefault(_index);\nvar _assign = require(\"lodash/assign\");\nvar _assign2 = _interopRequireDefault(_assign);\nvar _scope = require(\"../scope\");\nvar _scope2 = _interopRequireDefault(_scope);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nvar _cache = require(\"../cache\");\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _debug = (0, _debug3.default)(\"babel\");\nvar NodePath = function () {\n  function NodePath(hub, parent) {\n    (0, _classCallCheck3.default)(this, NodePath);\n    this.parent = parent;\n    this.hub = hub;\n    this.contexts = [];\n    this.data = {};\n    this.shouldSkip = false;\n    this.shouldStop = false;\n    this.removed = false;\n    this.state = null;\n    this.opts = null;\n    this.skipKeys = null;\n    this.parentPath = null;\n    this.context = null;\n    this.container = null;\n    this.listKey = null;\n    this.inList = false;\n    this.parentKey = null;\n    this.key = null;\n    this.node = null;\n    this.scope = null;\n    this.type = null;\n    this.typeAnnotation = null;\n  }\n  NodePath.get = function get(_ref) {\n    var hub = _ref.hub,\n      parentPath = _ref.parentPath,\n      parent = _ref.parent,\n      container = _ref.container,\n      listKey = _ref.listKey,\n      key = _ref.key;\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n    (0, _invariant2.default)(parent, \"To get a node path the parent needs to exist\");\n    var targetNode = container[key];\n    var paths = _cache.path.get(parent) || [];\n    if (!_cache.path.has(parent)) {\n      _cache.path.set(parent, paths);\n    }\n    var path = void 0;\n    for (var i = 0; i < paths.length; i++) {\n      var pathCheck = paths[i];\n      if (pathCheck.node === targetNode) {\n        path = pathCheck;\n        break;\n      }\n    }\n    if (!path) {\n      path = new NodePath(hub, parent);\n      paths.push(path);\n    }\n    path.setup(parentPath, container, listKey, key);\n    return path;\n  };\n  NodePath.prototype.getScope = function getScope(scope) {\n    var ourScope = scope;\n    if (this.isScope()) {\n      ourScope = new _scope2.default(this, scope);\n    }\n    return ourScope;\n  };\n  NodePath.prototype.setData = function setData(key, val) {\n    return this.data[key] = val;\n  };\n  NodePath.prototype.getData = function getData(key, def) {\n    var val = this.data[key];\n    if (!val && def) val = this.data[key] = def;\n    return val;\n  };\n  NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg) {\n    var Error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SyntaxError;\n    return this.hub.file.buildCodeFrameError(this.node, msg, Error);\n  };\n  NodePath.prototype.traverse = function traverse(visitor, state) {\n    (0, _index2.default)(this.node, visitor, this.scope, state, this);\n  };\n  NodePath.prototype.mark = function mark(type, message) {\n    this.hub.file.metadata.marked.push({\n      type: type,\n      message: message,\n      loc: this.node.loc\n    });\n  };\n  NodePath.prototype.set = function set(key, node) {\n    t.validate(this.node, key, node);\n    this.node[key] = node;\n  };\n  NodePath.prototype.getPathLocation = function getPathLocation() {\n    var parts = [];\n    var path = this;\n    do {\n      var key = path.key;\n      if (path.inList) key = path.listKey + \"[\" + key + \"]\";\n      parts.unshift(key);\n    } while (path = path.parentPath);\n    return parts.join(\".\");\n  };\n  NodePath.prototype.debug = function debug(buildMessage) {\n    if (!_debug.enabled) return;\n    _debug(this.getPathLocation() + \" \" + this.type + \": \" + buildMessage());\n  };\n  return NodePath;\n}();\nexports.default = NodePath;\n(0, _assign2.default)(NodePath.prototype, require(\"./ancestry\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./inference\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./replacement\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./evaluation\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./conversion\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./introspection\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./context\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./removal\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./modification\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./family\"));\n(0, _assign2.default)(NodePath.prototype, require(\"./comments\"));\nvar _loop2 = function _loop2() {\n  if (_isArray) {\n    if (_i >= _iterator.length) return \"break\";\n    _ref2 = _iterator[_i++];\n  } else {\n    _i = _iterator.next();\n    if (_i.done) return \"break\";\n    _ref2 = _i.value;\n  }\n  var type = _ref2;\n  var typeKey = \"is\" + type;\n  NodePath.prototype[typeKey] = function (opts) {\n    return t[typeKey](this.node, opts);\n  };\n  NodePath.prototype[\"assert\" + type] = function (opts) {\n    if (!this[typeKey](opts)) {\n      throw new TypeError(\"Expected node path of type \" + type);\n    }\n  };\n};\nfor (var _iterator = t.TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n  var _ref2;\n  var _ret2 = _loop2();\n  if (_ret2 === \"break\") break;\n}\nvar _loop = function _loop(type) {\n  if (type[0] === \"_\") return \"continue\";\n  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);\n  var virtualType = virtualTypes[type];\n  NodePath.prototype[\"is\" + type] = function (opts) {\n    return virtualType.checkPath(this, opts);\n  };\n};\nfor (var type in virtualTypes) {\n  var _ret = _loop(type);\n  if (_ret === \"continue\") continue;\n}\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.transformFromAst = exports.transform = exports.analyse = exports.Pipeline = exports.OptionManager = exports.traverse = exports.types = exports.messages = exports.util = exports.version = exports.resolvePreset = exports.resolvePlugin = exports.template = exports.buildExternalHelpers = exports.options = exports.File = undefined;\nvar _file = require(\"../transformation/file\");\nObject.defineProperty(exports, \"File\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_file).default;\n  }\n});\nvar _config = require(\"../transformation/file/options/config\");\nObject.defineProperty(exports, \"options\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_config).default;\n  }\n});\nvar _buildExternalHelpers = require(\"../tools/build-external-helpers\");\nObject.defineProperty(exports, \"buildExternalHelpers\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_buildExternalHelpers).default;\n  }\n});\nvar _babelTemplate = require(\"babel-template\");\nObject.defineProperty(exports, \"template\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_babelTemplate).default;\n  }\n});\nvar _resolvePlugin = require(\"../helpers/resolve-plugin\");\nObject.defineProperty(exports, \"resolvePlugin\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_resolvePlugin).default;\n  }\n});\nvar _resolvePreset = require(\"../helpers/resolve-preset\");\nObject.defineProperty(exports, \"resolvePreset\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_resolvePreset).default;\n  }\n});\nvar _package = require(\"../../package\");\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function get() {\n    return _package.version;\n  }\n});\nexports.Plugin = Plugin;\nexports.transformFile = transformFile;\nexports.transformFileSync = transformFileSync;\nvar _fs = require(\"fs\");\nvar _fs2 = _interopRequireDefault(_fs);\nvar _util = require(\"../util\");\nvar util = _interopRequireWildcard(_util);\nvar _babelMessages = require(\"babel-messages\");\nvar messages = _interopRequireWildcard(_babelMessages);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nvar _babelTraverse = require(\"babel-traverse\");\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\nvar _optionManager = require(\"../transformation/file/options/option-manager\");\nvar _optionManager2 = _interopRequireDefault(_optionManager);\nvar _pipeline = require(\"../transformation/pipeline\");\nvar _pipeline2 = _interopRequireDefault(_pipeline);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nexports.util = util;\nexports.messages = messages;\nexports.types = t;\nexports.traverse = _babelTraverse2.default;\nexports.OptionManager = _optionManager2.default;\nfunction Plugin(alias) {\n  throw new Error(\"The (\" + alias + \") Babel 5 plugin is being run with Babel 6.\");\n}\nexports.Pipeline = _pipeline2.default;\nvar pipeline = new _pipeline2.default();\nvar analyse = exports.analyse = pipeline.analyse.bind(pipeline);\nvar transform = exports.transform = pipeline.transform.bind(pipeline);\nvar transformFromAst = exports.transformFromAst = pipeline.transformFromAst.bind(pipeline);\nfunction transformFile(filename, opts, callback) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n    opts = {};\n  }\n  opts.filename = filename;\n  _fs2.default.readFile(filename, function (err, code) {\n    var result = void 0;\n    if (!err) {\n      try {\n        result = transform(code, opts);\n      } catch (_err) {\n        err = _err;\n      }\n    }\n    if (err) {\n      callback(err);\n    } else {\n      callback(null, result);\n    }\n  });\n}\nfunction transformFileSync(filename) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  opts.filename = filename;\n  return transform(_fs2.default.readFileSync(filename, \"utf8\"), opts);\n}","map":null,"metadata":{},"sourceType":"script"}
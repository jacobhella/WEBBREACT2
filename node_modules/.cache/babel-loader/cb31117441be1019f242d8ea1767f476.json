{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = shouldInstrument;\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _jestRegexUtil;\nfunction _load_jestRegexUtil() {\n  return _jestRegexUtil = require('jest-regex-util');\n}\nvar _micromatch;\nfunction _load_micromatch() {\n  return _micromatch = _interopRequireDefault(require('micromatch'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar MOCKS_PATTERN = new RegExp((0, (_jestRegexUtil || _load_jestRegexUtil()).escapePathForRegex)((_path || _load_path()).default.sep + '__mocks__' + (_path || _load_path()).default.sep));\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nfunction shouldInstrument(filename, options, config) {\n  if (!options.collectCoverage) {\n    return false;\n  }\n  if (config.forceCoverageMatch && config.forceCoverageMatch.length && (_micromatch || _load_micromatch()).default.any(filename, config.forceCoverageMatch)) {\n    return true;\n  }\n  if (config.testRegex && filename.match(config.testRegex)) {\n    return false;\n  }\n  if (config.testMatch && config.testMatch.length && (_micromatch || _load_micromatch()).default.any(filename, config.testMatch)) {\n    return false;\n  }\n  if (\n  // This configuration field contains an object in the form of:\n  // {'path/to/file.js': true}\n  options.collectCoverageOnlyFrom && !options.collectCoverageOnlyFrom[filename]) {\n    return false;\n  }\n  if (\n  // still cover if `only` is specified\n  !options.collectCoverageOnlyFrom && options.collectCoverageFrom && !(0, (_micromatch || _load_micromatch()).default)([(_path || _load_path()).default.relative(config.rootDir, filename)], options.collectCoverageFrom).length) {\n    return false;\n  }\n  if (config.coveragePathIgnorePatterns && config.coveragePathIgnorePatterns.some(function (pattern) {\n    return filename.match(pattern);\n  })) {\n    return false;\n  }\n  if (MOCKS_PATTERN.test(filename)) {\n    return false;\n  }\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}
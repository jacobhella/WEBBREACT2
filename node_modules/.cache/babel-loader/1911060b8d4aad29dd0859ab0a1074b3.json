{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar common = require('./common');\nvar watchmanClient = require('./watchman_client');\nvar EventEmitter = require('events').EventEmitter;\nvar RecrawlWarning = require('./utils/recrawl-warning-dedupe');\n\n/**\n * Constants\n */\n\nvar CHANGE_EVENT = common.CHANGE_EVENT;\nvar DELETE_EVENT = common.DELETE_EVENT;\nvar ADD_EVENT = common.ADD_EVENT;\nvar ALL_EVENT = common.ALL_EVENT;\n\n/**\n * Export `WatchmanWatcher` class.\n */\n\nmodule.exports = WatchmanWatcher;\n\n/**\n * Watches `dir`.\n *\n * @class WatchmanWatcher\n * @param String dir\n * @param {Object} opts\n * @public\n */\n\nfunction WatchmanWatcher(dir, opts) {\n  common.assignOptions(this, opts);\n  this.root = path.resolve(dir);\n  this._init();\n}\nWatchmanWatcher.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Run the watchman `watch` command on the root and subscribe to changes.\n *\n * @private\n */\nWatchmanWatcher.prototype._init = function () {\n  var _this = this;\n  if (this._client) {\n    this._client = null;\n  }\n\n  // Get the WatchmanClient instance corresponding to our watchmanPath (or nothing).\n  // Then subscribe, which will do the appropriate setup so that we will receive\n  // calls to handleChangeEvent when files change.\n  this._client = watchmanClient.getInstance(this.watchmanPath);\n  return this._client.subscribe(this, this.root).then(function (resp) {\n    _this._handleWarning(resp);\n    _this.emit('ready');\n  }, function (error) {\n    _this._handleError(error);\n  });\n};\n\n/**\n * Called by WatchmanClient to create the options, either during initial 'subscribe'\n * or to resubscribe after a disconnect+reconnect. Note that we are leaving out\n * the watchman 'since' and 'relative_root' options, which are handled inside the\n * WatchmanClient.\n */\nWatchmanWatcher.prototype.createOptions = function () {\n  var options = {\n    fields: ['name', 'exists', 'new']\n  };\n\n  // If the server has the wildmatch capability available it supports\n  // the recursive **/*.foo style match and we can offload our globs\n  // to the watchman server.  This saves both on data size to be\n  // communicated back to us and compute for evaluating the globs\n  // in our node process.\n  if (this._client.wildmatch) {\n    if (this.globs.length === 0) {\n      if (!this.dot) {\n        // Make sure we honor the dot option if even we're not using globs.\n        options.expression = ['match', '**', 'wholename', {\n          includedotfiles: false\n        }];\n      }\n    } else {\n      options.expression = ['anyof'];\n      for (var i in this.globs) {\n        options.expression.push(['match', this.globs[i], 'wholename', {\n          includedotfiles: this.dot\n        }]);\n      }\n    }\n  }\n  return options;\n};\n\n/**\n * Called by WatchmanClient when it receives an error from the watchman daemon.\n *\n * @param {Object} resp\n */\nWatchmanWatcher.prototype.handleErrorEvent = function (error) {\n  this.emit('error', error);\n};\n\n/**\n * Called by the WatchmanClient when it is notified about a file change in\n * the tree for this particular watcher's root.\n *\n * @param {Object} resp\n * @private\n */\n\nWatchmanWatcher.prototype.handleChangeEvent = function (resp) {\n  if (Array.isArray(resp.files)) {\n    resp.files.forEach(this.handleFileChange, this);\n  }\n};\n\n/**\n * Handles a single change event record.\n *\n * @param {Object} changeDescriptor\n * @private\n */\n\nWatchmanWatcher.prototype.handleFileChange = function (changeDescriptor) {\n  var _this2 = this;\n  var absPath;\n  var relativePath;\n  relativePath = changeDescriptor.name;\n  absPath = path.join(this.root, relativePath);\n  if (!(this._client.wildmatch && !this.hasIgnore) && !common.isFileIncluded(this.globs, this.dot, this.doIgnore, relativePath)) {\n    return;\n  }\n  if (!changeDescriptor.exists) {\n    this.emitEvent(DELETE_EVENT, relativePath, this.root);\n  } else {\n    fs.lstat(absPath, function (error, stat) {\n      // Files can be deleted between the event and the lstat call\n      // the most reliable thing to do here is to ignore the event.\n      if (error && error.code === 'ENOENT') {\n        return;\n      }\n      if (_this2._handleError(error)) {\n        return;\n      }\n      var eventType = changeDescriptor.new ? ADD_EVENT : CHANGE_EVENT;\n\n      // Change event on dirs are mostly useless.\n      if (!(eventType === CHANGE_EVENT && stat.isDirectory())) {\n        _this2.emitEvent(eventType, relativePath, _this2.root, stat);\n      }\n    });\n  }\n};\n\n/**\n * Dispatches an event.\n *\n * @param {string} eventType\n * @param {string} filepath\n * @param {string} root\n * @param {fs.Stat} stat\n * @private\n */\n\nWatchmanWatcher.prototype.emitEvent = function (eventType, filepath, root, stat) {\n  this.emit(eventType, filepath, root, stat);\n  this.emit(ALL_EVENT, eventType, filepath, root, stat);\n};\n\n/**\n * Closes the watcher.\n *\n * @param {function} callback\n * @private\n */\n\nWatchmanWatcher.prototype.close = function (callback) {\n  this._client.closeWatcher(this);\n  callback && callback(null, true);\n};\n\n/**\n * Handles an error and returns true if exists.\n *\n * @param {WatchmanWatcher} self\n * @param {Error} error\n * @private\n */\n\nWatchmanWatcher.prototype._handleError = function (error) {\n  if (error != null) {\n    this.emit('error', error);\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * Handles a warning in the watchman resp object.\n *\n * @param {object} resp\n * @private\n */\n\nWatchmanWatcher.prototype._handleWarning = function (resp) {\n  if ('warning' in resp) {\n    if (RecrawlWarning.isRecrawlWarningDupe(resp.warning)) {\n      return true;\n    }\n    console.warn(resp.warning);\n    return true;\n  } else {\n    return false;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
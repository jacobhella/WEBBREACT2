{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar _exit;\nfunction _load_exit() {\n  return _exit = _interopRequireDefault(require('exit'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _util;\nfunction _load_util() {\n  return _util = _interopRequireDefault(require('util'));\n}\nvar _nodeNotifier;\nfunction _load_nodeNotifier() {\n  return _nodeNotifier = _interopRequireDefault(require('node-notifier'));\n}\nvar _base_reporter;\nfunction _load_base_reporter() {\n  return _base_reporter = _interopRequireDefault(require('./base_reporter'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar isDarwin = process.platform === 'darwin';\nvar icon = (_path || _load_path()).default.resolve(__dirname, '../assets/jest_logo.png');\nvar NotifyReporter = /*#__PURE__*/function (_default) {\n  _inherits(NotifyReporter, _default);\n  function NotifyReporter(globalConfig, startRun, context) {\n    var _this;\n    _classCallCheck(this, NotifyReporter);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NotifyReporter).call(this));\n    _this._globalConfig = globalConfig;\n    _this._startRun = startRun;\n    _this._context = context;\n    return _this;\n  }\n  _createClass(NotifyReporter, [{\n    key: \"onRunComplete\",\n    value: function onRunComplete(contexts, result) {\n      var _this2 = this;\n      var success = result.numFailedTests === 0 && result.numRuntimeErrorTestSuites === 0;\n      var firstContext = contexts.values().next();\n      var hasteFS = firstContext && firstContext.value && firstContext.value.hasteFS;\n      var packageName;\n      if (hasteFS != null) {\n        // assuming root package.json is the first one\n        var _hasteFS$matchFiles = hasteFS.matchFiles('package.json'),\n          _hasteFS$matchFiles2 = _slicedToArray(_hasteFS$matchFiles, 1);\n        var filePath = _hasteFS$matchFiles2[0];\n        packageName = filePath != null ? hasteFS.getModuleName(filePath) : this._globalConfig.rootDir;\n      } else {\n        packageName = this._globalConfig.rootDir;\n      }\n      packageName = packageName != null ? \"\".concat(packageName, \" - \") : '';\n      var notifyMode = this._globalConfig.notifyMode;\n      var statusChanged = this._context.previousSuccess !== success || this._context.firstRun;\n      var testsHaveRun = result.numTotalTests !== 0;\n      if (testsHaveRun && success && (notifyMode === 'always' || notifyMode === 'success' || notifyMode === 'success-change' || notifyMode === 'change' && statusChanged || notifyMode === 'failure-change' && statusChanged)) {\n        var title = (_util || _load_util()).default.format('%s%d%% Passed', packageName, 100);\n        var message = (_util || _load_util()).default.format((isDarwin ? \"\\u2705 \" : '') + '%d tests passed', result.numPassedTests);\n        (_nodeNotifier || _load_nodeNotifier()).default.notify({\n          icon: icon,\n          message: message,\n          title: title\n        });\n      } else if (testsHaveRun && !success && (notifyMode === 'always' || notifyMode === 'failure' || notifyMode === 'failure-change' || notifyMode === 'change' && statusChanged || notifyMode === 'success-change' && statusChanged)) {\n        var failed = result.numFailedTests / result.numTotalTests;\n        var _title = (_util || _load_util()).default.format('%s%d%% Failed', packageName, Math.ceil(Number.isNaN(failed) ? 0 : failed * 100));\n        var _message = (_util || _load_util()).default.format((isDarwin ? \"\\u26D4\\uFE0F \" : '') + '%d of %d tests failed', result.numFailedTests, result.numTotalTests);\n        var watchMode = this._globalConfig.watch || this._globalConfig.watchAll;\n        var restartAnswer = 'Run again';\n        var quitAnswer = 'Exit tests';\n        if (!watchMode) {\n          (_nodeNotifier || _load_nodeNotifier()).default.notify({\n            icon: icon,\n            message: _message,\n            title: _title\n          });\n        } else {\n          (_nodeNotifier || _load_nodeNotifier()).default.notify({\n            actions: [restartAnswer, quitAnswer],\n            closeLabel: 'Close',\n            icon: icon,\n            message: _message,\n            title: _title\n          }, function (err, _, metadata) {\n            if (err || !metadata) {\n              return;\n            }\n            if (metadata.activationValue === quitAnswer) {\n              (0, (_exit || _load_exit()).default)(0);\n              return;\n            }\n            if (metadata.activationValue === restartAnswer) {\n              _this2._startRun(_this2._globalConfig);\n            }\n          });\n        }\n      }\n      this._context.previousSuccess = success;\n      this._context.firstRun = false;\n    }\n  }]);\n  return NotifyReporter;\n}((_base_reporter || _load_base_reporter()).default);\nexports.default = NotifyReporter;","map":null,"metadata":{},"sourceType":"script"}
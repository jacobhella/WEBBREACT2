{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.deepMerge = exports.saveSnapshotFile = exports.ensureDirectoryExists = exports.escapeBacktickString = exports.unescape = exports.serialize = exports.getSnapshotData = exports.getSnapshotPath = exports.keyToTestName = exports.testNameToKey = exports.SNAPSHOT_VERSION_WARNING = exports.SNAPSHOT_GUIDE_LINK = exports.SNAPSHOT_VERSION = exports.SNAPSHOT_EXTENSION = undefined;\nvar _plugins = require('./plugins');\nvar _chalk = require('chalk');\nvar _chalk2 = _interopRequireDefault(_chalk);\nvar _fs = require('fs');\nvar _fs2 = _interopRequireDefault(_fs);\nvar _mkdirp = require('mkdirp');\nvar _mkdirp2 = _interopRequireDefault(_mkdirp);\nvar _naturalCompare = require('natural-compare');\nvar _naturalCompare2 = _interopRequireDefault(_naturalCompare);\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _prettyFormat = require('pretty-format');\nvar _prettyFormat2 = _interopRequireDefault(_prettyFormat);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar SNAPSHOT_EXTENSION = exports.SNAPSHOT_EXTENSION = 'snap';\nvar SNAPSHOT_VERSION = exports.SNAPSHOT_VERSION = '1';\nvar SNAPSHOT_VERSION_REGEXP = /^\\/\\/ Jest Snapshot v(.+),/;\nvar SNAPSHOT_GUIDE_LINK = exports.SNAPSHOT_GUIDE_LINK = 'https://goo.gl/fbAQLP';\nvar SNAPSHOT_VERSION_WARNING = exports.SNAPSHOT_VERSION_WARNING = _chalk2.default.yellow(\"\".concat(_chalk2.default.bold('Warning'), \": Before you upgrade snapshots, \") + \"we recommend that you revert any local changes to tests or other code, \" + \"to ensure that you do not store invalid state.\");\nvar writeSnapshotVersion = function writeSnapshotVersion() {\n  return \"// Jest Snapshot v\".concat(SNAPSHOT_VERSION, \", \").concat(SNAPSHOT_GUIDE_LINK);\n};\nvar validateSnapshotVersion = function validateSnapshotVersion(snapshotContents) {\n  var versionTest = SNAPSHOT_VERSION_REGEXP.exec(snapshotContents);\n  var version = versionTest && versionTest[1];\n  if (!version) {\n    return new Error(_chalk2.default.red(\"\".concat(_chalk2.default.bold('Outdated snapshot'), \": No snapshot header found. \") + \"Jest 19 introduced versioned snapshots to ensure all developers \" + \"on a project are using the same version of Jest. \" + \"Please update all snapshots during this upgrade of Jest.\\n\\n\") + SNAPSHOT_VERSION_WARNING);\n  }\n  if (version < SNAPSHOT_VERSION) {\n    return new Error(_chalk2.default.red(\"\".concat(_chalk2.default.red.bold('Outdated snapshot'), \": The version of the snapshot \") + \"file associated with this test is outdated. The snapshot file \" + \"version ensures that all developers on a project are using \" + \"the same version of Jest. \" + \"Please update all snapshots during this upgrade of Jest.\\n\\n\") + \"Expected: v\".concat(SNAPSHOT_VERSION, \"\\n\") + \"Received: v\".concat(version, \"\\n\\n\") + SNAPSHOT_VERSION_WARNING);\n  }\n  if (version > SNAPSHOT_VERSION) {\n    return new Error(_chalk2.default.red(\"\".concat(_chalk2.default.red.bold('Outdated Jest version'), \": The version of this \") + \"snapshot file indicates that this project is meant to be used \" + \"with a newer version of Jest. The snapshot file version ensures \" + \"that all developers on a project are using the same version of \" + \"Jest. Please update your version of Jest and re-run the tests.\\n\\n\") + \"Expected: v\".concat(SNAPSHOT_VERSION, \"\\n\") + \"Received: v\".concat(version));\n  }\n  return null;\n};\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nvar testNameToKey = exports.testNameToKey = function (testName, count) {\n  return testName + ' ' + count;\n};\nvar keyToTestName = exports.keyToTestName = function (key) {\n  if (!/ \\d+$/.test(key)) {\n    throw new Error('Snapshot keys must end with a number.');\n  }\n  return key.replace(/ \\d+$/, '');\n};\nvar getSnapshotPath = exports.getSnapshotPath = function (testPath) {\n  return _path2.default.join(_path2.default.join(_path2.default.dirname(testPath), '__snapshots__'), _path2.default.basename(testPath) + '.' + SNAPSHOT_EXTENSION);\n};\nvar getSnapshotData = exports.getSnapshotData = function (snapshotPath, update) {\n  var data = Object.create(null);\n  var snapshotContents = '';\n  var dirty = false;\n  if (_fs2.default.existsSync(snapshotPath)) {\n    try {\n      snapshotContents = _fs2.default.readFileSync(snapshotPath, 'utf8');\n      // eslint-disable-next-line no-new-func\n      var populate = new Function('exports', snapshotContents);\n      // $FlowFixMe\n      populate(data);\n    } catch (e) {}\n  }\n  var validationResult = validateSnapshotVersion(snapshotContents);\n  var isInvalid = snapshotContents && validationResult;\n  if (update === 'none' && isInvalid) {\n    throw validationResult;\n  }\n  if ((update === 'all' || update === 'new') && isInvalid) {\n    dirty = true;\n  }\n  return {\n    data: data,\n    dirty: dirty\n  };\n};\n\n// Extra line breaks at the beginning and at the end of the snapshot are useful\n// to make the content of the snapshot easier to read\nvar addExtraLineBreaks = function addExtraLineBreaks(string) {\n  return string.includes('\\n') ? \"\\n\".concat(string, \"\\n\") : string;\n};\nvar serialize = exports.serialize = function (data) {\n  return addExtraLineBreaks(normalizeNewlines((0, _prettyFormat2.default)(data, {\n    escapeRegex: true,\n    plugins: (0, _plugins.getSerializers)(),\n    printFunctionName: false\n  })));\n};\n\n// unescape double quotes\nvar unescape = exports.unescape = function (data) {\n  return data.replace(/\\\\(\")/g, '$1');\n};\nvar escapeBacktickString = exports.escapeBacktickString = function (str) {\n  return str.replace(/`|\\\\|\\${/g, '\\\\$&');\n};\nvar printBacktickString = function printBacktickString(str) {\n  return '`' + escapeBacktickString(str) + '`';\n};\nvar ensureDirectoryExists = exports.ensureDirectoryExists = function (filePath) {\n  try {\n    _mkdirp2.default.sync(_path2.default.join(_path2.default.dirname(filePath)), '777');\n  } catch (e) {}\n};\nvar normalizeNewlines = function normalizeNewlines(string) {\n  return string.replace(/\\r\\n|\\r/g, '\\n');\n};\nvar saveSnapshotFile = exports.saveSnapshotFile = function (snapshotData, snapshotPath) {\n  var snapshots = Object.keys(snapshotData).sort(_naturalCompare2.default).map(function (key) {\n    return 'exports[' + printBacktickString(key) + '] = ' + printBacktickString(normalizeNewlines(snapshotData[key])) + ';';\n  });\n  ensureDirectoryExists(snapshotPath);\n  _fs2.default.writeFileSync(snapshotPath, writeSnapshotVersion() + '\\n\\n' + snapshots.join('\\n\\n') + '\\n');\n};\nvar deepMerge = exports.deepMerge = function (target, source) {\n  var mergedOutput = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(function (key) {\n      if (isObject(source[key]) && !source[key].$$typeof) {\n        if (!(key in target)) Object.assign(mergedOutput, _defineProperty({}, key, source[key]));else mergedOutput[key] = deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(mergedOutput, _defineProperty({}, key, source[key]));\n      }\n    });\n  }\n  return mergedOutput;\n};","map":null,"metadata":{},"sourceType":"script"}
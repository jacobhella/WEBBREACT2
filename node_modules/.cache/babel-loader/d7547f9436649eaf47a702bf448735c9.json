{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeOptions;\nfunction _path() {\n  var data = require(\"path\");\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction normalizeOptions(config) {\n  var _config$options = config.options,\n    filename = _config$options.filename,\n    cwd = _config$options.cwd,\n    _config$options$filen = _config$options.filenameRelative,\n    filenameRelative = _config$options$filen === void 0 ? typeof filename === \"string\" ? _path().relative(cwd, filename) : \"unknown\" : _config$options$filen,\n    _config$options$sourc = _config$options.sourceType,\n    sourceType = _config$options$sourc === void 0 ? \"module\" : _config$options$sourc,\n    inputSourceMap = _config$options.inputSourceMap,\n    _config$options$sourc2 = _config$options.sourceMaps,\n    sourceMaps = _config$options$sourc2 === void 0 ? !!inputSourceMap : _config$options$sourc2,\n    _config$options$sourc3 = _config$options.sourceRoot,\n    sourceRoot = _config$options$sourc3 === void 0 ? config.options.moduleRoot : _config$options$sourc3,\n    _config$options$sourc4 = _config$options.sourceFileName,\n    sourceFileName = _config$options$sourc4 === void 0 ? _path().basename(filenameRelative) : _config$options$sourc4,\n    _config$options$comme = _config$options.comments,\n    comments = _config$options$comme === void 0 ? true : _config$options$comme,\n    _config$options$compa = _config$options.compact,\n    compact = _config$options$compa === void 0 ? \"auto\" : _config$options$compa;\n  var opts = config.options;\n  var options = Object.assign({}, opts, {\n    parserOpts: Object.assign({\n      sourceType: _path().extname(filenameRelative) === \".mjs\" ? \"module\" : sourceType,\n      sourceFileName: filename,\n      plugins: []\n    }, opts.parserOpts),\n    generatorOpts: Object.assign({\n      filename: filename,\n      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n      retainLines: opts.retainLines,\n      comments: comments,\n      shouldPrintComment: opts.shouldPrintComment,\n      compact: compact,\n      minified: opts.minified,\n      sourceMaps: sourceMaps,\n      sourceRoot: sourceRoot,\n      sourceFileName: sourceFileName\n    }, opts.generatorOpts)\n  });\n  var _iterator = _createForOfIteratorHelper(config.passes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var plugins = _step.value;\n      var _iterator2 = _createForOfIteratorHelper(plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var plugin = _step2.value;\n          if (plugin.manipulateOptions) {\n            plugin.manipulateOptions(options, options.parserOpts);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return options;\n}\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
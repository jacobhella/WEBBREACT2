{"ast":null,"code":"'use strict';\n\nvar _fs;\nfunction _load_fs() {\n  return _fs = _interopRequireDefault(require('fs'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _child_process;\nfunction _load_child_process() {\n  return _child_process = require('child_process');\n}\nvar _constants;\nfunction _load_constants() {\n  return _constants = _interopRequireDefault(require('../constants'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nfunction find(roots, extensions, ignore, callback) {\n  var result = [];\n  var activeCalls = 0;\n  function search(directory) {\n    activeCalls++;\n    (_fs || _load_fs()).default.readdir(directory, function (err, names) {\n      activeCalls--;\n      if (err) {\n        callback(result);\n        return;\n      }\n      names.forEach(function (file) {\n        file = (_path || _load_path()).default.join(directory, file);\n        if (ignore(file)) {\n          return;\n        }\n        activeCalls++;\n        (_fs || _load_fs()).default.lstat(file, function (err, stat) {\n          activeCalls--;\n          if (!err && stat && !stat.isSymbolicLink()) {\n            if (stat.isDirectory()) {\n              search(file);\n            } else {\n              var ext = (_path || _load_path()).default.extname(file).substr(1);\n              if (extensions.indexOf(ext) !== -1) {\n                result.push([file, stat.mtime.getTime()]);\n              }\n            }\n          }\n          if (activeCalls === 0) {\n            callback(result);\n          }\n        });\n      });\n      if (activeCalls === 0) {\n        callback(result);\n      }\n    });\n  }\n  if (roots.length > 0) {\n    roots.forEach(search);\n  } else {\n    callback(result);\n  }\n}\nfunction findNative(roots, extensions, ignore, callback) {\n  var args = [].concat(roots);\n  args.push('-type', 'f');\n  if (extensions.length) {\n    args.push('(');\n  }\n  extensions.forEach(function (ext, index) {\n    if (index) {\n      args.push('-o');\n    }\n    args.push('-iname');\n    args.push('*.' + ext);\n  });\n  if (extensions.length) {\n    args.push(')');\n  }\n  var child = (0, (_child_process || _load_child_process()).spawn)('find', args);\n  var stdout = '';\n  child.stdout.setEncoding('utf-8');\n  child.stdout.on('data', function (data) {\n    return stdout += data;\n  });\n  child.stdout.on('close', function () {\n    var lines = stdout.trim().split('\\n').filter(function (x) {\n      return !ignore(x);\n    });\n    var result = [];\n    var count = lines.length;\n    if (!count) {\n      callback([]);\n    } else {\n      lines.forEach(function (path) {\n        (_fs || _load_fs()).default.stat(path, function (err, stat) {\n          if (!err && stat) {\n            result.push([path, stat.mtime.getTime()]);\n          }\n          if (--count === 0) {\n            callback(result);\n          }\n        });\n      });\n    }\n  });\n}\nmodule.exports = function nodeCrawl(options) {\n  var data = options.data,\n    extensions = options.extensions,\n    forceNodeFilesystemAPI = options.forceNodeFilesystemAPI,\n    ignore = options.ignore,\n    roots = options.roots;\n  return new Promise(function (resolve) {\n    var callback = function callback(list) {\n      var files = Object.create(null);\n      list.forEach(function (fileData) {\n        var name = fileData[0];\n        var mtime = fileData[1];\n        var existingFile = data.files[name];\n        if (existingFile && existingFile[(_constants || _load_constants()).default.MTIME] === mtime) {\n          files[name] = existingFile;\n        } else {\n          // See ../constants.js; SHA-1 will always be null and fulfilled later.\n          files[name] = ['', mtime, 0, [], null];\n        }\n      });\n      data.files = files;\n      resolve(data);\n    };\n    if (forceNodeFilesystemAPI || process.platform === 'win32') {\n      find(roots, extensions, ignore, callback);\n    } else {\n      findNative(roots, extensions, ignore, callback);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * Wrapper for the growly module\n */\nvar checkGrowl = require('../lib/checkGrowl');\nvar utils = require('../lib/utils');\nvar growly = require('growly');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar errorMessageNotFound = \"Couldn't connect to growl (might be used as a fallback). Make sure it is running\";\nmodule.exports = Growl;\nvar hasGrowl = void 0;\nfunction Growl(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof Growl)) {\n    return new Growl(options);\n  }\n  growly.appname = options.name || 'Node';\n  this.options = options;\n  EventEmitter.call(this);\n}\nutil.inherits(Growl, EventEmitter);\nGrowl.prototype.notify = function (options, callback) {\n  growly.setHost(this.options.host, this.options.port);\n  options = utils.clone(options || {});\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n  callback = utils.actionJackerDecorator(this, options, callback, function (data) {\n    if (data === 'click') {\n      return 'click';\n    }\n    if (data === 'timedout') {\n      return 'timeout';\n    }\n    return false;\n  });\n  options = utils.mapToGrowl(options);\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n  options.title = options.title || 'Node Notification:';\n  if (hasGrowl || !!options.wait) {\n    var localCallback = options.wait ? callback : noop;\n    growly.notify(options.message, options, localCallback);\n    if (!options.wait) callback();\n    return this;\n  }\n  checkGrowl(growly, function (_, didHaveGrowl) {\n    hasGrowl = didHaveGrowl;\n    if (!didHaveGrowl) return callback(new Error(errorMessageNotFound));\n    growly.notify(options.message, options);\n    callback();\n  });\n  return this;\n};\nfunction noop() {}","map":null,"metadata":{},"sourceType":"script"}
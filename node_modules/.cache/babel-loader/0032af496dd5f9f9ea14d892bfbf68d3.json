{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _trimRight = require(\"trim-right\");\nvar _trimRight2 = _interopRequireDefault(_trimRight);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar SPACES_RE = /^[ \\t]+$/;\nvar Buffer = function () {\n  function Buffer(map) {\n    (0, _classCallCheck3.default)(this, Buffer);\n    this._map = null;\n    this._buf = [];\n    this._last = \"\";\n    this._queue = [];\n    this._position = {\n      line: 1,\n      column: 0\n    };\n    this._sourcePosition = {\n      identifierName: null,\n      line: null,\n      column: null,\n      filename: null\n    };\n    this._map = map;\n  }\n  Buffer.prototype.get = function get() {\n    this._flush();\n    var map = this._map;\n    var result = {\n      code: (0, _trimRight2.default)(this._buf.join(\"\")),\n      map: null,\n      rawMappings: map && map.getRawMappings()\n    };\n    if (map) {\n      Object.defineProperty(result, \"map\", {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          return this.map = map.get();\n        },\n        set: function set(value) {\n          Object.defineProperty(this, \"map\", {\n            value: value,\n            writable: true\n          });\n        }\n      });\n    }\n    return result;\n  };\n  Buffer.prototype.append = function append(str) {\n    this._flush();\n    var _sourcePosition = this._sourcePosition,\n      line = _sourcePosition.line,\n      column = _sourcePosition.column,\n      filename = _sourcePosition.filename,\n      identifierName = _sourcePosition.identifierName;\n    this._append(str, line, column, identifierName, filename);\n  };\n  Buffer.prototype.queue = function queue(str) {\n    if (str === \"\\n\") while (this._queue.length > 0 && SPACES_RE.test(this._queue[0][0])) {\n      this._queue.shift();\n    }\n    var _sourcePosition2 = this._sourcePosition,\n      line = _sourcePosition2.line,\n      column = _sourcePosition2.column,\n      filename = _sourcePosition2.filename,\n      identifierName = _sourcePosition2.identifierName;\n    this._queue.unshift([str, line, column, identifierName, filename]);\n  };\n  Buffer.prototype._flush = function _flush() {\n    var item = void 0;\n    while (item = this._queue.pop()) {\n      this._append.apply(this, item);\n    }\n  };\n  Buffer.prototype._append = function _append(str, line, column, identifierName, filename) {\n    if (this._map && str[0] !== \"\\n\") {\n      this._map.mark(this._position.line, this._position.column, line, column, identifierName, filename);\n    }\n    this._buf.push(str);\n    this._last = str[str.length - 1];\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] === \"\\n\") {\n        this._position.line++;\n        this._position.column = 0;\n      } else {\n        this._position.column++;\n      }\n    }\n  };\n  Buffer.prototype.removeTrailingNewline = function removeTrailingNewline() {\n    if (this._queue.length > 0 && this._queue[0][0] === \"\\n\") this._queue.shift();\n  };\n  Buffer.prototype.removeLastSemicolon = function removeLastSemicolon() {\n    if (this._queue.length > 0 && this._queue[0][0] === \";\") this._queue.shift();\n  };\n  Buffer.prototype.endsWith = function endsWith(suffix) {\n    if (suffix.length === 1) {\n      var last = void 0;\n      if (this._queue.length > 0) {\n        var str = this._queue[0][0];\n        last = str[str.length - 1];\n      } else {\n        last = this._last;\n      }\n      return last === suffix;\n    }\n    var end = this._last + this._queue.reduce(function (acc, item) {\n      return item[0] + acc;\n    }, \"\");\n    if (suffix.length <= end.length) {\n      return end.slice(-suffix.length) === suffix;\n    }\n    return false;\n  };\n  Buffer.prototype.hasContent = function hasContent() {\n    return this._queue.length > 0 || !!this._last;\n  };\n  Buffer.prototype.source = function source(prop, loc) {\n    if (prop && !loc) return;\n    var pos = loc ? loc[prop] : null;\n    this._sourcePosition.identifierName = loc && loc.identifierName || null;\n    this._sourcePosition.line = pos ? pos.line : null;\n    this._sourcePosition.column = pos ? pos.column : null;\n    this._sourcePosition.filename = loc && loc.filename || null;\n  };\n  Buffer.prototype.withSource = function withSource(prop, loc, cb) {\n    if (!this._map) return cb();\n    var originalLine = this._sourcePosition.line;\n    var originalColumn = this._sourcePosition.column;\n    var originalFilename = this._sourcePosition.filename;\n    var originalIdentifierName = this._sourcePosition.identifierName;\n    this.source(prop, loc);\n    cb();\n    this._sourcePosition.line = originalLine;\n    this._sourcePosition.column = originalColumn;\n    this._sourcePosition.filename = originalFilename;\n    this._sourcePosition.identifierName = originalIdentifierName;\n  };\n  Buffer.prototype.getCurrentColumn = function getCurrentColumn() {\n    var extra = this._queue.reduce(function (acc, item) {\n      return item[0] + acc;\n    }, \"\");\n    var lastIndex = extra.lastIndexOf(\"\\n\");\n    return lastIndex === -1 ? this._position.column + extra.length : extra.length - 1 - lastIndex;\n  };\n  Buffer.prototype.getCurrentLine = function getCurrentLine() {\n    var extra = this._queue.reduce(function (acc, item) {\n      return item[0] + acc;\n    }, \"\");\n    var count = 0;\n    for (var i = 0; i < extra.length; i++) {\n      if (extra[i] === \"\\n\") count++;\n    }\n    return this._position.line + count;\n  };\n  return Buffer;\n}();\nexports.default = Buffer;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
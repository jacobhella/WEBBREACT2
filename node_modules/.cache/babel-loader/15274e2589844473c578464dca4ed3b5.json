{"ast":null,"code":"'use strict';\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar jasmine2 = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(globalConfig, config, environment, runtime, testPath) {\n    var reporter, jasmineFactory, jasmine, env, jasmineInterface, originalIt, snapshotState, testNameRegex, results;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          reporter = new _reporter2.default(globalConfig, config, testPath);\n          jasmineFactory = runtime.requireInternalModule(JASMINE);\n          jasmine = jasmineFactory.create({\n            process: process,\n            testPath: testPath\n          });\n          env = jasmine.getEnv();\n          jasmineInterface = jasmineFactory.interface(jasmine, env);\n          Object.assign(environment.global, jasmineInterface);\n          env.addReporter(jasmineInterface.jsApiReporter);\n\n          // TODO: Remove config option if V8 exposes some way of getting location of caller\n          // in a future version\n          if (config.testLocationInResults === true) {\n            originalIt = environment.global.it;\n            environment.global.it = function () {\n              var stack = (0, _jestUtil.getCallsite)(1, runtime.getSourceMaps());\n              var it = originalIt.apply(undefined, arguments);\n              it.result.__callsite = stack;\n              return it;\n            };\n          }\n          (0, _jasmine_async.install)(environment.global);\n          (0, _each2.default)(environment);\n          environment.global.test = environment.global.it;\n          environment.global.it.only = environment.global.fit;\n          environment.global.it.skip = environment.global.xit;\n          environment.global.xtest = environment.global.xit;\n          environment.global.describe.skip = environment.global.xdescribe;\n          environment.global.describe.only = environment.global.fdescribe;\n          if (config.timers === 'fake') {\n            environment.fakeTimers.useFakeTimers();\n          }\n          env.beforeEach(function () {\n            if (config.resetModules) {\n              runtime.resetModules();\n            }\n            if (config.clearMocks) {\n              runtime.clearAllMocks();\n            }\n            if (config.resetMocks) {\n              runtime.resetAllMocks();\n              if (config.timers === 'fake') {\n                environment.fakeTimers.useFakeTimers();\n              }\n            }\n            if (config.restoreMocks) {\n              runtime.restoreAllMocks();\n            }\n          });\n          env.addReporter(reporter);\n          runtime.requireInternalModule(_path2.default.resolve(__dirname, './jest_expect.js')).default({\n            expand: globalConfig.expand\n          });\n          if (globalConfig.errorOnDeprecated) {\n            (0, _error_on_private.installErrorOnPrivate)(environment.global);\n          } else {\n            // $FlowFixMe Flow seems to be confused about accessors and tries to enfoce having a `value` property.\n            Object.defineProperty(jasmine, 'DEFAULT_TIMEOUT_INTERVAL', {\n              configurable: true,\n              enumerable: true,\n              get: function get() {\n                return this._DEFAULT_TIMEOUT_INTERVAL;\n              },\n              set: function set(value) {\n                this._DEFAULT_TIMEOUT_INTERVAL = value;\n              }\n            });\n          }\n          snapshotState = runtime.requireInternalModule(_path2.default.resolve(__dirname, './setup_jest_globals.js')).default({\n            config: config,\n            globalConfig: globalConfig,\n            localRequire: runtime.requireModule.bind(runtime),\n            testPath: testPath\n          });\n          if (config.setupTestFrameworkScriptFile) {\n            runtime.requireModule(config.setupTestFrameworkScriptFile);\n          }\n          if (globalConfig.enabledTestsMap) {\n            env.specFilter = function (spec) {\n              var suiteMap = globalConfig.enabledTestsMap && globalConfig.enabledTestsMap[spec.result.testPath];\n              return suiteMap && suiteMap[spec.result.fullName];\n            };\n          } else if (globalConfig.testNamePattern) {\n            testNameRegex = new RegExp(globalConfig.testNamePattern, 'i');\n            env.specFilter = function (spec) {\n              return testNameRegex.test(spec.getFullName());\n            };\n          }\n          runtime.requireModule(testPath);\n          _context.next = 27;\n          return env.execute();\n        case 27:\n          _context.next = 29;\n          return reporter.getResults();\n        case 29:\n          results = _context.sent;\n          return _context.abrupt(\"return\", addSnapshotData(results, snapshotState));\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function jasmine2(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _each = require('./each');\nvar _each2 = _interopRequireDefault(_each);\nvar _error_on_private = require('./error_on_private');\nvar _jestUtil = require('jest-util');\nvar _reporter = require('./reporter');\nvar _reporter2 = _interopRequireDefault(_reporter);\nvar _jasmine_async = require('./jasmine_async');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n// eslint-disable-next-line import/no-extraneous-dependencies\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar JASMINE = require.resolve('./jasmine/jasmine_light.js');\nvar addSnapshotData = function addSnapshotData(results, snapshotState) {\n  results.testResults.forEach(function (_ref2) {\n    var fullName = _ref2.fullName,\n      status = _ref2.status;\n    if (status === 'pending' || status === 'failed') {\n      // if test is skipped or failed, we don't want to mark\n      // its snapshots as obsolete.\n      snapshotState.markSnapshotsAsCheckedForTest(fullName);\n    }\n  });\n  var uncheckedCount = snapshotState.getUncheckedCount();\n  var uncheckedKeys = snapshotState.getUncheckedKeys();\n  if (uncheckedCount) {\n    snapshotState.removeUncheckedKeys();\n  }\n  var status = snapshotState.save();\n  results.snapshot.fileDeleted = status.deleted;\n  results.snapshot.added = snapshotState.added;\n  results.snapshot.matched = snapshotState.matched;\n  results.snapshot.unmatched = snapshotState.unmatched;\n  results.snapshot.updated = snapshotState.updated;\n  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0;\n  // Copy the array to prevent memory leaks\n  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);\n  return results;\n};\nmodule.exports = jasmine2;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var core = require('./core');\nvar fs = require('fs');\nvar path = require('path');\nvar caller = require('./caller.js');\nvar nodeModulesPaths = require('./node-modules-paths.js');\nmodule.exports = function (x, opts) {\n  if (!opts) opts = {};\n  var isFile = opts.isFile || function (file) {\n    try {\n      var stat = fs.statSync(file);\n    } catch (err) {\n      if (err && err.code === 'ENOENT') return false;\n    }\n    return stat.isFile() || stat.isFIFO();\n  };\n  var readFileSync = opts.readFileSync || fs.readFileSync;\n  var extensions = opts.extensions || ['.js'];\n  var y = opts.basedir || path.dirname(caller());\n  opts.paths = opts.paths || [];\n  if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/.test(x)) {\n    var res = path.resolve(y, x);\n    if (x === '..') res += '/';\n    var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n    if (m) return m;\n  } else {\n    var n = loadNodeModulesSync(x, y);\n    if (n) return n;\n  }\n  if (core[x]) return x;\n  throw new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\");\n  function loadAsFileSync(x) {\n    if (isFile(x)) {\n      return x;\n    }\n    for (var i = 0; i < extensions.length; i++) {\n      var file = x + extensions[i];\n      if (isFile(file)) {\n        return file;\n      }\n    }\n  }\n  function loadAsDirectorySync(x) {\n    var pkgfile = path.join(x, '/package.json');\n    if (isFile(pkgfile)) {\n      var body = readFileSync(pkgfile, 'utf8');\n      try {\n        var pkg = JSON.parse(body);\n        if (opts.packageFilter) {\n          pkg = opts.packageFilter(pkg, x);\n        }\n        if (pkg.main) {\n          var m = loadAsFileSync(path.resolve(x, pkg.main));\n          if (m) return m;\n          var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n          if (n) return n;\n        }\n      } catch (err) {}\n    }\n    return loadAsFileSync(path.join(x, '/index'));\n  }\n  function loadNodeModulesSync(x, start) {\n    var dirs = nodeModulesPaths(start, opts);\n    for (var i = 0; i < dirs.length; i++) {\n      var dir = dirs[i];\n      var m = loadAsFileSync(path.join(dir, '/', x));\n      if (m) return m;\n      var n = loadAsDirectorySync(path.join(dir, '/', x));\n      if (n) return n;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\nvar pLimit = require('p-limit');\nvar EndError = /*#__PURE__*/function (_Error) {\n  _inherits(EndError, _Error);\n  function EndError(value) {\n    var _this;\n    _classCallCheck(this, EndError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EndError).call(this));\n    _this.value = value;\n    return _this;\n  }\n  return EndError;\n}(_wrapNativeSuper(Error)); // the input can also be a promise, so we `Promise.all()` them both\nvar finder = function finder(el) {\n  return Promise.all(el).then(function (val) {\n    return val[1] === true && Promise.reject(new EndError(val[0]));\n  });\n};\nmodule.exports = function (iterable, tester, opts) {\n  opts = Object.assign({\n    concurrency: Infinity,\n    preserveOrder: true\n  }, opts);\n  var limit = pLimit(opts.concurrency);\n\n  // start all the promises concurrently with optional limit\n  var items = Array.from(iterable).map(function (el) {\n    return [el, limit(function () {\n      return Promise.resolve(el).then(tester);\n    })];\n  });\n\n  // check the promises either serially or concurrently\n  var checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);\n  return Promise.all(items.map(function (el) {\n    return checkLimit(function () {\n      return finder(el);\n    });\n  })).then(function () {}).catch(function (err) {\n    return err instanceof EndError ? err.value : Promise.reject(err);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _base_reporter;\nfunction _load_base_reporter() {\n  return _base_reporter = _interopRequireDefault(require('./base_reporter'));\n}\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\nvar _get_result_header;\nfunction _load_get_result_header() {\n  return _get_result_header = _interopRequireDefault(require('./get_result_header'));\n}\nvar _get_snapshot_summary;\nfunction _load_get_snapshot_summary() {\n  return _get_snapshot_summary = _interopRequireDefault(require('./get_snapshot_summary'));\n}\nvar _testPathPatternToRegexp;\nfunction _load_testPathPatternToRegexp() {\n  return _testPathPatternToRegexp = _interopRequireDefault(require('../testPathPatternToRegexp'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar TEST_SUMMARY_THRESHOLD = 20;\nvar NPM_EVENTS = new Set(['prepublish', 'publish', 'postpublish', 'preinstall', 'install', 'postinstall', 'preuninstall', 'uninstall', 'postuninstall', 'preversion', 'version', 'postversion', 'pretest', 'test', 'posttest', 'prestop', 'stop', 'poststop', 'prestart', 'start', 'poststart', 'prerestart', 'restart', 'postrestart']);\nvar SummaryReporter = /*#__PURE__*/function (_default) {\n  _inherits(SummaryReporter, _default);\n  function SummaryReporter(globalConfig) {\n    var _this;\n    _classCallCheck(this, SummaryReporter);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SummaryReporter).call(this));\n    _this._globalConfig = globalConfig;\n    _this._estimatedTime = 0;\n    return _this;\n  }\n\n  // If we write more than one character at a time it is possible that\n  // Node.js exits in the middle of printing the result. This was first observed\n  // in Node.js 0.10 and still persists in Node.js 6.7+.\n  // Let's print the test failure summary character by character which is safer\n  // when hundreds of tests are failing.\n  _createClass(SummaryReporter, [{\n    key: \"_write\",\n    value: function _write(string) {\n      for (var i = 0; i < string.length; i++) {\n        process.stderr.write(string.charAt(i));\n      }\n    }\n  }, {\n    key: \"onRunStart\",\n    value: function onRunStart(aggregatedResults, options) {\n      _get(_getPrototypeOf(SummaryReporter.prototype), \"onRunStart\", this).call(this, aggregatedResults, options);\n      this._estimatedTime = options.estimatedTime;\n    }\n  }, {\n    key: \"onRunComplete\",\n    value: function onRunComplete(contexts, aggregatedResults) {\n      var numTotalTestSuites = aggregatedResults.numTotalTestSuites,\n        testResults = aggregatedResults.testResults,\n        wasInterrupted = aggregatedResults.wasInterrupted;\n      if (numTotalTestSuites) {\n        var lastResult = testResults[testResults.length - 1];\n        // Print a newline if the last test did not fail to line up newlines\n        // similar to when an error would have been thrown in the test.\n        if (!this._globalConfig.verbose && lastResult && !lastResult.numFailingTests && !lastResult.testExecError) {\n          this.log('');\n        }\n        this._printSummary(aggregatedResults, this._globalConfig);\n        this._printSnapshotSummary(aggregatedResults.snapshot, this._globalConfig);\n        if (numTotalTestSuites) {\n          var message = (0, (_utils || _load_utils()).getSummary)(aggregatedResults, {\n            estimatedTime: this._estimatedTime\n          });\n          if (!this._globalConfig.silent) {\n            message += '\\n' + (wasInterrupted ? (_chalk || _load_chalk()).default.bold.red('Test run was interrupted.') : this._getTestSummary(contexts, this._globalConfig));\n          }\n          this.log(message);\n        }\n      }\n    }\n  }, {\n    key: \"_printSnapshotSummary\",\n    value: function _printSnapshotSummary(snapshots, globalConfig) {\n      if (snapshots.added || snapshots.filesRemoved || snapshots.unchecked || snapshots.unmatched || snapshots.updated) {\n        var updateCommand;\n        var event = process.env.npm_lifecycle_event;\n        var prefix = NPM_EVENTS.has(event) ? '' : 'run ';\n        var isYarn = typeof process.env.npm_config_user_agent === 'string' && process.env.npm_config_user_agent.match('yarn') !== null;\n        var client = isYarn ? 'yarn' : 'npm';\n        var scriptUsesJest = typeof process.env.npm_lifecycle_script === 'string' && process.env.npm_lifecycle_script.indexOf('jest') !== -1;\n        if (globalConfig.watch) {\n          updateCommand = 'press `u`';\n        } else if (event && scriptUsesJest) {\n          updateCommand = \"run `\".concat(client + ' ' + prefix + event + (isYarn ? '' : ' --'), \" -u`\");\n        } else {\n          updateCommand = 're-run jest with `-u`';\n        }\n        var snapshotSummary = (0, (_get_snapshot_summary || _load_get_snapshot_summary()).default)(snapshots, globalConfig, updateCommand);\n        snapshotSummary.forEach(this.log);\n        this.log(''); // print empty line\n      }\n    }\n  }, {\n    key: \"_printSummary\",\n    value: function _printSummary(aggregatedResults, globalConfig) {\n      var _this2 = this;\n      // If there were any failing tests and there was a large number of tests\n      // executed, re-print the failing results at the end of execution output.\n      var failedTests = aggregatedResults.numFailedTests;\n      var runtimeErrors = aggregatedResults.numRuntimeErrorTestSuites;\n      if (failedTests + runtimeErrors > 0 && aggregatedResults.numTotalTestSuites > TEST_SUMMARY_THRESHOLD) {\n        this.log((_chalk || _load_chalk()).default.bold('Summary of all failing tests'));\n        aggregatedResults.testResults.forEach(function (testResult) {\n          var failureMessage = testResult.failureMessage;\n          if (failureMessage) {\n            _this2._write((0, (_get_result_header || _load_get_result_header()).default)(testResult, globalConfig) + '\\n' + failureMessage + '\\n');\n          }\n        });\n        this.log(''); // print empty line\n      }\n    }\n  }, {\n    key: \"_getTestSummary\",\n    value: function _getTestSummary(contexts, globalConfig) {\n      var getMatchingTestsInfo = function getMatchingTestsInfo() {\n        var prefix = globalConfig.findRelatedTests ? ' related to files matching ' : ' matching ';\n        return (_chalk || _load_chalk()).default.dim(prefix) + (0, (_testPathPatternToRegexp || _load_testPathPatternToRegexp()).default)(globalConfig.testPathPattern).toString();\n      };\n      var testInfo = '';\n      if (globalConfig.runTestsByPath) {\n        testInfo = (_chalk || _load_chalk()).default.dim(' within paths');\n      } else if (globalConfig.onlyChanged) {\n        testInfo = (_chalk || _load_chalk()).default.dim(' related to changed files');\n      } else if (globalConfig.testPathPattern) {\n        testInfo = getMatchingTestsInfo();\n      }\n      var nameInfo = '';\n      if (globalConfig.runTestsByPath) {\n        nameInfo = ' ' + globalConfig.nonFlagArgs.map(function (p) {\n          return \"\\\"\".concat(p, \"\\\"\");\n        }).join(', ');\n      } else if (globalConfig.testNamePattern) {\n        nameInfo = (_chalk || _load_chalk()).default.dim(' with tests matching ') + \"\\\"\".concat(globalConfig.testNamePattern, \"\\\"\");\n      }\n      var contextInfo = contexts.size > 1 ? (_chalk || _load_chalk()).default.dim(' in ') + contexts.size + (_chalk || _load_chalk()).default.dim(' projects') : '';\n      return (_chalk || _load_chalk()).default.dim('Ran all test suites') + testInfo + nameInfo + contextInfo + (_chalk || _load_chalk()).default.dim('.');\n    }\n  }]);\n  return SummaryReporter;\n}((_base_reporter || _load_base_reporter()).default);\nexports.default = SummaryReporter;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.setArray = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /**\n   * Gets the index associated with `key` in the backing array, if it is already present.\n   */\n  exports.get = void 0;\n  /**\n   * Puts `key` into the backing array, if it is not already present. Returns\n   * the index of the `key` in the backing array.\n   */\n  exports.put = void 0;\n  /**\n   * Pops the last added item out of the SetArray.\n   */\n  exports.pop = void 0;\n  /**\n   * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n   * index of the `key` in the backing array.\n   *\n   * This is designed to allow synchronizing a second array with the contents of the backing array,\n   * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n   * and there are never duplicates.\n   */\n  var SetArray = function SetArray() {\n    _classCallCheck(this, SetArray);\n    this._indexes = {\n      __proto__: null\n    };\n    this.array = [];\n  };\n  (function () {\n    exports.get = function (strarr, key) {\n      return strarr._indexes[key];\n    };\n    exports.put = function (strarr, key) {\n      // The key may or may not be present. If it is present, it's a number.\n      var index = exports.get(strarr, key);\n      if (index !== undefined) return index;\n      var array = strarr.array,\n        indexes = strarr._indexes;\n      return indexes[key] = array.push(key) - 1;\n    };\n    exports.pop = function (strarr) {\n      var array = strarr.array,\n        indexes = strarr._indexes;\n      if (array.length === 0) return;\n      var last = array.pop();\n      indexes[last] = undefined;\n    };\n  })();\n  exports.SetArray = SetArray;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.inspect = exports.inherits = undefined;\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _util = require(\"util\");\nObject.defineProperty(exports, \"inherits\", {\n  enumerable: true,\n  get: function get() {\n    return _util.inherits;\n  }\n});\nObject.defineProperty(exports, \"inspect\", {\n  enumerable: true,\n  get: function get() {\n    return _util.inspect;\n  }\n});\nexports.canCompile = canCompile;\nexports.list = list;\nexports.regexify = regexify;\nexports.arrayify = arrayify;\nexports.booleanify = booleanify;\nexports.shouldIgnore = shouldIgnore;\nvar _escapeRegExp = require(\"lodash/escapeRegExp\");\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\nvar _startsWith = require(\"lodash/startsWith\");\nvar _startsWith2 = _interopRequireDefault(_startsWith);\nvar _minimatch = require(\"minimatch\");\nvar _minimatch2 = _interopRequireDefault(_minimatch);\nvar _includes = require(\"lodash/includes\");\nvar _includes2 = _interopRequireDefault(_includes);\nvar _isRegExp = require(\"lodash/isRegExp\");\nvar _isRegExp2 = _interopRequireDefault(_isRegExp);\nvar _path = require(\"path\");\nvar _path2 = _interopRequireDefault(_path);\nvar _slash = require(\"slash\");\nvar _slash2 = _interopRequireDefault(_slash);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction canCompile(filename, altExts) {\n  var exts = altExts || canCompile.EXTENSIONS;\n  var ext = _path2.default.extname(filename);\n  return (0, _includes2.default)(exts, ext);\n}\ncanCompile.EXTENSIONS = [\".js\", \".jsx\", \".es6\", \".es\"];\nfunction list(val) {\n  if (!val) {\n    return [];\n  } else if (Array.isArray(val)) {\n    return val;\n  } else if (typeof val === \"string\") {\n    return val.split(\",\");\n  } else {\n    return [val];\n  }\n}\nfunction regexify(val) {\n  if (!val) {\n    return new RegExp(/.^/);\n  }\n  if (Array.isArray(val)) {\n    val = new RegExp(val.map(_escapeRegExp2.default).join(\"|\"), \"i\");\n  }\n  if (typeof val === \"string\") {\n    val = (0, _slash2.default)(val);\n    if ((0, _startsWith2.default)(val, \"./\") || (0, _startsWith2.default)(val, \"*/\")) val = val.slice(2);\n    if ((0, _startsWith2.default)(val, \"**/\")) val = val.slice(3);\n    var regex = _minimatch2.default.makeRe(val, {\n      nocase: true\n    });\n    return new RegExp(regex.source.slice(1, -1), \"i\");\n  }\n  if ((0, _isRegExp2.default)(val)) {\n    return val;\n  }\n  throw new TypeError(\"illegal type for regexify\");\n}\nfunction arrayify(val, mapFn) {\n  if (!val) return [];\n  if (typeof val === \"boolean\") return arrayify([val], mapFn);\n  if (typeof val === \"string\") return arrayify(list(val), mapFn);\n  if (Array.isArray(val)) {\n    if (mapFn) val = val.map(mapFn);\n    return val;\n  }\n  return [val];\n}\nfunction booleanify(val) {\n  if (val === \"true\" || val == 1) {\n    return true;\n  }\n  if (val === \"false\" || val == 0 || !val) {\n    return false;\n  }\n  return val;\n}\nfunction shouldIgnore(filename) {\n  var ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var only = arguments[2];\n  filename = filename.replace(/\\\\/g, \"/\");\n  if (only) {\n    for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var pattern = _ref;\n      if (_shouldIgnore(pattern, filename)) return false;\n    }\n    return true;\n  } else if (ignore.length) {\n    for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n      var _pattern = _ref2;\n      if (_shouldIgnore(_pattern, filename)) return true;\n    }\n  }\n  return false;\n}\nfunction _shouldIgnore(pattern, filename) {\n  if (typeof pattern === \"function\") {\n    return pattern(filename);\n  } else {\n    return pattern.test(filename);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
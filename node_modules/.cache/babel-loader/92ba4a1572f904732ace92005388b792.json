{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar Whitespace = function () {\n  function Whitespace(tokens) {\n    (0, _classCallCheck3.default)(this, Whitespace);\n    this.tokens = tokens;\n    this.used = {};\n  }\n  Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {\n    var startToken = void 0;\n    var endToken = void 0;\n    var tokens = this.tokens;\n    var index = this._findToken(function (token) {\n      return token.start - node.start;\n    }, 0, tokens.length);\n    if (index >= 0) {\n      while (index && node.start === tokens[index - 1].start) {\n        --index;\n      }\n      startToken = tokens[index - 1];\n      endToken = tokens[index];\n    }\n    return this._getNewlinesBetween(startToken, endToken);\n  };\n  Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {\n    var startToken = void 0;\n    var endToken = void 0;\n    var tokens = this.tokens;\n    var index = this._findToken(function (token) {\n      return token.end - node.end;\n    }, 0, tokens.length);\n    if (index >= 0) {\n      while (index && node.end === tokens[index - 1].end) {\n        --index;\n      }\n      startToken = tokens[index];\n      endToken = tokens[index + 1];\n      if (endToken && endToken.type.label === \",\") endToken = tokens[index + 2];\n    }\n    if (endToken && endToken.type.label === \"eof\") {\n      return 1;\n    } else {\n      return this._getNewlinesBetween(startToken, endToken);\n    }\n  };\n  Whitespace.prototype._getNewlinesBetween = function _getNewlinesBetween(startToken, endToken) {\n    if (!endToken || !endToken.loc) return 0;\n    var start = startToken ? startToken.loc.end.line : 1;\n    var end = endToken.loc.start.line;\n    var lines = 0;\n    for (var line = start; line < end; line++) {\n      if (typeof this.used[line] === \"undefined\") {\n        this.used[line] = true;\n        lines++;\n      }\n    }\n    return lines;\n  };\n  Whitespace.prototype._findToken = function _findToken(test, start, end) {\n    if (start >= end) return -1;\n    var middle = start + end >>> 1;\n    var match = test(this.tokens[middle]);\n    if (match < 0) {\n      return this._findToken(test, middle + 1, end);\n    } else if (match > 0) {\n      return this._findToken(test, start, middle);\n    } else if (match === 0) {\n      return middle;\n    }\n    return -1;\n  };\n  return Whitespace;\n}();\nexports.default = Whitespace;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
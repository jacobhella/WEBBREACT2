{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Var = exports.User = exports.Statement = exports.SpreadProperty = exports.Scope = exports.RestProperty = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = exports.Referenced = exports.Pure = exports.NumericLiteralTypeAnnotation = exports.Generated = exports.ForAwaitStatement = exports.Flow = exports.Expression = exports.ExistentialTypeParam = exports.BlockScoped = exports.BindingIdentifier = void 0;\nvar ReferencedIdentifier = [\"Identifier\", \"JSXIdentifier\"];\nexports.ReferencedIdentifier = ReferencedIdentifier;\nvar ReferencedMemberExpression = [\"MemberExpression\"];\nexports.ReferencedMemberExpression = ReferencedMemberExpression;\nvar BindingIdentifier = [\"Identifier\"];\nexports.BindingIdentifier = BindingIdentifier;\nvar Statement = [\"Statement\"];\nexports.Statement = Statement;\nvar Expression = [\"Expression\"];\nexports.Expression = Expression;\nvar Scope = [\"Scopable\", \"Pattern\"];\nexports.Scope = Scope;\nvar Referenced = null;\nexports.Referenced = Referenced;\nvar BlockScoped = null;\nexports.BlockScoped = BlockScoped;\nvar Var = [\"VariableDeclaration\"];\nexports.Var = Var;\nvar User = null;\nexports.User = User;\nvar Generated = null;\nexports.Generated = Generated;\nvar Pure = null;\nexports.Pure = Pure;\nvar Flow = [\"Flow\", \"ImportDeclaration\", \"ExportDeclaration\", \"ImportSpecifier\"];\nexports.Flow = Flow;\nvar RestProperty = [\"RestElement\"];\nexports.RestProperty = RestProperty;\nvar SpreadProperty = [\"RestElement\"];\nexports.SpreadProperty = SpreadProperty;\nvar ExistentialTypeParam = [\"ExistsTypeAnnotation\"];\nexports.ExistentialTypeParam = ExistentialTypeParam;\nvar NumericLiteralTypeAnnotation = [\"NumberLiteralTypeAnnotation\"];\nexports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;\nvar ForAwaitStatement = [\"ForOfStatement\"];\nexports.ForAwaitStatement = ForAwaitStatement;","map":null,"metadata":{},"sourceType":"script"}
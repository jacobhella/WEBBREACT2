{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValidator = void 0;\nvar _findSuggestion = require(\"./find-suggestion\");\nvar OptionValidator = /*#__PURE__*/function () {\n  function OptionValidator(descriptor) {\n    _classCallCheck(this, OptionValidator);\n    this.descriptor = descriptor;\n  }\n  _createClass(OptionValidator, [{\n    key: \"validateTopLevelOptions\",\n    value: function validateTopLevelOptions(options, TopLevelOptionShape) {\n      var validOptionNames = Object.keys(TopLevelOptionShape);\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var option = _Object$keys[_i];\n        if (!validOptionNames.includes(option)) {\n          throw new Error(this.formatMessage(\"'\".concat(option, \"' is not a valid top-level option.\\n- Did you mean '\").concat((0, _findSuggestion.findSuggestion)(option, validOptionNames), \"'?\")));\n        }\n      }\n    }\n  }, {\n    key: \"validateBooleanOption\",\n    value: function validateBooleanOption(name, value, defaultValue) {\n      if (value === undefined) {\n        return defaultValue;\n      } else {\n        this.invariant(typeof value === \"boolean\", \"'\".concat(name, \"' option must be a boolean.\"));\n      }\n      return value;\n    }\n  }, {\n    key: \"validateStringOption\",\n    value: function validateStringOption(name, value, defaultValue) {\n      if (value === undefined) {\n        return defaultValue;\n      } else {\n        this.invariant(typeof value === \"string\", \"'\".concat(name, \"' option must be a string.\"));\n      }\n      return value;\n    }\n  }, {\n    key: \"invariant\",\n    value: function invariant(condition, message) {\n      if (!condition) {\n        throw new Error(this.formatMessage(message));\n      }\n    }\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(message) {\n      return \"\".concat(this.descriptor, \": \").concat(message);\n    }\n  }]);\n  return OptionValidator;\n}();\nexports.OptionValidator = OptionValidator;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluate = evaluate;\nexports.evaluateTruthy = evaluateTruthy;\nvar VALID_CALLEES = [\"String\", \"Number\", \"Math\"];\nvar INVALID_METHODS = [\"random\"];\nfunction isValidCallee(val) {\n  return VALID_CALLEES.includes(val);\n}\nfunction isInvalidMethod(val) {\n  return INVALID_METHODS.includes(val);\n}\nfunction evaluateTruthy() {\n  var res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\nfunction deopt(path, state) {\n  if (!state.confident) return;\n  state.deoptPath = path;\n  state.confident = false;\n}\nfunction evaluateCached(path, state) {\n  var node = path.node;\n  var seen = state.seen;\n  if (seen.has(node)) {\n    var existing = seen.get(node);\n    if (existing.resolved) {\n      return existing.value;\n    } else {\n      deopt(path, state);\n      return;\n    }\n  } else {\n    var item = {\n      resolved: false\n    };\n    seen.set(node, item);\n    var val = _evaluate(path, state);\n    if (state.confident) {\n      item.resolved = true;\n      item.value = val;\n    }\n    return val;\n  }\n}\nfunction _evaluate(path, state) {\n  if (!state.confident) return;\n  if (path.isSequenceExpression()) {\n    var exprs = path.get(\"expressions\");\n    return evaluateCached(exprs[exprs.length - 1], state);\n  }\n  if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {\n    return path.node.value;\n  }\n  if (path.isNullLiteral()) {\n    return null;\n  }\n  if (path.isTemplateLiteral()) {\n    return evaluateQuasis(path, path.node.quasis, state);\n  }\n  if (path.isTaggedTemplateExpression() && path.get(\"tag\").isMemberExpression()) {\n    var object = path.get(\"tag.object\");\n    var name = object.node.name;\n    var property = path.get(\"tag.property\");\n    if (object.isIdentifier() && name === \"String\" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === \"raw\") {\n      return evaluateQuasis(path, path.node.quasi.quasis, state, true);\n    }\n  }\n  if (path.isConditionalExpression()) {\n    var testResult = evaluateCached(path.get(\"test\"), state);\n    if (!state.confident) return;\n    if (testResult) {\n      return evaluateCached(path.get(\"consequent\"), state);\n    } else {\n      return evaluateCached(path.get(\"alternate\"), state);\n    }\n  }\n  if (path.isExpressionWrapper()) {\n    return evaluateCached(path.get(\"expression\"), state);\n  }\n  if (path.isMemberExpression() && !path.parentPath.isCallExpression({\n    callee: path.node\n  })) {\n    var _property = path.get(\"property\");\n    var _object = path.get(\"object\");\n    if (_object.isLiteral()) {\n      var value = _object.node.value;\n      var type = typeof value;\n      var key = null;\n      if (path.node.computed) {\n        key = evaluateCached(_property, state);\n        if (!state.confident) return;\n      } else if (_property.isIdentifier()) {\n        key = _property.node.name;\n      }\n      if ((type === \"number\" || type === \"string\") && key != null && (typeof key === \"number\" || typeof key === \"string\")) {\n        return value[key];\n      }\n    }\n  }\n  if (path.isReferencedIdentifier()) {\n    var binding = path.scope.getBinding(path.node.name);\n    if (binding && binding.constantViolations.length > 0) {\n      return deopt(binding.path, state);\n    }\n    if (binding && path.node.start < binding.path.node.end) {\n      return deopt(binding.path, state);\n    }\n    if (binding != null && binding.hasValue) {\n      return binding.value;\n    } else {\n      if (path.node.name === \"undefined\") {\n        return binding ? deopt(binding.path, state) : undefined;\n      } else if (path.node.name === \"Infinity\") {\n        return binding ? deopt(binding.path, state) : Infinity;\n      } else if (path.node.name === \"NaN\") {\n        return binding ? deopt(binding.path, state) : NaN;\n      }\n      var resolved = path.resolve();\n      if (resolved === path) {\n        return deopt(path, state);\n      } else {\n        return evaluateCached(resolved, state);\n      }\n    }\n  }\n  if (path.isUnaryExpression({\n    prefix: true\n  })) {\n    if (path.node.operator === \"void\") {\n      return undefined;\n    }\n    var argument = path.get(\"argument\");\n    if (path.node.operator === \"typeof\" && (argument.isFunction() || argument.isClass())) {\n      return \"function\";\n    }\n    var arg = evaluateCached(argument, state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case \"!\":\n        return !arg;\n      case \"+\":\n        return +arg;\n      case \"-\":\n        return -arg;\n      case \"~\":\n        return ~arg;\n      case \"typeof\":\n        return typeof arg;\n    }\n  }\n  if (path.isArrayExpression()) {\n    var arr = [];\n    var elems = path.get(\"elements\");\n    var _iterator = _createForOfIteratorHelper(elems),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var elem = _step.value;\n        var elemValue = elem.evaluate();\n        if (elemValue.confident) {\n          arr.push(elemValue.value);\n        } else {\n          return deopt(elemValue.deopt, state);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return arr;\n  }\n  if (path.isObjectExpression()) {\n    var obj = {};\n    var props = path.get(\"properties\");\n    var _iterator2 = _createForOfIteratorHelper(props),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (prop.isObjectMethod() || prop.isSpreadElement()) {\n          return deopt(prop, state);\n        }\n        var keyPath = prop.get(\"key\");\n        var _key = void 0;\n        if (prop.node.computed) {\n          _key = keyPath.evaluate();\n          if (!_key.confident) {\n            return deopt(_key.deopt, state);\n          }\n          _key = _key.value;\n        } else if (keyPath.isIdentifier()) {\n          _key = keyPath.node.name;\n        } else {\n          _key = keyPath.node.value;\n        }\n        var valuePath = prop.get(\"value\");\n        var _value = valuePath.evaluate();\n        if (!_value.confident) {\n          return deopt(_value.deopt, state);\n        }\n        _value = _value.value;\n        obj[_key] = _value;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return obj;\n  }\n  if (path.isLogicalExpression()) {\n    var wasConfident = state.confident;\n    var left = evaluateCached(path.get(\"left\"), state);\n    var leftConfident = state.confident;\n    state.confident = wasConfident;\n    var right = evaluateCached(path.get(\"right\"), state);\n    var rightConfident = state.confident;\n    switch (path.node.operator) {\n      case \"||\":\n        state.confident = leftConfident && (!!left || rightConfident);\n        if (!state.confident) return;\n        return left || right;\n      case \"&&\":\n        state.confident = leftConfident && (!left || rightConfident);\n        if (!state.confident) return;\n        return left && right;\n      case \"??\":\n        state.confident = leftConfident && (left != null || rightConfident);\n        if (!state.confident) return;\n        return left != null ? left : right;\n    }\n  }\n  if (path.isBinaryExpression()) {\n    var _left = evaluateCached(path.get(\"left\"), state);\n    if (!state.confident) return;\n    var _right = evaluateCached(path.get(\"right\"), state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case \"-\":\n        return _left - _right;\n      case \"+\":\n        return _left + _right;\n      case \"/\":\n        return _left / _right;\n      case \"*\":\n        return _left * _right;\n      case \"%\":\n        return _left % _right;\n      case \"**\":\n        return Math.pow(_left, _right);\n      case \"<\":\n        return _left < _right;\n      case \">\":\n        return _left > _right;\n      case \"<=\":\n        return _left <= _right;\n      case \">=\":\n        return _left >= _right;\n      case \"==\":\n        return _left == _right;\n      case \"!=\":\n        return _left != _right;\n      case \"===\":\n        return _left === _right;\n      case \"!==\":\n        return _left !== _right;\n      case \"|\":\n        return _left | _right;\n      case \"&\":\n        return _left & _right;\n      case \"^\":\n        return _left ^ _right;\n      case \"<<\":\n        return _left << _right;\n      case \">>\":\n        return _left >> _right;\n      case \">>>\":\n        return _left >>> _right;\n    }\n  }\n  if (path.isCallExpression()) {\n    var callee = path.get(\"callee\");\n    var context;\n    var func;\n    if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && isValidCallee(callee.node.name)) {\n      func = global[callee.node.name];\n    }\n    if (callee.isMemberExpression()) {\n      var _object2 = callee.get(\"object\");\n      var _property2 = callee.get(\"property\");\n      if (_object2.isIdentifier() && _property2.isIdentifier() && isValidCallee(_object2.node.name) && !isInvalidMethod(_property2.node.name)) {\n        context = global[_object2.node.name];\n        func = context[_property2.node.name];\n      }\n      if (_object2.isLiteral() && _property2.isIdentifier()) {\n        var _type = typeof _object2.node.value;\n        if (_type === \"string\" || _type === \"number\") {\n          context = _object2.node.value;\n          func = context[_property2.node.name];\n        }\n      }\n    }\n    if (func) {\n      var args = path.get(\"arguments\").map(function (arg) {\n        return evaluateCached(arg, state);\n      });\n      if (!state.confident) return;\n      return func.apply(context, args);\n    }\n  }\n  deopt(path, state);\n}\nfunction evaluateQuasis(path, quasis, state) {\n  var raw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var str = \"\";\n  var i = 0;\n  var exprs = path.isTemplateLiteral() ? path.get(\"expressions\") : path.get(\"quasi.expressions\");\n  var _iterator3 = _createForOfIteratorHelper(quasis),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var elem = _step3.value;\n      if (!state.confident) break;\n      str += raw ? elem.value.raw : elem.value.cooked;\n      var expr = exprs[i++];\n      if (expr) str += String(evaluateCached(expr, state));\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  if (!state.confident) return;\n  return str;\n}\nfunction evaluate() {\n  var state = {\n    confident: true,\n    deoptPath: null,\n    seen: new Map()\n  };\n  var value = evaluateCached(this, state);\n  if (!state.confident) value = undefined;\n  return {\n    confident: state.confident,\n    deopt: state.deoptPath,\n    value: value\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = defaultResolver;\nvar _browserResolve;\nfunction _load_browserResolve() {\n  return _browserResolve = _interopRequireDefault(require('browser-resolve'));\n}\nvar _fs;\nfunction _load_fs() {\n  return _fs = _interopRequireDefault(require('fs'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _is_builtin_module;\nfunction _load_is_builtin_module() {\n  return _is_builtin_module = _interopRequireDefault(require('./is_builtin_module'));\n}\nvar _node_modules_paths;\nfunction _load_node_modules_paths() {\n  return _node_modules_paths = _interopRequireDefault(require('./node_modules_paths'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction defaultResolver(path, options) {\n  var resolve = options.browser ? (_browserResolve || _load_browserResolve()).default.sync : resolveSync;\n  return resolve(path, {\n    basedir: options.basedir,\n    extensions: options.extensions,\n    moduleDirectory: options.moduleDirectory,\n    paths: options.paths,\n    rootDir: options.rootDir\n  });\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar REGEX_RELATIVE_IMPORT = /^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/;\nfunction resolveSync(target, options) {\n  var basedir = options.basedir;\n  var extensions = options.extensions || ['.js'];\n  var paths = options.paths || [];\n  if (REGEX_RELATIVE_IMPORT.test(target)) {\n    // resolve relative import\n    var resolveTarget = (_path || _load_path()).default.resolve(basedir, target);\n    var result = tryResolve(resolveTarget);\n    if (result) {\n      return result;\n    }\n  } else {\n    // otherwise search for node_modules\n    var dirs = (0, (_node_modules_paths || _load_node_modules_paths()).default)(basedir, {\n      moduleDirectory: options.moduleDirectory,\n      paths: paths\n    });\n    for (var i = 0; i < dirs.length; i++) {\n      var _resolveTarget = (_path || _load_path()).default.join(dirs[i], target);\n      var _result = tryResolve(_resolveTarget);\n      if (_result) {\n        return _result;\n      }\n    }\n  }\n  if ((0, (_is_builtin_module || _load_is_builtin_module()).default)(target)) {\n    return target;\n  }\n  var err = new Error(\"Cannot find module '\" + target + \"' from '\" + basedir + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n\n  /*\n   * contextual helper functions\n   */\n  function tryResolve(name) {\n    var dir = (_path || _load_path()).default.dirname(name);\n    var result;\n    if (isDirectory(dir)) {\n      result = resolveAsFile(name) || resolveAsDirectory(name);\n    }\n    if (result) {\n      // Dereference symlinks to ensure we don't create a separate\n      // module instance depending on how it was referenced.\n      result = (_fs || _load_fs()).default.realpathSync(result);\n    }\n    return result;\n  }\n  function resolveAsFile(name) {\n    if (isFile(name)) {\n      return name;\n    }\n    for (var _i = 0; _i < extensions.length; _i++) {\n      var file = name + extensions[_i];\n      if (isFile(file)) {\n        return file;\n      }\n    }\n    return undefined;\n  }\n  function resolveAsDirectory(name) {\n    if (!isDirectory(name)) {\n      return undefined;\n    }\n    var pkgfile = (_path || _load_path()).default.join(name, 'package.json');\n    var pkgmain;\n    try {\n      var body = (_fs || _load_fs()).default.readFileSync(pkgfile, 'utf8');\n      pkgmain = JSON.parse(body).main;\n    } catch (e) {}\n    if (pkgmain && !isCurrentDirectory(pkgmain)) {\n      var _resolveTarget2 = (_path || _load_path()).default.resolve(name, pkgmain);\n      var _result2 = tryResolve(_resolveTarget2);\n      if (_result2) {\n        return _result2;\n      }\n    }\n    return resolveAsFile((_path || _load_path()).default.join(name, 'index'));\n  }\n}\n\n/*\n * helper functions\n */\nfunction isFile(file) {\n  var result;\n  try {\n    var stat = (_fs || _load_fs()).default.statSync(file);\n    result = stat.isFile() || stat.isFIFO();\n  } catch (e) {\n    if (!(e && e.code === 'ENOENT')) {\n      throw e;\n    }\n    result = false;\n  }\n  return result;\n}\nfunction isDirectory(dir) {\n  var result;\n  try {\n    var stat = (_fs || _load_fs()).default.statSync(dir);\n    result = stat.isDirectory();\n  } catch (e) {\n    if (!(e && (e.code === 'ENOENT' || e.code === 'ENOTDIR'))) {\n      throw e;\n    }\n    result = false;\n  }\n  return result;\n}\nfunction isCurrentDirectory(testPath) {\n  return (_path || _load_path()).default.resolve('.') === (_path || _load_path()).default.resolve(testPath);\n}","map":null,"metadata":{},"sourceType":"script"}
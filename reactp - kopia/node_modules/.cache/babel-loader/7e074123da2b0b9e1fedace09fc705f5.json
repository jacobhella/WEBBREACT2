{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _stringLength;\nfunction _load_stringLength() {\n  return _stringLength = _interopRequireDefault(require('string-length'));\n}\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar RUNNING_TEXT = ' RUNS ';\nvar RUNNING = (_chalk || _load_chalk()).default.reset.inverse.yellow.bold(RUNNING_TEXT) + ' ';\n\n/**\n * This class is a perf optimization for sorting the list of currently\n * running tests. It tries to keep tests in the same positions without\n * shifting the whole list.\n */\nvar CurrentTestList = /*#__PURE__*/function () {\n  function CurrentTestList() {\n    _classCallCheck(this, CurrentTestList);\n    this._array = [];\n  }\n  _createClass(CurrentTestList, [{\n    key: \"add\",\n    value: function add(testPath, config) {\n      var index = this._array.indexOf(null);\n      var record = {\n        config: config,\n        testPath: testPath\n      };\n      if (index !== -1) {\n        this._array[index] = record;\n      } else {\n        this._array.push(record);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(testPath) {\n      var record = this._array.find(function (record) {\n        return record && record.testPath === testPath;\n      });\n      this._array[this._array.indexOf(record || null)] = null;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._array;\n    }\n  }]);\n  return CurrentTestList;\n}();\n/**\n * A class that generates the CLI status of currently running tests\n * and also provides an ANSI escape sequence to remove status lines\n * from the terminal.\n */\nvar Status = /*#__PURE__*/function () {\n  function Status() {\n    _classCallCheck(this, Status);\n    this._cache = null;\n    this._currentTests = new CurrentTestList();\n    this._done = false;\n    this._emitScheduled = false;\n    this._estimatedTime = 0;\n    this._height = 0;\n    this._showStatus = false;\n  }\n  _createClass(Status, [{\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this._callback = callback;\n    }\n  }, {\n    key: \"runStarted\",\n    value: function runStarted(aggregatedResults, options) {\n      var _this = this;\n      this._estimatedTime = options && options.estimatedTime || 0;\n      this._showStatus = options && options.showStatus;\n      this._interval = setInterval(function () {\n        return _this._tick();\n      }, 1000);\n      this._aggregatedResults = aggregatedResults;\n      this._debouncedEmit();\n    }\n  }, {\n    key: \"runFinished\",\n    value: function runFinished() {\n      this._done = true;\n      clearInterval(this._interval);\n      this._emit();\n    }\n  }, {\n    key: \"testStarted\",\n    value: function testStarted(testPath, config) {\n      this._currentTests.add(testPath, config);\n      if (!this._showStatus) {\n        this._emit();\n      } else {\n        this._debouncedEmit();\n      }\n    }\n  }, {\n    key: \"testFinished\",\n    value: function testFinished(config, testResult, aggregatedResults) {\n      var testFilePath = testResult.testFilePath;\n      this._aggregatedResults = aggregatedResults;\n      this._currentTests.delete(testFilePath);\n      this._debouncedEmit();\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (this._cache) {\n        return this._cache;\n      }\n      if (this._done) {\n        return {\n          clear: '',\n          content: ''\n        };\n      }\n\n      // $FlowFixMe\n      var width = process.stdout.columns;\n      var content = '\\n';\n      this._currentTests.get().forEach(function (record) {\n        if (record) {\n          var config = record.config,\n            testPath = record.testPath;\n          var projectDisplayName = config.displayName ? (0, (_utils || _load_utils()).printDisplayName)(config) + ' ' : '';\n          var prefix = RUNNING + projectDisplayName;\n          content += (0, (_utils || _load_utils()).wrapAnsiString)(prefix + (0, (_utils || _load_utils()).trimAndFormatPath)((0, (_stringLength || _load_stringLength()).default)(prefix), config, testPath, width), width) + '\\n';\n        }\n      });\n      if (this._showStatus && this._aggregatedResults) {\n        content += '\\n' + (0, (_utils || _load_utils()).getSummary)(this._aggregatedResults, {\n          estimatedTime: this._estimatedTime,\n          roundTime: true,\n          width: width\n        });\n      }\n      var height = 0;\n      for (var i = 0; i < content.length; i++) {\n        if (content[i] === '\\n') {\n          height++;\n        }\n      }\n      var clear = '\\r\\x1B[K\\r\\x1B[1A'.repeat(height);\n      return this._cache = {\n        clear: clear,\n        content: content\n      };\n    }\n  }, {\n    key: \"_emit\",\n    value: function _emit() {\n      this._cache = null;\n      this._lastUpdated = Date.now();\n      this._callback();\n    }\n  }, {\n    key: \"_debouncedEmit\",\n    value: function _debouncedEmit() {\n      var _this2 = this;\n      if (!this._emitScheduled) {\n        // Perf optimization to avoid two separate renders When\n        // one test finishes and another test starts executing.\n        this._emitScheduled = true;\n        setTimeout(function () {\n          _this2._emit();\n          _this2._emitScheduled = false;\n        }, 100);\n      }\n    }\n  }, {\n    key: \"_tick\",\n    value: function _tick() {\n      this._debouncedEmit();\n    }\n  }]);\n  return Status;\n}();\nexports.default = Status;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.descriptions = exports.defaults = exports.replaceRootDirInPath = exports.deprecationEntries = exports.normalize = exports.isJSONString = exports.getTestEnvironment = undefined;\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\nObject.defineProperty(exports, 'getTestEnvironment', {\n  enumerable: true,\n  get: function get() {\n    return (_utils || _load_utils()).getTestEnvironment;\n  }\n});\nObject.defineProperty(exports, 'isJSONString', {\n  enumerable: true,\n  get: function get() {\n    return (_utils || _load_utils()).isJSONString;\n  }\n});\nvar _normalize2;\nfunction _load_normalize() {\n  return _normalize2 = require('./normalize');\n}\nObject.defineProperty(exports, 'normalize', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_normalize2 || _load_normalize()).default;\n  }\n});\nvar _Deprecated;\nfunction _load_Deprecated() {\n  return _Deprecated = require('./Deprecated');\n}\nObject.defineProperty(exports, 'deprecationEntries', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Deprecated || _load_Deprecated()).default;\n  }\n});\nObject.defineProperty(exports, 'replaceRootDirInPath', {\n  enumerable: true,\n  get: function get() {\n    return (_utils || _load_utils()).replaceRootDirInPath;\n  }\n});\nvar _Defaults;\nfunction _load_Defaults() {\n  return _Defaults = require('./Defaults');\n}\nObject.defineProperty(exports, 'defaults', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Defaults || _load_Defaults()).default;\n  }\n});\nvar _Descriptions;\nfunction _load_Descriptions() {\n  return _Descriptions = require('./Descriptions');\n}\nObject.defineProperty(exports, 'descriptions', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Descriptions || _load_Descriptions()).default;\n  }\n});\nexports.readConfig = readConfig;\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _normalize3;\nfunction _load_normalize2() {\n  return _normalize3 = _interopRequireDefault(require('./normalize'));\n}\nvar _resolveConfigPath;\nfunction _load_resolveConfigPath() {\n  return _resolveConfigPath = _interopRequireDefault(require('./resolveConfigPath'));\n}\nvar _readConfigFileAndSetRootDir;\nfunction _load_readConfigFileAndSetRootDir() {\n  return _readConfigFileAndSetRootDir = _interopRequireDefault(require('./readConfigFileAndSetRootDir'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readConfig(argv, packageRootOrConfig,\n// Whether it needs to look into `--config` arg passed to CLI.\n// It only used to read initial config. If the initial config contains\n// `project` property, we don't want to read `--config` value and rather\nskipArgvConfigOption, parentConfigPath) {\n  var rawOptions;\n  var configPath = null;\n  if (typeof packageRootOrConfig !== 'string') {\n    if (parentConfigPath) {\n      var parentConfigDirname = (_path || _load_path()).default.dirname(parentConfigPath);\n      rawOptions = packageRootOrConfig;\n      rawOptions.rootDir = rawOptions.rootDir ? (0, (_utils || _load_utils()).replaceRootDirInPath)(parentConfigDirname, rawOptions.rootDir) : parentConfigDirname;\n    } else {\n      throw new Error('Jest: Cannot use configuration as an object without a file path.');\n    }\n  } else if ((0, (_utils || _load_utils()).isJSONString)(argv.config)) {\n    // A JSON string was passed to `--config` argument and we can parse it\n    // and use as is.\n    var config;\n    try {\n      config = JSON.parse(argv.config);\n    } catch (e) {\n      throw new Error('There was an error while parsing the `--config` argument as a JSON string.');\n    }\n\n    // NOTE: we might need to resolve this dir to an absolute path in the future\n    config.rootDir = config.rootDir || packageRootOrConfig;\n    rawOptions = config;\n    // A string passed to `--config`, which is either a direct path to the config\n    // or a path to directory containing `package.json` or `jest.config.js`\n  } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n    configPath = (0, (_resolveConfigPath || _load_resolveConfigPath()).default)(argv.config, process.cwd());\n    rawOptions = (0, (_readConfigFileAndSetRootDir || _load_readConfigFileAndSetRootDir()).default)(configPath);\n  } else {\n    // Otherwise just try to find config in the current rootDir.\n    configPath = (0, (_resolveConfigPath || _load_resolveConfigPath()).default)(packageRootOrConfig, process.cwd());\n    rawOptions = (0, (_readConfigFileAndSetRootDir || _load_readConfigFileAndSetRootDir()).default)(configPath);\n  }\n  var _normalize = (0, (_normalize3 || _load_normalize2()).default)(rawOptions, argv);\n  var options = _normalize.options,\n    hasDeprecationWarnings = _normalize.hasDeprecationWarnings;\n  var _getConfigs = getConfigs(options);\n  var globalConfig = _getConfigs.globalConfig,\n    projectConfig = _getConfigs.projectConfig;\n  return {\n    configPath: configPath,\n    globalConfig: globalConfig,\n    hasDeprecationWarnings: hasDeprecationWarnings,\n    projectConfig: projectConfig\n  };\n}\nvar getConfigs = function getConfigs(options) {\n  return {\n    globalConfig: Object.freeze({\n      bail: options.bail,\n      changedFilesWithAncestor: options.changedFilesWithAncestor,\n      changedSince: options.changedSince,\n      collectCoverage: options.collectCoverage,\n      collectCoverageFrom: options.collectCoverageFrom,\n      collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,\n      coverageDirectory: options.coverageDirectory,\n      coverageReporters: options.coverageReporters,\n      coverageThreshold: options.coverageThreshold,\n      detectLeaks: options.detectLeaks,\n      detectOpenHandles: options.detectOpenHandles,\n      enabledTestsMap: options.enabledTestsMap,\n      errorOnDeprecated: options.errorOnDeprecated,\n      expand: options.expand,\n      filter: options.filter,\n      findRelatedTests: options.findRelatedTests,\n      forceExit: options.forceExit,\n      globalSetup: options.globalSetup,\n      globalTeardown: options.globalTeardown,\n      json: options.json,\n      lastCommit: options.lastCommit,\n      listTests: options.listTests,\n      logHeapUsage: options.logHeapUsage,\n      maxWorkers: options.maxWorkers,\n      noSCM: undefined,\n      noStackTrace: options.noStackTrace,\n      nonFlagArgs: options.nonFlagArgs,\n      notify: options.notify,\n      notifyMode: options.notifyMode,\n      onlyChanged: options.onlyChanged,\n      onlyFailures: options.onlyFailures,\n      outputFile: options.outputFile,\n      passWithNoTests: options.passWithNoTests,\n      projects: options.projects,\n      replname: options.replname,\n      reporters: options.reporters,\n      rootDir: options.rootDir,\n      runTestsByPath: options.runTestsByPath,\n      silent: options.silent,\n      skipFilter: options.skipFilter,\n      testFailureExitCode: options.testFailureExitCode,\n      testNamePattern: options.testNamePattern,\n      testPathPattern: options.testPathPattern,\n      testResultsProcessor: options.testResultsProcessor,\n      updateSnapshot: options.updateSnapshot,\n      useStderr: options.useStderr,\n      verbose: options.verbose,\n      watch: options.watch,\n      watchAll: options.watchAll,\n      watchPlugins: options.watchPlugins,\n      watchman: options.watchman\n    }),\n    projectConfig: Object.freeze({\n      automock: options.automock,\n      browser: options.browser,\n      cache: options.cache,\n      cacheDirectory: options.cacheDirectory,\n      clearMocks: options.clearMocks,\n      coveragePathIgnorePatterns: options.coveragePathIgnorePatterns,\n      cwd: options.cwd,\n      detectLeaks: options.detectLeaks,\n      detectOpenHandles: options.detectOpenHandles,\n      displayName: options.displayName,\n      errorOnDeprecated: options.errorOnDeprecated,\n      filter: options.filter,\n      forceCoverageMatch: options.forceCoverageMatch,\n      globals: options.globals,\n      haste: options.haste,\n      moduleDirectories: options.moduleDirectories,\n      moduleFileExtensions: options.moduleFileExtensions,\n      moduleLoader: options.moduleLoader,\n      moduleNameMapper: options.moduleNameMapper,\n      modulePathIgnorePatterns: options.modulePathIgnorePatterns,\n      modulePaths: options.modulePaths,\n      name: options.name,\n      prettierPath: options.prettierPath,\n      resetMocks: options.resetMocks,\n      resetModules: options.resetModules,\n      resolver: options.resolver,\n      restoreMocks: options.restoreMocks,\n      rootDir: options.rootDir,\n      roots: options.roots,\n      runner: options.runner,\n      setupFiles: options.setupFiles,\n      setupTestFrameworkScriptFile: options.setupTestFrameworkScriptFile,\n      skipFilter: options.skipFilter,\n      skipNodeResolution: options.skipNodeResolution,\n      snapshotSerializers: options.snapshotSerializers,\n      testEnvironment: options.testEnvironment,\n      testEnvironmentOptions: options.testEnvironmentOptions,\n      testLocationInResults: options.testLocationInResults,\n      testMatch: options.testMatch,\n      testPathIgnorePatterns: options.testPathIgnorePatterns,\n      testRegex: options.testRegex,\n      testRunner: options.testRunner,\n      testURL: options.testURL,\n      timers: options.timers,\n      transform: options.transform,\n      transformIgnorePatterns: options.transformIgnorePatterns,\n      unmockedModulePathPatterns: options.unmockedModulePathPatterns,\n      watchPathIgnorePatterns: options.watchPathIgnorePatterns\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}
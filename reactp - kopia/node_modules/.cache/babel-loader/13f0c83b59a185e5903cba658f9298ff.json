{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar color = require('kleur');\nvar Prompt = require('./prompt');\nvar _require = require('sisteransi');\nvar cursor = _require.cursor,\n  erase = _require.erase;\nvar _require2 = require('../util');\nvar style = _require2.style,\n  clear = _require2.clear;\nvar isNumber = /[0-9]/;\nvar isValidChar = /\\.|-/;\nvar isDef = function isDef(any) {\n  return any !== undefined;\n};\nvar round = function round(number, precision) {\n  var factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n};\n\n/**\n * NumberPrompt Base Element\n * @param {Object} opts Options\n * @param {String} opts.message Message\n * @param {String} [opts.style='default'] Render style\n * @param {Number} [opts.initial] Default value\n * @param {Number} [opts.max=+Infinity] Max value\n * @param {Number} [opts.min=-Infinity] Min value\n * @param {Boolean} [opts.float=false] Parse input as floats\n * @param {Number} [opts.round=2] Round floats to x decimals\n * @param {Number} [opts.increment=1] Number to increment by when using arrow-keys\n */\nvar NumberPrompt = /*#__PURE__*/function (_Prompt) {\n  _inherits(NumberPrompt, _Prompt);\n  function NumberPrompt() {\n    var _this;\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, NumberPrompt);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberPrompt).call(this, opts));\n    _this.transform = style.render(opts.style);\n    _this.msg = opts.message;\n    _this.initial = isDef(opts.initial) ? opts.initial : '';\n    _this.float = !!opts.float;\n    _this.round = opts.round || 2;\n    _this.inc = opts.increment || 1;\n    _this.min = isDef(opts.min) ? opts.min : -Infinity;\n    _this.max = isDef(opts.max) ? opts.max : Infinity;\n    _this.value = '';\n    _this.typed = '';\n    _this.lastHit = 0;\n    _this.render();\n    return _this;\n  }\n  _createClass(NumberPrompt, [{\n    key: \"parse\",\n    value: function parse(x) {\n      return this.float ? parseFloat(x) : parseInt(x);\n    }\n  }, {\n    key: \"valid\",\n    value: function valid(c) {\n      return c === '-' || c === '.' && this.float || isNumber.test(c);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.typed = '';\n      this.value = '';\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      var x = this.value;\n      this.value = x !== '' ? x : this.initial;\n      this.done = this.aborted = true;\n      this.fire();\n      this.render();\n      this.out.write('\\n');\n      this.close();\n    }\n  }, {\n    key: \"submit\",\n    value: function submit() {\n      var x = this.value;\n      this.value = x !== '' ? x : this.initial;\n      this.done = true;\n      this.aborted = false;\n      this.fire();\n      this.render();\n      this.out.write('\\n');\n      this.close();\n    }\n  }, {\n    key: \"up\",\n    value: function up() {\n      this.typed = '';\n      if (this.value >= this.max) return this.bell();\n      this.value += this.inc;\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"down\",\n    value: function down() {\n      this.typed = '';\n      if (this.value <= this.min) return this.bell();\n      this.value -= this.inc;\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var val = this.value.toString();\n      if (val.length === 0) return this.bell();\n      this.value = this.parse(val = val.slice(0, -1)) || '';\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.value = this.initial;\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"_\",\n    value: function _(c, key) {\n      if (!this.valid(c)) return this.bell();\n      var now = Date.now();\n      if (now - this.lastHit > 1000) this.typed = ''; // 1s elapsed\n      this.typed += c;\n      this.lastHit = now;\n      if (c === '.') return this.fire();\n      this.value = Math.min(this.parse(this.typed), this.max);\n      if (this.value > this.max) this.value = this.max;\n      if (this.value < this.min) this.value = this.min;\n      this.fire();\n      this.render();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var underline = !this.done || !this.done && !this.placeholder;\n      this.out.write(erase.line + cursor.to(0) + [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), underline ? color.cyan.underline(this.rendered) : this.rendered].join(' '));\n    }\n  }, {\n    key: \"value\",\n    set: function set(v) {\n      if (!v && v !== 0) {\n        this.placeholder = true;\n        this.rendered = color.gray(this.transform.render(\"\".concat(this.initial)));\n        this._value = '';\n      } else {\n        this.placeholder = false;\n        this.rendered = this.transform.render(\"\".concat(round(v, this.round)));\n        this._value = round(v, this.round);\n      }\n      this.fire();\n    },\n    get: function get() {\n      return this._value;\n    }\n  }]);\n  return NumberPrompt;\n}(Prompt);\nmodule.exports = NumberPrompt;","map":null,"metadata":{},"sourceType":"script"}
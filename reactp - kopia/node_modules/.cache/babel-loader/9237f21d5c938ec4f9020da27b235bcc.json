{"ast":null,"code":"'use strict';\n\nvar mimicFn = require('mimic-fn');\nvar isPromise = require('p-is-promise');\nvar mapAgeCleaner = require('map-age-cleaner');\nvar cacheStore = new WeakMap();\nvar defaultCacheKey = function defaultCacheKey() {\n  for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n    arguments_[_key] = arguments[_key];\n  }\n  if (arguments_.length === 0) {\n    return '__defaultKey';\n  }\n  if (arguments_.length === 1) {\n    var firstArgument = arguments_[0];\n    if (firstArgument === null || firstArgument === undefined || typeof firstArgument !== 'function' && typeof firstArgument !== 'object') {\n      return firstArgument;\n    }\n  }\n  return JSON.stringify(arguments_);\n};\nvar mem = function mem(fn, options) {\n  options = Object.assign({\n    cacheKey: defaultCacheKey,\n    cache: new Map(),\n    cachePromiseRejection: false\n  }, options);\n  if (typeof options.maxAge === 'number') {\n    mapAgeCleaner(options.cache);\n  }\n  var _options = options,\n    cache = _options.cache;\n  options.maxAge = options.maxAge || 0;\n  var setData = function setData(key, data) {\n    cache.set(key, {\n      data: data,\n      maxAge: Date.now() + options.maxAge\n    });\n  };\n  var memoized = function memoized() {\n    var _options2;\n    for (var _len2 = arguments.length, arguments_ = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      arguments_[_key2] = arguments[_key2];\n    }\n    var key = (_options2 = options).cacheKey.apply(_options2, arguments_);\n    if (cache.has(key)) {\n      return cache.get(key).data;\n    }\n    var cacheItem = fn.call.apply(fn, [this].concat(arguments_));\n    setData(key, cacheItem);\n    if (isPromise(cacheItem) && options.cachePromiseRejection === false) {\n      // Remove rejected promises from cache unless `cachePromiseRejection` is set to `true`\n      cacheItem.catch(function () {\n        return cache.delete(key);\n      });\n    }\n    return cacheItem;\n  };\n  try {\n    // The below call will throw in some host environments\n    // See https://github.com/sindresorhus/mimic-fn/issues/10\n    mimicFn(memoized, fn);\n  } catch (_) {}\n  cacheStore.set(memoized, options.cache);\n  return memoized;\n};\nmodule.exports = mem;\n// TODO: Remove this for the next major release\nmodule.exports.default = mem;\nmodule.exports.clear = function (fn) {\n  var cache = cacheStore.get(fn);\n  if (cache && typeof cache.clear === 'function') {\n    cache.clear();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(genTrue),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(getCachedValue),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(getCachedValueOrWait);\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertSimpleType = assertSimpleType;\nexports.makeStrongCache = makeStrongCache;\nexports.makeStrongCacheSync = makeStrongCacheSync;\nexports.makeWeakCache = makeWeakCache;\nexports.makeWeakCacheSync = makeWeakCacheSync;\nfunction _gensync() {\n  var data = require(\"gensync\");\n  _gensync = function _gensync() {\n    return data;\n  };\n  return data;\n}\nvar _async = require(\"../gensync-utils/async\");\nvar _util = require(\"./util\");\nvar synchronize = function synchronize(gen) {\n  return _gensync()(gen).sync;\n};\nfunction genTrue() {\n  return _regeneratorRuntime().wrap(function genTrue$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        return _context.abrupt(\"return\", true);\n      case 1:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\nfunction makeWeakCache(handler) {\n  return makeCachedFunction(WeakMap, handler);\n}\nfunction makeWeakCacheSync(handler) {\n  return synchronize(makeWeakCache(handler));\n}\nfunction makeStrongCache(handler) {\n  return makeCachedFunction(Map, handler);\n}\nfunction makeStrongCacheSync(handler) {\n  return synchronize(makeStrongCache(handler));\n}\nfunction makeCachedFunction(CallCache, handler) {\n  var callCacheSync = new CallCache();\n  var callCacheAsync = new CallCache();\n  var futureCache = new CallCache();\n  return /*#__PURE__*/_regeneratorRuntime().mark(function cachedFunction(arg, data) {\n    var asyncContext, callCache, cached, cache, handlerResult, finishLock, value;\n    return _regeneratorRuntime().wrap(function cachedFunction$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.delegateYield((0, _async.isAsync)(), \"t0\", 1);\n        case 1:\n          asyncContext = _context2.t0;\n          callCache = asyncContext ? callCacheAsync : callCacheSync;\n          return _context2.delegateYield(getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data), \"t1\", 4);\n        case 4:\n          cached = _context2.t1;\n          if (!cached.valid) {\n            _context2.next = 7;\n            break;\n          }\n          return _context2.abrupt(\"return\", cached.value);\n        case 7:\n          cache = new CacheConfigurator(data);\n          handlerResult = handler(arg, cache);\n          if (!(0, _util.isIterableIterator)(handlerResult)) {\n            _context2.next = 14;\n            break;\n          }\n          return _context2.delegateYield((0, _async.onFirstPause)(handlerResult, function () {\n            finishLock = setupAsyncLocks(cache, futureCache, arg);\n          }), \"t2\", 11);\n        case 11:\n          value = _context2.t2;\n          _context2.next = 15;\n          break;\n        case 14:\n          value = handlerResult;\n        case 15:\n          updateFunctionCache(callCache, cache, arg, value);\n          if (finishLock) {\n            futureCache.delete(arg);\n            finishLock.release(value);\n          }\n          return _context2.abrupt(\"return\", value);\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, cachedFunction);\n  });\n}\nfunction getCachedValue(cache, arg, data) {\n  var cachedValue, _iterator, _step, _step$value, value, valid;\n  return _regeneratorRuntime().wrap(function getCachedValue$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        cachedValue = cache.get(arg);\n        if (!cachedValue) {\n          _context3.next = 20;\n          break;\n        }\n        _iterator = _createForOfIteratorHelper(cachedValue);\n        _context3.prev = 3;\n        _iterator.s();\n      case 5:\n        if ((_step = _iterator.n()).done) {\n          _context3.next = 12;\n          break;\n        }\n        _step$value = _step.value, value = _step$value.value, valid = _step$value.valid;\n        return _context3.delegateYield(valid(data), \"t0\", 8);\n      case 8:\n        if (!_context3.t0) {\n          _context3.next = 10;\n          break;\n        }\n        return _context3.abrupt(\"return\", {\n          valid: true,\n          value: value\n        });\n      case 10:\n        _context3.next = 5;\n        break;\n      case 12:\n        _context3.next = 17;\n        break;\n      case 14:\n        _context3.prev = 14;\n        _context3.t1 = _context3[\"catch\"](3);\n        _iterator.e(_context3.t1);\n      case 17:\n        _context3.prev = 17;\n        _iterator.f();\n        return _context3.finish(17);\n      case 20:\n        return _context3.abrupt(\"return\", {\n          valid: false,\n          value: null\n        });\n      case 21:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, _marked2, null, [[3, 14, 17, 20]]);\n}\nfunction getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {\n  var cached, _cached, value;\n  return _regeneratorRuntime().wrap(function getCachedValueOrWait$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        return _context4.delegateYield(getCachedValue(callCache, arg, data), \"t0\", 1);\n      case 1:\n        cached = _context4.t0;\n        if (!cached.valid) {\n          _context4.next = 4;\n          break;\n        }\n        return _context4.abrupt(\"return\", cached);\n      case 4:\n        if (!asyncContext) {\n          _context4.next = 11;\n          break;\n        }\n        return _context4.delegateYield(getCachedValue(futureCache, arg, data), \"t1\", 6);\n      case 6:\n        _cached = _context4.t1;\n        if (!_cached.valid) {\n          _context4.next = 11;\n          break;\n        }\n        return _context4.delegateYield((0, _async.waitFor)(_cached.value.promise), \"t2\", 9);\n      case 9:\n        value = _context4.t2;\n        return _context4.abrupt(\"return\", {\n          valid: true,\n          value: value\n        });\n      case 11:\n        return _context4.abrupt(\"return\", {\n          valid: false,\n          value: null\n        });\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, _marked3);\n}\nfunction setupAsyncLocks(config, futureCache, arg) {\n  var finishLock = new Lock();\n  updateFunctionCache(futureCache, config, arg, finishLock);\n  return finishLock;\n}\nfunction updateFunctionCache(cache, config, arg, value) {\n  if (!config.configured()) config.forever();\n  var cachedValue = cache.get(arg);\n  config.deactivate();\n  switch (config.mode()) {\n    case \"forever\":\n      cachedValue = [{\n        value: value,\n        valid: genTrue\n      }];\n      cache.set(arg, cachedValue);\n      break;\n    case \"invalidate\":\n      cachedValue = [{\n        value: value,\n        valid: config.validator()\n      }];\n      cache.set(arg, cachedValue);\n      break;\n    case \"valid\":\n      if (cachedValue) {\n        cachedValue.push({\n          value: value,\n          valid: config.validator()\n        });\n      } else {\n        cachedValue = [{\n          value: value,\n          valid: config.validator()\n        }];\n        cache.set(arg, cachedValue);\n      }\n  }\n}\nvar CacheConfigurator = /*#__PURE__*/function () {\n  function CacheConfigurator(data) {\n    _classCallCheck(this, CacheConfigurator);\n    this._active = true;\n    this._never = false;\n    this._forever = false;\n    this._invalidate = false;\n    this._configured = false;\n    this._pairs = [];\n    this._data = void 0;\n    this._data = data;\n  }\n  _createClass(CacheConfigurator, [{\n    key: \"simple\",\n    value: function simple() {\n      return makeSimpleConfigurator(this);\n    }\n  }, {\n    key: \"mode\",\n    value: function mode() {\n      if (this._never) return \"never\";\n      if (this._forever) return \"forever\";\n      if (this._invalidate) return \"invalidate\";\n      return \"valid\";\n    }\n  }, {\n    key: \"forever\",\n    value: function forever() {\n      if (!this._active) {\n        throw new Error(\"Cannot change caching after evaluation has completed.\");\n      }\n      if (this._never) {\n        throw new Error(\"Caching has already been configured with .never()\");\n      }\n      this._forever = true;\n      this._configured = true;\n    }\n  }, {\n    key: \"never\",\n    value: function never() {\n      if (!this._active) {\n        throw new Error(\"Cannot change caching after evaluation has completed.\");\n      }\n      if (this._forever) {\n        throw new Error(\"Caching has already been configured with .forever()\");\n      }\n      this._never = true;\n      this._configured = true;\n    }\n  }, {\n    key: \"using\",\n    value: function using(handler) {\n      var _this = this;\n      if (!this._active) {\n        throw new Error(\"Cannot change caching after evaluation has completed.\");\n      }\n      if (this._never || this._forever) {\n        throw new Error(\"Caching has already been configured with .never or .forever()\");\n      }\n      this._configured = true;\n      var key = handler(this._data);\n      var fn = (0, _async.maybeAsync)(handler, \"You appear to be using an async cache handler, but Babel has been called synchronously\");\n      if ((0, _async.isThenable)(key)) {\n        return key.then(function (key) {\n          _this._pairs.push([key, fn]);\n          return key;\n        });\n      }\n      this._pairs.push([key, fn]);\n      return key;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(handler) {\n      this._invalidate = true;\n      return this.using(handler);\n    }\n  }, {\n    key: \"validator\",\n    value: function validator() {\n      var pairs = this._pairs;\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n        var _iterator2, _step2, _step2$value, key, fn;\n        return _regeneratorRuntime().wrap(function _callee$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(pairs);\n              _context5.prev = 1;\n              _iterator2.s();\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context5.next = 12;\n                break;\n              }\n              _step2$value = _slicedToArray(_step2.value, 2), key = _step2$value[0], fn = _step2$value[1];\n              _context5.t0 = key;\n              return _context5.delegateYield(fn(data), \"t1\", 7);\n            case 7:\n              _context5.t2 = _context5.t1;\n              if (!(_context5.t0 !== _context5.t2)) {\n                _context5.next = 10;\n                break;\n              }\n              return _context5.abrupt(\"return\", false);\n            case 10:\n              _context5.next = 3;\n              break;\n            case 12:\n              _context5.next = 17;\n              break;\n            case 14:\n              _context5.prev = 14;\n              _context5.t3 = _context5[\"catch\"](1);\n              _iterator2.e(_context5.t3);\n            case 17:\n              _context5.prev = 17;\n              _iterator2.f();\n              return _context5.finish(17);\n            case 20:\n              return _context5.abrupt(\"return\", true);\n            case 21:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee, null, [[1, 14, 17, 20]]);\n      });\n    }\n  }, {\n    key: \"deactivate\",\n    value: function deactivate() {\n      this._active = false;\n    }\n  }, {\n    key: \"configured\",\n    value: function configured() {\n      return this._configured;\n    }\n  }]);\n  return CacheConfigurator;\n}();\nfunction makeSimpleConfigurator(cache) {\n  function cacheFn(val) {\n    if (typeof val === \"boolean\") {\n      if (val) cache.forever();else cache.never();\n      return;\n    }\n    return cache.using(function () {\n      return assertSimpleType(val());\n    });\n  }\n  cacheFn.forever = function () {\n    return cache.forever();\n  };\n  cacheFn.never = function () {\n    return cache.never();\n  };\n  cacheFn.using = function (cb) {\n    return cache.using(function () {\n      return assertSimpleType(cb());\n    });\n  };\n  cacheFn.invalidate = function (cb) {\n    return cache.invalidate(function () {\n      return assertSimpleType(cb());\n    });\n  };\n  return cacheFn;\n}\nfunction assertSimpleType(value) {\n  if ((0, _async.isThenable)(value)) {\n    throw new Error(\"You appear to be using an async cache handler, \" + \"which your current version of Babel does not support. \" + \"We may add support for this in the future, \" + \"but if you're on the most recent version of @babel/core and still \" + \"seeing this error, then you'll need to synchronously handle your caching logic.\");\n  }\n  if (value != null && typeof value !== \"string\" && typeof value !== \"boolean\" && typeof value !== \"number\") {\n    throw new Error(\"Cache keys must be either string, boolean, number, null, or undefined.\");\n  }\n  return value;\n}\nvar Lock = /*#__PURE__*/function () {\n  function Lock() {\n    var _this2 = this;\n    _classCallCheck(this, Lock);\n    this.released = false;\n    this.promise = void 0;\n    this._resolve = void 0;\n    this.promise = new Promise(function (resolve) {\n      _this2._resolve = resolve;\n    });\n  }\n  _createClass(Lock, [{\n    key: \"release\",\n    value: function release(value) {\n      this.released = true;\n      this._resolve(value);\n    }\n  }]);\n  return Lock;\n}();\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
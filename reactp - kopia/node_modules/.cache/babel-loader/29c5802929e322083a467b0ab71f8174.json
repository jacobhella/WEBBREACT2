{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\nvar _keys2 = _interopRequireDefault(_keys);\nexports.needsWhitespace = needsWhitespace;\nexports.needsWhitespaceBefore = needsWhitespaceBefore;\nexports.needsWhitespaceAfter = needsWhitespaceAfter;\nexports.needsParens = needsParens;\nvar _whitespace = require(\"./whitespace\");\nvar _whitespace2 = _interopRequireDefault(_whitespace);\nvar _parentheses = require(\"./parentheses\");\nvar parens = _interopRequireWildcard(_parentheses);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction expandAliases(obj) {\n  var newObj = {};\n  function add(type, func) {\n    var fn = newObj[type];\n    newObj[type] = fn ? function (node, parent, stack) {\n      var result = fn(node, parent, stack);\n      return result == null ? func(node, parent, stack) : result;\n    } : func;\n  }\n  for (var _iterator = (0, _keys2.default)(obj), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var type = _ref;\n    var aliases = t.FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      for (var _iterator2 = aliases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n        var _ref2;\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n        var alias = _ref2;\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n  return newObj;\n}\nvar expandedParens = expandAliases(parens);\nvar expandedWhitespaceNodes = expandAliases(_whitespace2.default.nodes);\nvar expandedWhitespaceList = expandAliases(_whitespace2.default.list);\nfunction find(obj, node, parent, printStack) {\n  var fn = obj[node.type];\n  return fn ? fn(node, parent, printStack) : null;\n}\nfunction isOrHasCallExpression(node) {\n  if (t.isCallExpression(node)) {\n    return true;\n  }\n  if (t.isMemberExpression(node)) {\n    return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);\n  } else {\n    return false;\n  }\n}\nfunction needsWhitespace(node, parent, type) {\n  if (!node) return 0;\n  if (t.isExpressionStatement(node)) {\n    node = node.expression;\n  }\n  var linesInfo = find(expandedWhitespaceNodes, node, parent);\n  if (!linesInfo) {\n    var items = find(expandedWhitespaceList, node, parent);\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        linesInfo = needsWhitespace(items[i], node, type);\n        if (linesInfo) break;\n      }\n    }\n  }\n  return linesInfo && linesInfo[type] || 0;\n}\nfunction needsWhitespaceBefore(node, parent) {\n  return needsWhitespace(node, parent, \"before\");\n}\nfunction needsWhitespaceAfter(node, parent) {\n  return needsWhitespace(node, parent, \"after\");\n}\nfunction needsParens(node, parent, printStack) {\n  if (!parent) return false;\n  if (t.isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n  return find(expandedParens, node, parent, printStack);\n}","map":null,"metadata":{},"sourceType":"script"}
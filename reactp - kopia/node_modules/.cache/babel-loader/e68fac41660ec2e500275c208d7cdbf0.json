{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.installErrorOnPrivate = installErrorOnPrivate;\n\n// prettier-ignore\nvar disabledGlobals = {\n  fail: 'Illegal usage of global `fail`, prefer throwing an error, or the `done.fail` callback.',\n  pending: 'Illegal usage of global `pending`, prefer explicitly skipping a test using `test.skip`',\n  spyOn: 'Illegal usage of global `spyOn`, prefer `jest.spyOn`.',\n  spyOnProperty: 'Illegal usage of global `spyOnProperty`, prefer `jest.spyOn`.'\n};\n\n// prettier-ignore\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar disabledJasmineMethods = {\n  addMatchers: 'Illegal usage of `jasmine.addMatchers`, prefer `expect.extends`.',\n  any: 'Illegal usage of `jasmine.any`, prefer `expect.any`.',\n  anything: 'Illegal usage of `jasmine.anything`, prefer `expect.anything`.',\n  arrayContaining: 'Illegal usage of `jasmine.arrayContaining`, prefer `expect.arrayContaining`.',\n  createSpy: 'Illegal usage of `jasmine.createSpy`, prefer `jest.fn`.',\n  objectContaining: 'Illegal usage of `jasmine.objectContaining`, prefer `expect.objectContaining`.',\n  stringMatching: 'Illegal usage of `jasmine.stringMatching`, prefer `expect.stringMatching`.'\n};\nfunction installErrorOnPrivate(global) {\n  var jasmine = global.jasmine;\n  Object.keys(disabledGlobals).forEach(function (functionName) {\n    global[functionName] = function () {\n      throwAtFunction(disabledGlobals[functionName], global[functionName]);\n    };\n  });\n  Object.keys(disabledJasmineMethods).forEach(function (methodName) {\n    jasmine[methodName] = function () {\n      throwAtFunction(disabledJasmineMethods[methodName], jasmine[methodName]);\n    };\n  });\n  function set() {\n    throwAtFunction('Illegal usage of `jasmine.DEFAULT_TIMEOUT_INTERVAL`, prefer `jest.setTimeout`.', set);\n  }\n  var original = jasmine.DEFAULT_TIMEOUT_INTERVAL;\n  // $FlowFixMe Flow seems to be confused about accessors and tries to enfoce having a `value` property.\n  Object.defineProperty(jasmine, 'DEFAULT_TIMEOUT_INTERVAL', {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      return original;\n    },\n    set: set\n  });\n}\nfunction throwAtFunction(message, fn) {\n  var e = new Error(message);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(e, fn);\n  }\n  throw e;\n}","map":null,"metadata":{},"sourceType":"script"}
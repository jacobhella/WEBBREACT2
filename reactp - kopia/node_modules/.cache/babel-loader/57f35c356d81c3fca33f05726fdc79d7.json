{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeConfigAPI = makeConfigAPI;\nexports.makePluginAPI = makePluginAPI;\nexports.makePresetAPI = makePresetAPI;\nfunction _semver() {\n  var data = require(\"semver\");\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nvar _ = require(\"../../\");\nvar _caching = require(\"../caching\");\nfunction makeConfigAPI(cache) {\n  var env = function env(value) {\n    return cache.using(function (data) {\n      if (typeof value === \"undefined\") return data.envName;\n      if (typeof value === \"function\") {\n        return (0, _caching.assertSimpleType)(value(data.envName));\n      }\n      return (Array.isArray(value) ? value : [value]).some(function (entry) {\n        if (typeof entry !== \"string\") {\n          throw new Error(\"Unexpected non-string value\");\n        }\n        return entry === data.envName;\n      });\n    });\n  };\n  var caller = function caller(cb) {\n    return cache.using(function (data) {\n      return (0, _caching.assertSimpleType)(cb(data.caller));\n    });\n  };\n  return {\n    version: _.version,\n    cache: cache.simple(),\n    env: env,\n    async: function async() {\n      return false;\n    },\n    caller: caller,\n    assertVersion: assertVersion\n  };\n}\nfunction makePresetAPI(cache, externalDependencies) {\n  var targets = function targets() {\n    return JSON.parse(cache.using(function (data) {\n      return JSON.stringify(data.targets);\n    }));\n  };\n  var addExternalDependency = function addExternalDependency(ref) {\n    externalDependencies.push(ref);\n  };\n  return Object.assign({}, makeConfigAPI(cache), {\n    targets: targets,\n    addExternalDependency: addExternalDependency\n  });\n}\nfunction makePluginAPI(cache, externalDependencies) {\n  var assumption = function assumption(name) {\n    return cache.using(function (data) {\n      return data.assumptions[name];\n    });\n  };\n  return Object.assign({}, makePresetAPI(cache, externalDependencies), {\n    assumption: assumption\n  });\n}\nfunction assertVersion(range) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = \"^\".concat(range, \".0.0-0\");\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n  if (_semver().satisfies(_.version, range)) return;\n  var limit = Error.stackTraceLimit;\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n  var err = new Error(\"Requires Babel \\\"\".concat(range, \"\\\", but was loaded with \\\"\").concat(_.version, \"\\\". \") + \"If you are sure you have a compatible version of @babel/core, \" + \"it is likely that something in your build process is loading the \" + \"wrong version. Inspect the stack trace of this error to look for \" + \"the first entry that doesn't mention \\\"@babel/core\\\" or \\\"babel-core\\\" \" + \"to see what is calling Babel.\");\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: _.version,\n    range: range\n  });\n}\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
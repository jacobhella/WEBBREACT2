{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filterItems;\nexports.isRequired = isRequired;\nexports.targetsSupported = targetsSupported;\nvar _semver = require(\"semver\");\nvar _plugins = require(\"@babel/compat-data/plugins\");\nvar _utils = require(\"./utils\");\nfunction targetsSupported(target, support) {\n  var targetEnvironments = Object.keys(target);\n  if (targetEnvironments.length === 0) {\n    return false;\n  }\n  var unsupportedEnvironments = targetEnvironments.filter(function (environment) {\n    var lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment);\n    if (!lowestImplementedVersion) {\n      return true;\n    }\n    var lowestTargetedVersion = target[environment];\n    if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment)) {\n      return false;\n    }\n    if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment)) {\n      return true;\n    }\n    if (!_semver.valid(lowestTargetedVersion.toString())) {\n      throw new Error(\"Invalid version passed for target \\\"\".concat(environment, \"\\\": \\\"\").concat(lowestTargetedVersion, \"\\\". \") + \"Versions must be in semver format (major.minor.patch)\");\n    }\n    return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());\n  });\n  return unsupportedEnvironments.length === 0;\n}\nfunction isRequired(name, targets) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$compatData = _ref.compatData,\n    compatData = _ref$compatData === void 0 ? _plugins : _ref$compatData,\n    includes = _ref.includes,\n    excludes = _ref.excludes;\n  if (excludes != null && excludes.has(name)) return false;\n  if (includes != null && includes.has(name)) return true;\n  return !targetsSupported(targets, compatData[name]);\n}\nfunction filterItems(list, includes, excludes, targets, defaultIncludes, defaultExcludes, pluginSyntaxMap) {\n  var result = new Set();\n  var options = {\n    compatData: list,\n    includes: includes,\n    excludes: excludes\n  };\n  for (var item in list) {\n    if (isRequired(item, targets, options)) {\n      result.add(item);\n    } else if (pluginSyntaxMap) {\n      var shippedProposalsSyntax = pluginSyntaxMap.get(item);\n      if (shippedProposalsSyntax) {\n        result.add(shippedProposalsSyntax);\n      }\n    }\n  }\n  if (defaultIncludes) {\n    defaultIncludes.forEach(function (item) {\n      return !excludes.has(item) && result.add(item);\n    });\n  }\n  if (defaultExcludes) {\n    defaultExcludes.forEach(function (item) {\n      return !includes.has(item) && result.delete(item);\n    });\n  }\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}
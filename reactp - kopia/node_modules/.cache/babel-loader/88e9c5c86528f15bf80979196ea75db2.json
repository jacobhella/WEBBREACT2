{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.saveInlineSnapshots = undefined;\nvar _fs = require('fs');\nvar _fs2 = _interopRequireDefault(_fs);\nvar _semver = require('semver');\nvar _semver2 = _interopRequireDefault(_semver);\nvar _path = require('path');\nvar _path2 = _interopRequireDefault(_path);\nvar _babelTypes = require('babel-types');\nvar _utils = require('./utils');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar saveInlineSnapshots = exports.saveInlineSnapshots = function (snapshots, prettier, babelTraverse) {\n  if (!prettier) {\n    throw new Error(\"Jest: Inline Snapshots requires Prettier.\\n\" + \"Please ensure \\\"prettier\\\" is installed in your project.\");\n  }\n\n  // Custom parser API was added in 1.5.0\n  if (_semver2.default.lt(prettier.version, '1.5.0')) {\n    throw new Error(\"Jest: Inline Snapshots require prettier>=1.5.0.\\n\" + \"Please upgrade \\\"prettier\\\".\");\n  }\n  var snapshotsByFile = groupSnapshotsByFile(snapshots);\n  for (var _i = 0, _Object$keys = Object.keys(snapshotsByFile); _i < _Object$keys.length; _i++) {\n    var sourceFilePath = _Object$keys[_i];\n    saveSnapshotsForFile(snapshotsByFile[sourceFilePath], sourceFilePath, prettier, babelTraverse);\n  }\n};\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar saveSnapshotsForFile = function saveSnapshotsForFile(snapshots, sourceFilePath, prettier, babelTraverse) {\n  var sourceFile = _fs2.default.readFileSync(sourceFilePath, 'utf8');\n\n  // Resolve project configuration.\n  // For older versions of Prettier, do not load configuration.\n  var config = prettier.resolveConfig ? prettier.resolveConfig.sync(sourceFilePath, {\n    editorconfig: true\n  }) : null;\n\n  // Detect the parser for the test file.\n  // For older versions of Prettier, fallback to a simple parser detection.\n  var inferredParser = prettier.getFileInfo ? prettier.getFileInfo.sync(sourceFilePath).inferredParser : config && config.parser || simpleDetectParser(sourceFilePath);\n\n  // Format the source code using the custom parser API.\n  var newSourceFile = prettier.format(sourceFile, Object.assign({}, config, {\n    filepath: sourceFilePath,\n    parser: createParser(snapshots, inferredParser, babelTraverse)\n  }));\n  if (newSourceFile !== sourceFile) {\n    _fs2.default.writeFileSync(sourceFilePath, newSourceFile);\n  }\n};\nvar groupSnapshotsBy = function groupSnapshotsBy(createKey) {\n  return function (snapshots) {\n    return snapshots.reduce(function (object, inlineSnapshot) {\n      var key = createKey(inlineSnapshot);\n      return Object.assign(object, _defineProperty({}, key, (object[key] || []).concat(inlineSnapshot)));\n    }, {});\n  };\n};\nvar groupSnapshotsByFrame = groupSnapshotsBy(function (_ref) {\n  var _ref$frame = _ref.frame;\n  var line = _ref$frame.line,\n    column = _ref$frame.column;\n  return \"\".concat(line, \":\").concat(column - 1);\n});\nvar groupSnapshotsByFile = groupSnapshotsBy(function (_ref2) {\n  var file = _ref2.frame.file;\n  return file;\n});\nvar createParser = function createParser(snapshots, inferredParser, babelTraverse) {\n  return function (text, parsers, options) {\n    // Workaround for https://github.com/prettier/prettier/issues/3150\n    options.parser = inferredParser;\n    var groupedSnapshots = groupSnapshotsByFrame(snapshots);\n    var remainingSnapshots = new Set(snapshots.map(function (_ref3) {\n      var snapshot = _ref3.snapshot;\n      return snapshot;\n    }));\n    var ast = parsers[inferredParser](text);\n\n    // Flow uses a 'Program' parent node, babel expects a 'File'.\n    if (ast.type !== 'File') {\n      ast = (0, _babelTypes.file)(ast, ast.comments, ast.tokens);\n      delete ast.program.comments;\n    }\n    babelTraverse(ast, {\n      CallExpression: function CallExpression(_ref4) {\n        var _ref4$node = _ref4.node;\n        var args = _ref4$node.arguments,\n          callee = _ref4$node.callee;\n        if (callee.type !== 'MemberExpression' || callee.property.type !== 'Identifier') {\n          return;\n        }\n        var _callee$property$loc$ = callee.property.loc.start;\n        var line = _callee$property$loc$.line,\n          column = _callee$property$loc$.column;\n        var snapshotsForFrame = groupedSnapshots[\"\".concat(line, \":\").concat(column)];\n        if (!snapshotsForFrame) {\n          return;\n        }\n        if (snapshotsForFrame.length > 1) {\n          throw new Error('Jest: Multiple inline snapshots for the same call are not supported.');\n        }\n        var snapshotIndex = args.findIndex(function (_ref5) {\n          var type = _ref5.type;\n          return type === 'TemplateLiteral';\n        });\n        var values = snapshotsForFrame.map(function (_ref6) {\n          var snapshot = _ref6.snapshot;\n          remainingSnapshots.delete(snapshot);\n          return (0, _babelTypes.templateLiteral)([(0, _babelTypes.templateElement)({\n            raw: (0, _utils.escapeBacktickString)(snapshot)\n          })], []);\n        });\n        var replacementNode = values[0];\n        if (snapshotIndex > -1) {\n          args[snapshotIndex] = replacementNode;\n        } else {\n          args.push(replacementNode);\n        }\n      }\n    });\n    if (remainingSnapshots.size) {\n      throw new Error(\"Jest: Couldn't locate all inline snapshots.\");\n    }\n    return ast;\n  };\n};\nvar simpleDetectParser = function simpleDetectParser(filePath) {\n  var extname = _path2.default.extname(filePath);\n  if (/tsx?$/.test(extname)) {\n    return 'typescript';\n  }\n  return 'babylon';\n};","map":null,"metadata":{},"sourceType":"script"}
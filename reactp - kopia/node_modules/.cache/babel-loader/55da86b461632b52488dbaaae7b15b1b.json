{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar makeEmptyAggregatedTestResult = exports.makeEmptyAggregatedTestResult = function () {\n  return {\n    numFailedTestSuites: 0,\n    numFailedTests: 0,\n    numPassedTestSuites: 0,\n    numPassedTests: 0,\n    numPendingTestSuites: 0,\n    numPendingTests: 0,\n    numRuntimeErrorTestSuites: 0,\n    numTotalTestSuites: 0,\n    numTotalTests: 0,\n    openHandles: [],\n    snapshot: {\n      added: 0,\n      didUpdate: false,\n      // is set only after the full run\n      failure: false,\n      filesAdded: 0,\n      // combines individual test results + removed files after the full run\n      filesRemoved: 0,\n      filesUnmatched: 0,\n      filesUpdated: 0,\n      matched: 0,\n      total: 0,\n      unchecked: 0,\n      uncheckedKeysByFile: [],\n      unmatched: 0,\n      updated: 0\n    },\n    startTime: 0,\n    success: true,\n    testResults: [],\n    wasInterrupted: false\n  };\n};\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar buildFailureTestResult = exports.buildFailureTestResult = function (testPath, err) {\n  return {\n    console: null,\n    displayName: '',\n    failureMessage: null,\n    leaks: false,\n    numFailingTests: 0,\n    numPassingTests: 0,\n    numPendingTests: 0,\n    openHandles: [],\n    perfStats: {\n      end: 0,\n      start: 0\n    },\n    skipped: false,\n    snapshot: {\n      added: 0,\n      fileDeleted: false,\n      matched: 0,\n      unchecked: 0,\n      uncheckedKeys: [],\n      unmatched: 0,\n      updated: 0\n    },\n    sourceMaps: {},\n    testExecError: err,\n    testFilePath: testPath,\n    testResults: []\n  };\n};\n\n// Add individual test result to an aggregated test result\nvar addResult = exports.addResult = function (aggregatedResults, testResult) {\n  aggregatedResults.testResults.push(testResult);\n  aggregatedResults.numTotalTests += testResult.numPassingTests + testResult.numFailingTests + testResult.numPendingTests;\n  aggregatedResults.numFailedTests += testResult.numFailingTests;\n  aggregatedResults.numPassedTests += testResult.numPassingTests;\n  aggregatedResults.numPendingTests += testResult.numPendingTests;\n  if (testResult.testExecError) {\n    aggregatedResults.numRuntimeErrorTestSuites++;\n  }\n  if (testResult.skipped) {\n    aggregatedResults.numPendingTestSuites++;\n  } else if (testResult.numFailingTests > 0 || testResult.testExecError) {\n    aggregatedResults.numFailedTestSuites++;\n  } else {\n    aggregatedResults.numPassedTestSuites++;\n  }\n\n  // Snapshot data\n  if (testResult.snapshot.added) {\n    aggregatedResults.snapshot.filesAdded++;\n  }\n  if (testResult.snapshot.fileDeleted) {\n    aggregatedResults.snapshot.filesRemoved++;\n  }\n  if (testResult.snapshot.unmatched) {\n    aggregatedResults.snapshot.filesUnmatched++;\n  }\n  if (testResult.snapshot.updated) {\n    aggregatedResults.snapshot.filesUpdated++;\n  }\n  aggregatedResults.snapshot.added += testResult.snapshot.added;\n  aggregatedResults.snapshot.matched += testResult.snapshot.matched;\n  aggregatedResults.snapshot.unchecked += testResult.snapshot.unchecked;\n  if (testResult.snapshot.uncheckedKeys && testResult.snapshot.uncheckedKeys.length > 0) {\n    aggregatedResults.snapshot.uncheckedKeysByFile.push({\n      filePath: testResult.testFilePath,\n      keys: testResult.snapshot.uncheckedKeys\n    });\n  }\n  aggregatedResults.snapshot.unmatched += testResult.snapshot.unmatched;\n  aggregatedResults.snapshot.updated += testResult.snapshot.updated;\n  aggregatedResults.snapshot.total += testResult.snapshot.added + testResult.snapshot.matched + testResult.snapshot.unmatched + testResult.snapshot.updated;\n};","map":null,"metadata":{},"sourceType":"script"}
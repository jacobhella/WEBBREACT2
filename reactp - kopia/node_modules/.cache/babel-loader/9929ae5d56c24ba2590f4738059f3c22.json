{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.matcherHint = exports.pluralize = exports.ensureNumbers = exports.ensureExpectedIsNumber = exports.ensureActualIsNumber = exports.ensureNoExpected = exports.printWithType = exports.printExpected = exports.printReceived = exports.highlightTrailingWhitespace = exports.stringify = exports.SUGGEST_TO_CONTAIN_EQUAL = exports.SUGGEST_TO_EQUAL = exports.RECEIVED_COLOR = exports.EXPECTED_COLOR = undefined;\nvar _chalk = require('chalk');\nvar _chalk2 = _interopRequireDefault(_chalk);\nvar _jestGetType = require('jest-get-type');\nvar _jestGetType2 = _interopRequireDefault(_jestGetType);\nvar _prettyFormat = require('pretty-format');\nvar _prettyFormat2 = _interopRequireDefault(_prettyFormat);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _prettyFormat$plugins = _prettyFormat2.default.plugins;\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,\n  DOMCollection = _prettyFormat$plugins.DOMCollection,\n  DOMElement = _prettyFormat$plugins.DOMElement,\n  Immutable = _prettyFormat$plugins.Immutable,\n  ReactElement = _prettyFormat$plugins.ReactElement,\n  ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;\nvar PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nvar EXPECTED_COLOR = exports.EXPECTED_COLOR = _chalk2.default.green;\nvar RECEIVED_COLOR = exports.RECEIVED_COLOR = _chalk2.default.red;\nvar NUMBERS = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen'];\nvar SUGGEST_TO_EQUAL = exports.SUGGEST_TO_EQUAL = _chalk2.default.dim('Note that you are testing for equality with the stricter `toBe` matcher using `Object.is`. For deep equality only, use `toEqual` instead.');\nvar SUGGEST_TO_CONTAIN_EQUAL = exports.SUGGEST_TO_CONTAIN_EQUAL = _chalk2.default.dim('Looks like you wanted to test for object/array equality with the stricter `toContain` matcher. You probably need to use `toContainEqual` instead.');\nvar stringify = exports.stringify = function (object) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var MAX_LENGTH = 10000;\n  var result;\n  try {\n    result = (0, _prettyFormat2.default)(object, {\n      maxDepth: maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  } catch (e) {\n    result = (0, _prettyFormat2.default)(object, {\n      callToJSON: false,\n      maxDepth: maxDepth,\n      min: true,\n      plugins: PLUGINS\n    });\n  }\n  return result.length >= MAX_LENGTH && maxDepth > 1 ? stringify(object, Math.floor(maxDepth / 2)) : result;\n};\nvar highlightTrailingWhitespace = exports.highlightTrailingWhitespace = function (text) {\n  return text.replace(/\\s+$/gm, _chalk2.default.inverse('$&'));\n};\nvar printReceived = exports.printReceived = function (object) {\n  return RECEIVED_COLOR(highlightTrailingWhitespace(stringify(object)));\n};\nvar printExpected = exports.printExpected = function (value) {\n  return EXPECTED_COLOR(highlightTrailingWhitespace(stringify(value)));\n};\nvar printWithType = exports.printWithType = function (name, received, print) {\n  var type = (0, _jestGetType2.default)(received);\n  return name + ':' + (type !== 'null' && type !== 'undefined' ? '\\n  ' + type + ': ' : ' ') + print(received);\n};\nvar ensureNoExpected = exports.ensureNoExpected = function (expected, matcherName) {\n  matcherName || (matcherName = 'This');\n  if (typeof expected !== 'undefined') {\n    throw new Error(matcherHint('[.not]' + matcherName, undefined, '') + '\\n\\n' + 'Matcher does not accept any arguments.\\n' + printWithType('Got', expected, printExpected));\n  }\n};\nvar ensureActualIsNumber = exports.ensureActualIsNumber = function (actual, matcherName) {\n  matcherName || (matcherName = 'This matcher');\n  if (typeof actual !== 'number') {\n    throw new Error(matcherHint('[.not]' + matcherName) + '\\n\\n' + \"Received value must be a number.\\n\" + printWithType('Received', actual, printReceived));\n  }\n};\nvar ensureExpectedIsNumber = exports.ensureExpectedIsNumber = function (expected, matcherName) {\n  matcherName || (matcherName = 'This matcher');\n  if (typeof expected !== 'number') {\n    throw new Error(matcherHint('[.not]' + matcherName) + '\\n\\n' + \"Expected value must be a number.\\n\" + printWithType('Got', expected, printExpected));\n  }\n};\nvar ensureNumbers = exports.ensureNumbers = function (actual, expected, matcherName) {\n  ensureActualIsNumber(actual, matcherName);\n  ensureExpectedIsNumber(expected, matcherName);\n};\nvar pluralize = exports.pluralize = function (word, count) {\n  return (NUMBERS[count] || count) + ' ' + word + (count === 1 ? '' : 's');\n};\nvar matcherHint = exports.matcherHint = function (matcherName) {\n  var received = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'received';\n  var expected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'expected';\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var comment = options.comment,\n    isDirectExpectCall = options.isDirectExpectCall,\n    isNot = options.isNot,\n    secondArgument = options.secondArgument;\n  return _chalk2.default.dim('expect' + (isDirectExpectCall ? '' : '(')) + RECEIVED_COLOR(received) + (isNot ? \"\".concat(_chalk2.default.dim(').'), \"not\").concat(_chalk2.default.dim(matcherName + '(')) : _chalk2.default.dim((isDirectExpectCall ? '' : ')') + matcherName + '(')) + EXPECTED_COLOR(expected) + (secondArgument ? \"\".concat(_chalk2.default.dim(', ')).concat(EXPECTED_COLOR(secondArgument)) : '') + _chalk2.default.dim(\")\".concat(comment ? \" // \".concat(comment) : ''));\n};","map":null,"metadata":{},"sourceType":"script"}
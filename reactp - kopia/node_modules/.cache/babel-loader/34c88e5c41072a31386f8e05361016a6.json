{"ast":null,"code":"'use strict';\n\nvar js = require('default-require-extensions/js');\nmodule.exports = appendTransform;\nvar count = 0;\nfunction appendTransform(transform, ext, extensions) {\n  // Generate a unique key for this transform\n  var key = __dirname + count; // eslint-disable-line\n  count++;\n  ext = ext || '.js';\n  extensions = extensions || require.extensions;\n  var forwardGet;\n  var forwardSet;\n  var descriptor = Object.getOwnPropertyDescriptor(extensions, ext) || {\n    value: js,\n    configurable: true\n  };\n  if ((descriptor.get || descriptor.set) && !(descriptor.get && descriptor.set) || !descriptor.configurable) {\n    throw new Error('Somebody did bad things to require.extensions[\"' + ext + '\"]');\n  }\n  if (descriptor.get) {\n    // wrap a previous append-transform install and pass through to the getter/setter pair it created\n    forwardGet = function forwardGet() {\n      return descriptor.get();\n    };\n    forwardSet = function forwardSet(val) {\n      descriptor.set(val);\n      return forwardGet();\n    };\n  } else {\n    forwardGet = function forwardGet() {\n      return descriptor.value;\n    };\n    forwardSet = function forwardSet(val) {\n      descriptor.value = val;\n      return val;\n    };\n  }\n  function wrapCustomHook(hook) {\n    return function (module, filename) {\n      // We wrap every added extension, but we only apply the transform to the one on top of the stack\n      if (!module[key]) {\n        module[key] = true;\n        var originalCompile = module._compile;\n        module._compile = function replacementCompile(code, filename) {\n          module._compile = originalCompile;\n          code = transform(code, filename);\n          module._compile(code, filename);\n        };\n      }\n      hook(module, filename);\n    };\n  }\n\n  // wrap the original\n  forwardSet(wrapCustomHook(forwardGet()));\n  var hooks = [forwardGet()];\n  function setCurrentHook(hook) {\n    var restoreIndex = hooks.indexOf(hook);\n    if (restoreIndex === -1) {\n      hooks.push(forwardSet(wrapCustomHook(hook)));\n    } else {\n      // we have already scene this hook, and it is being reverted (proxyquire, etc) - don't wrap again.\n      hooks.splice(restoreIndex + 1, hooks.length);\n      forwardSet(hook);\n    }\n  }\n  Object.defineProperty(extensions, ext, {\n    configurable: true,\n    enumerable: true,\n    get: forwardGet,\n    set: setCurrentHook\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
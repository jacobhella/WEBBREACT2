{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _jestMessageUtil;\nfunction _load_jestMessageUtil() {\n  return _jestMessageUtil = require('jest-message-util');\n}\nvar _testResultHelpers;\nfunction _load_testResultHelpers() {\n  return _testResultHelpers = require('./testResultHelpers');\n}\nvar _coverage_reporter;\nfunction _load_coverage_reporter() {\n  return _coverage_reporter = _interopRequireDefault(require('./reporters/coverage_reporter'));\n}\nvar _default_reporter;\nfunction _load_default_reporter() {\n  return _default_reporter = _interopRequireDefault(require('./reporters/default_reporter'));\n}\nvar _exit;\nfunction _load_exit() {\n  return _exit = _interopRequireDefault(require('exit'));\n}\nvar _notify_reporter;\nfunction _load_notify_reporter() {\n  return _notify_reporter = _interopRequireDefault(require('./reporters/notify_reporter'));\n}\nvar _ReporterDispatcher;\nfunction _load_ReporterDispatcher() {\n  return _ReporterDispatcher = _interopRequireDefault(require('./ReporterDispatcher'));\n}\nvar _jestSnapshot;\nfunction _load_jestSnapshot() {\n  return _jestSnapshot = _interopRequireDefault(require('jest-snapshot'));\n}\nvar _summary_reporter;\nfunction _load_summary_reporter() {\n  return _summary_reporter = _interopRequireDefault(require('./reporters/summary_reporter'));\n}\nvar _jestRunner;\nfunction _load_jestRunner() {\n  return _jestRunner = _interopRequireDefault(require('jest-runner'));\n}\nvar _TestWatcher;\nfunction _load_TestWatcher() {\n  return _TestWatcher = _interopRequireDefault(require('./TestWatcher'));\n}\nvar _verbose_reporter;\nfunction _load_verbose_reporter() {\n  return _verbose_reporter = _interopRequireDefault(require('./reporters/verbose_reporter'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar SLOW_TEST_TIME = 1000;\n\n// The default jest-runner is required because it is the default test runner\n// and required implicitly through the `runner` ProjectConfig option.\n(_jestRunner || _load_jestRunner()).default;\nvar TestScheduler = /*#__PURE__*/function () {\n  function TestScheduler(globalConfig, options, context) {\n    _classCallCheck(this, TestScheduler);\n    this._dispatcher = new (_ReporterDispatcher || _load_ReporterDispatcher()).default();\n    this._globalConfig = globalConfig;\n    this._options = options;\n    this._context = context;\n    this._setupReporters();\n  }\n  _createClass(TestScheduler, [{\n    key: \"addReporter\",\n    value: function addReporter(reporter) {\n      this._dispatcher.register(reporter);\n    }\n  }, {\n    key: \"removeReporter\",\n    value: function removeReporter(ReporterClass) {\n      this._dispatcher.unregister(ReporterClass);\n    }\n  }, {\n    key: \"scheduleTests\",\n    value: function scheduleTests(tests, watcher) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var onStart, timings, contexts, aggregatedResults, estimatedTime, areFastTests, runInBandWatch, runInBandNonWatch, runInBand, onResult, onFailure, updateSnapshotState, testRunners, testsByRunner, _i2, _Object$keys, runner, anyTestFailures, anyReporterErrors;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              onStart = _this._dispatcher.onTestStart.bind(_this._dispatcher);\n              timings = [];\n              contexts = new Set();\n              tests.forEach(function (test) {\n                contexts.add(test.context);\n                if (test.duration) {\n                  timings.push(test.duration);\n                }\n              });\n              aggregatedResults = createAggregatedResults(tests.length);\n              estimatedTime = Math.ceil(getEstimatedTime(timings, _this._globalConfig.maxWorkers) / 1000); // Run in band if we only have one test or one worker available, unless we\n              // are using the watch mode, in which case the TTY has to be responsive and\n              // we cannot schedule anything in the main thread. Same logic applies to\n              // watchAll.\n              //\n              // If we are confident from previous runs that the tests will finish\n              // quickly we also run in band to reduce the overhead of spawning workers.\n              areFastTests = timings.every(function (timing) {\n                return timing < SLOW_TEST_TIME;\n              });\n              runInBandWatch = tests.length <= 1 && areFastTests;\n              runInBandNonWatch = _this._globalConfig.maxWorkers <= 1 || tests.length <= 1 || tests.length <= 20 && timings.length > 0 && areFastTests;\n              runInBand = _this._globalConfig.watch || _this._globalConfig.watchAll ? runInBandWatch : runInBandNonWatch;\n              onResult = function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(test, testResult) {\n                  var message, _message;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!watcher.isInterrupted()) {\n                          _context.next = 2;\n                          break;\n                        }\n                        return _context.abrupt(\"return\", Promise.resolve());\n                      case 2:\n                        if (!(testResult.testResults.length === 0)) {\n                          _context.next = 5;\n                          break;\n                        }\n                        message = 'Your test suite must contain at least one test.';\n                        return _context.abrupt(\"return\", onFailure(test, {\n                          message: message,\n                          stack: new Error(message).stack\n                        }));\n                      case 5:\n                        if (!testResult.leaks) {\n                          _context.next = 8;\n                          break;\n                        }\n                        _message = (_chalk || _load_chalk()).default.red.bold('EXPERIMENTAL FEATURE!\\n') + 'Your test suite is leaking memory. Please ensure all references are cleaned.\\n' + '\\n' + 'There is a number of things that can leak memory:\\n' + '  - Async operations that have not finished (e.g. fs.readFile).\\n' + '  - Timers not properly mocked (e.g. setInterval, setTimeout).\\n' + '  - Keeping references to the global scope.';\n                        return _context.abrupt(\"return\", onFailure(test, {\n                          message: _message,\n                          stack: new Error(_message).stack\n                        }));\n                      case 8:\n                        (0, (_testResultHelpers || _load_testResultHelpers()).addResult)(aggregatedResults, testResult);\n                        _context.next = 11;\n                        return _this._dispatcher.onTestResult(test, testResult, aggregatedResults);\n                      case 11:\n                        return _context.abrupt(\"return\", _this._bailIfNeeded(contexts, aggregatedResults, watcher));\n                      case 12:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n                return function onResult(_x, _x2) {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              onFailure = function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(test, error) {\n                  var testResult;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!watcher.isInterrupted()) {\n                          _context2.next = 2;\n                          break;\n                        }\n                        return _context2.abrupt(\"return\");\n                      case 2:\n                        testResult = (0, (_testResultHelpers || _load_testResultHelpers()).buildFailureTestResult)(test.path, error);\n                        testResult.failureMessage = (0, (_jestMessageUtil || _load_jestMessageUtil()).formatExecError)(testResult.testExecError, test.context.config, _this._globalConfig, test.path);\n                        (0, (_testResultHelpers || _load_testResultHelpers()).addResult)(aggregatedResults, testResult);\n                        _context2.next = 7;\n                        return _this._dispatcher.onTestResult(test, testResult, aggregatedResults);\n                      case 7:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                }));\n                return function onFailure(_x3, _x4) {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n              updateSnapshotState = function updateSnapshotState() {\n                contexts.forEach(function (context) {\n                  var status = (_jestSnapshot || _load_jestSnapshot()).default.cleanup(context.hasteFS, _this._globalConfig.updateSnapshot);\n                  aggregatedResults.snapshot.filesRemoved += status.filesRemoved;\n                });\n                var updateAll = _this._globalConfig.updateSnapshot === 'all';\n                aggregatedResults.snapshot.didUpdate = updateAll;\n                aggregatedResults.snapshot.failure = !!(!updateAll && (aggregatedResults.snapshot.unchecked || aggregatedResults.snapshot.unmatched || aggregatedResults.snapshot.filesRemoved));\n              };\n              _context3.next = 15;\n              return _this._dispatcher.onRunStart(aggregatedResults, {\n                estimatedTime: estimatedTime,\n                showStatus: !runInBand\n              });\n            case 15:\n              testRunners = Object.create(null);\n              contexts.forEach(function (_ref3) {\n                var config = _ref3.config;\n                if (!testRunners[config.runner]) {\n                  // $FlowFixMe\n                  testRunners[config.runner] = new (require(config.runner))(_this._globalConfig);\n                }\n              });\n              testsByRunner = _this._partitionTests(testRunners, tests);\n              if (!testsByRunner) {\n                _context3.next = 34;\n                break;\n              }\n              _context3.prev = 19;\n              _i2 = 0, _Object$keys = Object.keys(testRunners);\n            case 21:\n              if (!(_i2 < _Object$keys.length)) {\n                _context3.next = 28;\n                break;\n              }\n              runner = _Object$keys[_i2];\n              _context3.next = 25;\n              return testRunners[runner].runTests(testsByRunner[runner], watcher, onStart, onResult, onFailure, {\n                serial: runInBand || Boolean(testRunners[runner].isSerial)\n              });\n            case 25:\n              _i2++;\n              _context3.next = 21;\n              break;\n            case 28:\n              _context3.next = 34;\n              break;\n            case 30:\n              _context3.prev = 30;\n              _context3.t0 = _context3[\"catch\"](19);\n              if (watcher.isInterrupted()) {\n                _context3.next = 34;\n                break;\n              }\n              throw _context3.t0;\n            case 34:\n              updateSnapshotState();\n              aggregatedResults.wasInterrupted = watcher.isInterrupted();\n              _context3.next = 38;\n              return _this._dispatcher.onRunComplete(contexts, aggregatedResults);\n            case 38:\n              anyTestFailures = !(aggregatedResults.numFailedTests === 0 && aggregatedResults.numRuntimeErrorTestSuites === 0);\n              anyReporterErrors = _this._dispatcher.hasErrors();\n              aggregatedResults.success = !(anyTestFailures || aggregatedResults.snapshot.failure || anyReporterErrors);\n              return _context3.abrupt(\"return\", aggregatedResults);\n            case 42:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[19, 30]]);\n      }))();\n    }\n  }, {\n    key: \"_partitionTests\",\n    value: function _partitionTests(testRunners, tests) {\n      if (Object.keys(testRunners).length > 1) {\n        return tests.reduce(function (testRuns, test) {\n          var runner = test.context.config.runner;\n          if (!testRuns[runner]) {\n            testRuns[runner] = [];\n          }\n          testRuns[runner].push(test);\n          return testRuns;\n        }, Object.create(null));\n      } else if (tests.length > 0 && tests[0] != null) {\n        // If there is only one runner, don't partition the tests.\n        return Object.assign(Object.create(null), _defineProperty({}, tests[0].context.config.runner, tests));\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"_shouldAddDefaultReporters\",\n    value: function _shouldAddDefaultReporters(reporters) {\n      var _this2 = this;\n      return !reporters || !!reporters.find(function (reporter) {\n        return _this2._getReporterProps(reporter).path === 'default';\n      });\n    }\n  }, {\n    key: \"_setupReporters\",\n    value: function _setupReporters() {\n      var _globalConfig = this._globalConfig;\n      var collectCoverage = _globalConfig.collectCoverage,\n        notify = _globalConfig.notify,\n        reporters = _globalConfig.reporters;\n      var isDefault = this._shouldAddDefaultReporters(reporters);\n      if (isDefault) {\n        this._setupDefaultReporters(collectCoverage);\n      }\n      if (!isDefault && collectCoverage) {\n        this.addReporter(new (_coverage_reporter || _load_coverage_reporter()).default(this._globalConfig));\n      }\n      if (notify) {\n        this.addReporter(new (_notify_reporter || _load_notify_reporter()).default(this._globalConfig, this._options.startRun, this._context));\n      }\n      if (reporters && Array.isArray(reporters)) {\n        this._addCustomReporters(reporters);\n      }\n    }\n  }, {\n    key: \"_setupDefaultReporters\",\n    value: function _setupDefaultReporters(collectCoverage) {\n      this.addReporter(this._globalConfig.verbose ? new (_verbose_reporter || _load_verbose_reporter()).default(this._globalConfig) : new (_default_reporter || _load_default_reporter()).default(this._globalConfig));\n      if (collectCoverage) {\n        this.addReporter(new (_coverage_reporter || _load_coverage_reporter()).default(this._globalConfig));\n      }\n      this.addReporter(new (_summary_reporter || _load_summary_reporter()).default(this._globalConfig));\n    }\n  }, {\n    key: \"_addCustomReporters\",\n    value: function _addCustomReporters(reporters) {\n      var _this3 = this;\n      reporters.forEach(function (reporter, index) {\n        var _getReporterProps = _this3._getReporterProps(reporter);\n        var options = _getReporterProps.options,\n          path = _getReporterProps.path;\n        if (path === 'default') return;\n        try {\n          // $FlowFixMe\n          var Reporter = require(path);\n          _this3.addReporter(new Reporter(_this3._globalConfig, options));\n        } catch (error) {\n          throw new Error('An error occurred while adding the reporter at path \"' + path + '\".' + error.message);\n        }\n      });\n    }\n    /**\n     * Get properties of a reporter in an object\n     * to make dealing with them less painful.\n     */\n  }, {\n    key: \"_getReporterProps\",\n    value: function _getReporterProps(reporter) {\n      if (typeof reporter === 'string') {\n        return {\n          options: this._options,\n          path: reporter\n        };\n      } else if (Array.isArray(reporter)) {\n        var _reporter = _slicedToArray(reporter, 2);\n        var path = _reporter[0],\n          options = _reporter[1];\n        return {\n          options: options,\n          path: path\n        };\n      }\n      throw new Error('Reporter should be either a string or an array');\n    }\n  }, {\n    key: \"_bailIfNeeded\",\n    value: function _bailIfNeeded(contexts, aggregatedResults, watcher) {\n      if (this._globalConfig.bail && aggregatedResults.numFailedTests !== 0) {\n        if (watcher.isWatchMode()) {\n          watcher.setState({\n            interrupted: true\n          });\n        } else {\n          var failureExit = function failureExit() {\n            return (0, (_exit || _load_exit()).default)(1);\n          };\n          return this._dispatcher.onRunComplete(contexts, aggregatedResults).then(failureExit).catch(failureExit);\n        }\n      }\n      return Promise.resolve();\n    }\n  }]);\n  return TestScheduler;\n}();\nexports.default = TestScheduler;\nvar createAggregatedResults = function createAggregatedResults(numTotalTestSuites) {\n  var result = (0, (_testResultHelpers || _load_testResultHelpers()).makeEmptyAggregatedTestResult)();\n  result.numTotalTestSuites = numTotalTestSuites;\n  result.startTime = Date.now();\n  result.success = false;\n  return result;\n};\nvar getEstimatedTime = function getEstimatedTime(timings, workers) {\n  if (!timings.length) {\n    return 0;\n  }\n  var max = Math.max.apply(null, timings);\n  return timings.length <= workers ? max : Math.max(timings.reduce(function (sum, time) {\n    return sum + time;\n  }) / workers, max);\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var util = require('util'),\n  os = require('os'),\n  path = require('path'),\n  mkdirp = require('mkdirp'),\n  rimraf = require('rimraf'),\n  fs = require('fs');\nfunction SourceStore( /*opts*/\n) {}\nSourceStore.prototype.registerSource = function /* filePath, sourceText */\n() {\n  throw new Error('registerSource must be overridden');\n};\nSourceStore.prototype.getSource = function /* filePath */\n() {\n  throw new Error('getSource must be overridden');\n};\nSourceStore.prototype.dispose = function () {};\nfunction MemoryStore() {\n  this.data = {};\n}\nutil.inherits(MemoryStore, SourceStore);\nMemoryStore.prototype.registerSource = function (filePath, sourceText) {\n  this.data[filePath] = sourceText;\n};\nMemoryStore.prototype.getSource = function (filePath) {\n  return this.data[filePath] || null;\n};\nfunction FileStore(opts) {\n  opts = opts || {};\n  var tmpDir = opts.tmpdir || os.tmpdir();\n  this.counter = 0;\n  this.mappings = [];\n  this.basePath = path.resolve(tmpDir, '.istanbul', 'cache_');\n  mkdirp.sync(path.dirname(this.basePath));\n}\nutil.inherits(FileStore, SourceStore);\nFileStore.prototype.registerSource = function (filePath, sourceText) {\n  if (this.mappings[filePath]) {\n    return;\n  }\n  this.counter += 1;\n  var mapFile = this.basePath + this.counter;\n  this.mappings[filePath] = mapFile;\n  fs.writeFileSync(mapFile, sourceText, 'utf8');\n};\nFileStore.prototype.getSource = function (filePath) {\n  var mapFile = this.mappings[filePath];\n  if (!mapFile) {\n    return null;\n  }\n  return fs.readFileSync(mapFile, 'utf8');\n};\nFileStore.prototype.dispose = function () {\n  this.mappings = [];\n  rimraf.sync(path.dirname(this.basePath));\n};\nmodule.exports = {\n  create: function create(type, opts) {\n    opts = opts || {};\n    type = (type || 'memory').toLowerCase();\n    if (type === 'file') {\n      return new FileStore(opts);\n    }\n    return new MemoryStore(opts);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
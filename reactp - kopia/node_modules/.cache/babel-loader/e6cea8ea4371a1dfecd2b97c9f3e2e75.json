{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadBlockHoistPlugin;\nfunction _traverse() {\n  var data = require(\"@babel/traverse\");\n  _traverse = function _traverse() {\n    return data;\n  };\n  return data;\n}\nvar _plugin = require(\"../config/plugin\");\nvar LOADED_PLUGIN;\nvar blockHoistPlugin = {\n  name: \"internal.blockHoist\",\n  visitor: {\n    Block: {\n      exit: function exit(_ref) {\n        var node = _ref.node;\n        var body = node.body;\n        var max = Math.pow(2, 30) - 1;\n        var hasChange = false;\n        for (var i = 0; i < body.length; i++) {\n          var n = body[i];\n          var p = priority(n);\n          if (p > max) {\n            hasChange = true;\n            break;\n          }\n          max = p;\n        }\n        if (!hasChange) return;\n        node.body = stableSort(body.slice());\n      }\n    }\n  }\n};\nfunction loadBlockHoistPlugin() {\n  if (!LOADED_PLUGIN) {\n    LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, {\n      visitor: _traverse().default.explode(blockHoistPlugin.visitor)\n    }), {});\n  }\n  return LOADED_PLUGIN;\n}\nfunction priority(bodyNode) {\n  var priority = bodyNode == null ? void 0 : bodyNode._blockHoist;\n  if (priority == null) return 1;\n  if (priority === true) return 2;\n  return priority;\n}\nfunction stableSort(body) {\n  var buckets = Object.create(null);\n  for (var i = 0; i < body.length; i++) {\n    var n = body[i];\n    var p = priority(n);\n    var bucket = buckets[p] || (buckets[p] = []);\n    bucket.push(n);\n  }\n  var keys = Object.keys(buckets).map(function (k) {\n    return +k;\n  }).sort(function (a, b) {\n    return b - a;\n  });\n  var index = 0;\n  var _iterator = _createForOfIteratorHelper(keys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var _bucket = buckets[key];\n      var _iterator2 = _createForOfIteratorHelper(_bucket),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _n = _step2.value;\n          body[index++] = _n;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return body;\n}\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar async = require('async'),\n  fileset = require('fileset'),\n  fs = require('fs'),\n  path = require('path'),\n  seq = 0;\nfunction filesFor(options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  var root = options.root,\n    includes = options.includes,\n    excludes = options.excludes,\n    realpath = options.realpath,\n    relative = options.relative,\n    opts;\n  root = root || process.cwd();\n  includes = includes && Array.isArray(includes) ? includes : ['**/*.js'];\n  excludes = excludes && Array.isArray(excludes) ? excludes : ['**/node_modules/**'];\n  opts = {\n    cwd: root,\n    nodir: true,\n    ignore: excludes\n  };\n  seq += 1;\n  opts['x' + seq + new Date().getTime()] = true; //cache buster for minimatch cache bug\n  fileset(includes.join(' '), excludes.join(' '), opts, function (err, files) {\n    /* istanbul ignore if - untestable */\n    if (err) {\n      return callback(err);\n    }\n    if (relative) {\n      return callback(err, files);\n    }\n    if (!realpath) {\n      files = files.map(function (file) {\n        return path.resolve(root, file);\n      });\n      return callback(err, files);\n    }\n    var realPathCache = module.constructor._realpathCache || /* istanbul ignore next */{};\n    async.map(files, function (file, done) {\n      fs.realpath(path.resolve(root, file), realPathCache, done);\n    }, callback);\n  });\n}\nfunction matcherFor(options, callback) {\n  if (!callback && typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n  options = options || {};\n  options.relative = false; //force absolute paths\n  options.realpath = true; //force real paths (to match Node.js module paths)\n\n  filesFor(options, function (err, files) {\n    var fileMap = {},\n      matchFn;\n    /* istanbul ignore if - untestable */\n    if (err) {\n      return callback(err);\n    }\n    files.forEach(function (file) {\n      fileMap[file] = true;\n    });\n    matchFn = function matchFn(file) {\n      return fileMap[file];\n    };\n    matchFn.files = Object.keys(fileMap);\n    return callback(null, matchFn);\n  });\n}\nmodule.exports = {\n  filesFor: filesFor,\n  matcherFor: matcherFor\n};","map":null,"metadata":{},"sourceType":"script"}
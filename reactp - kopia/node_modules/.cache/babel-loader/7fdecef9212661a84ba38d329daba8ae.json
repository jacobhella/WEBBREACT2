{"ast":null,"code":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\nvar _normalize_path_sep;\nfunction _load_normalize_path_sep() {\n  return _normalize_path_sep = _interopRequireDefault(require('../lib/normalize_path_sep'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _fbWatchman;\nfunction _load_fbWatchman() {\n  return _fbWatchman = _interopRequireDefault(require('fb-watchman'));\n}\nvar _constants;\nfunction _load_constants() {\n  return _constants = _interopRequireDefault(require('../constants'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar watchmanURL = 'https://facebook.github.io/watchman/docs/troubleshooting.html';\nfunction WatchmanError(error) {\n  error.message = \"Watchman error: \".concat(error.message.trim(), \". Make sure watchman \") + \"is running for this project. See \".concat(watchmanURL, \".\");\n  return error;\n}\nmodule.exports = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(options) {\n    var getWatchmanRoots, queryWatchmanForDirs, fields, data, extensions, ignore, roots, defaultWatchExpression, clocks, client, clientError, cmd, _ref2, capabilities, files, watchmanFiles, watchmanRoots, watchmanFileResults, _iterator4, _step4, _ref9, _ref10, watchRoot, response, fsRoot, _iterator5, _step5, fileData, name, mtime, existingFileData, isOld, sha1hex;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          getWatchmanRoots = function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(roots) {\n              var watchmanRoots;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    watchmanRoots = new Map();\n                    _context2.next = 3;\n                    return Promise.all(roots.map(function () {\n                      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(root) {\n                        var response, existing, canBeFiltered;\n                        return _regeneratorRuntime().wrap(function _callee$(_context) {\n                          while (1) switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return cmd('watch-project', root);\n                            case 2:\n                              response = _context.sent;\n                              existing = watchmanRoots.get(response.watch); // A root can only be filtered if it was never seen with a\n                              // relative_path before.\n                              canBeFiltered = !existing || existing.length > 0;\n                              if (canBeFiltered) {\n                                if (response.relative_path) {\n                                  watchmanRoots.set(response.watch, (existing || []).concat(response.relative_path));\n                                } else {\n                                  // Make the filter directories an empty array to signal that this\n                                  // root was already seen and needs to be watched for all files or\n                                  // directories.\n                                  watchmanRoots.set(response.watch, []);\n                                }\n                              }\n                            case 6:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }, _callee);\n                      }));\n                      return function (_x3) {\n                        return _ref4.apply(this, arguments);\n                      };\n                    }()));\n                  case 3:\n                    return _context2.abrupt(\"return\", watchmanRoots);\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function getWatchmanRoots(_x2) {\n              return _ref3.apply(this, arguments);\n            };\n          }();\n          queryWatchmanForDirs = function () {\n            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(rootProjectDirMappings) {\n              var files, isFresh;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    files = new Map();\n                    isFresh = false;\n                    _context4.next = 4;\n                    return Promise.all(Array.from(rootProjectDirMappings).map(function () {\n                      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref6) {\n                        var _ref8, root, directoryFilters, expression, glob, _iterator, _step, directory, _iterator2, _step2, extension, _iterator3, _step3, _extension, query, response;\n                        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                          while (1) switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _ref8 = _slicedToArray(_ref6, 2);\n                              root = _ref8[0], directoryFilters = _ref8[1];\n                              expression = Array.from(defaultWatchExpression);\n                              glob = [];\n                              if (directoryFilters.length > 0) {\n                                expression.push(['anyof'].concat(_toConsumableArray(directoryFilters.map(function (dir) {\n                                  return ['dirname', dir];\n                                }))));\n                                _iterator = _createForOfIteratorHelper(directoryFilters);\n                                try {\n                                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                                    directory = _step.value;\n                                    _iterator2 = _createForOfIteratorHelper(extensions);\n                                    try {\n                                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                                        extension = _step2.value;\n                                        glob.push(\"\".concat(directory, \"/**/*.\").concat(extension));\n                                      }\n                                    } catch (err) {\n                                      _iterator2.e(err);\n                                    } finally {\n                                      _iterator2.f();\n                                    }\n                                  }\n                                } catch (err) {\n                                  _iterator.e(err);\n                                } finally {\n                                  _iterator.f();\n                                }\n                              } else {\n                                _iterator3 = _createForOfIteratorHelper(extensions);\n                                try {\n                                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                                    _extension = _step3.value;\n                                    glob.push(\"**/*.\".concat(_extension));\n                                  }\n                                } catch (err) {\n                                  _iterator3.e(err);\n                                } finally {\n                                  _iterator3.f();\n                                }\n                              }\n                              query = clocks[root] // Use the `since` generator if we have a clock available\n                              ? {\n                                expression: expression,\n                                fields: fields,\n                                since: clocks[root]\n                              } // Otherwise use the `glob` filter\n                              : {\n                                expression: expression,\n                                fields: fields,\n                                glob: glob\n                              };\n                              _context3.next = 8;\n                              return cmd('query', root, query);\n                            case 8:\n                              response = _context3.sent;\n                              if ('warning' in response) {\n                                console.warn('watchman warning: ', response.warning);\n                              }\n                              isFresh = isFresh || response.is_fresh_instance;\n                              files.set(root, response);\n                            case 12:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }, _callee3);\n                      }));\n                      return function (_x5) {\n                        return _ref7.apply(this, arguments);\n                      };\n                    }()));\n                  case 4:\n                    return _context4.abrupt(\"return\", {\n                      files: files,\n                      isFresh: isFresh\n                    });\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n            return function queryWatchmanForDirs(_x4) {\n              return _ref5.apply(this, arguments);\n            };\n          }();\n          fields = ['name', 'exists', 'mtime_ms'];\n          data = options.data, extensions = options.extensions, ignore = options.ignore, roots = options.roots;\n          defaultWatchExpression = ['allof', ['type', 'f'], ['anyof'].concat(extensions.map(function (extension) {\n            return ['suffix', extension];\n          }))];\n          clocks = data.clocks;\n          client = new (_fbWatchman || _load_fbWatchman()).default.Client();\n          client.on('error', function (error) {\n            return clientError = WatchmanError(error);\n          });\n          cmd = function cmd() {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return new Promise(function (resolve, reject) {\n              return client.command(args, function (error, result) {\n                return error ? reject(WatchmanError(error)) : resolve(result);\n              });\n            });\n          };\n          if (!options.computeSha1) {\n            _context5.next = 15;\n            break;\n          }\n          _context5.next = 12;\n          return cmd('list-capabilities');\n        case 12:\n          _ref2 = _context5.sent;\n          capabilities = _ref2.capabilities;\n          if (capabilities.indexOf('field-content.sha1hex') !== -1) {\n            fields.push('content.sha1hex');\n          }\n        case 15:\n          files = data.files;\n          _context5.prev = 16;\n          _context5.next = 19;\n          return getWatchmanRoots(roots);\n        case 19:\n          watchmanRoots = _context5.sent;\n          _context5.next = 22;\n          return queryWatchmanForDirs(watchmanRoots);\n        case 22:\n          watchmanFileResults = _context5.sent;\n          // Reset the file map if watchman was restarted and sends us a list of\n          // files.\n          if (watchmanFileResults.isFresh) {\n            files = Object.create(null);\n          }\n          watchmanFiles = watchmanFileResults.files;\n        case 25:\n          _context5.prev = 25;\n          client.end();\n          return _context5.finish(25);\n        case 28:\n          if (!clientError) {\n            _context5.next = 30;\n            break;\n          }\n          throw clientError;\n        case 30:\n          _iterator4 = _createForOfIteratorHelper(watchmanFiles);\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              _ref9 = _step4.value;\n              _ref10 = _slicedToArray(_ref9, 2);\n              watchRoot = _ref10[0];\n              response = _ref10[1];\n              fsRoot = (0, (_normalize_path_sep || _load_normalize_path_sep()).default)(watchRoot);\n              clocks[fsRoot] = response.clock;\n              _iterator5 = _createForOfIteratorHelper(response.files);\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  fileData = _step5.value;\n                  name = fsRoot + (_path || _load_path()).default.sep + (0, (_normalize_path_sep || _load_normalize_path_sep()).default)(fileData.name);\n                  if (!fileData.exists) {\n                    delete files[name];\n                  } else if (!ignore(name)) {\n                    mtime = typeof fileData.mtime_ms === 'number' ? fileData.mtime_ms : fileData.mtime_ms.toNumber();\n                    existingFileData = data.files[name];\n                    isOld = existingFileData && existingFileData[(_constants || _load_constants()).default.MTIME] === mtime;\n                    if (isOld) {\n                      files[name] = existingFileData;\n                    } else {\n                      sha1hex = fileData['content.sha1hex'];\n                      if (typeof sha1hex !== 'string' || sha1hex.length !== 40) {\n                        sha1hex = null;\n                      }\n\n                      // See ../constants.js\n                      files[name] = ['', mtime, 0, [], sha1hex];\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          data.files = files;\n          return _context5.abrupt(\"return\", data);\n        case 34:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5, null, [[16,, 25, 28]]);\n  }));\n  function watchmanCrawl(_x) {\n    return _ref.apply(this, arguments);\n  }\n  return watchmanCrawl;\n}();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _create_spy = require('./create_spy');\nvar _create_spy2 = _interopRequireDefault(_create_spy);\nvar _Env = require('./Env');\nvar _Env2 = _interopRequireDefault(_Env);\nvar _js_api_reporter = require('./js_api_reporter');\nvar _js_api_reporter2 = _interopRequireDefault(_js_api_reporter);\nvar _report_dispatcher = require('./report_dispatcher');\nvar _report_dispatcher2 = _interopRequireDefault(_report_dispatcher);\nvar _Spec = require('./Spec');\nvar _Spec2 = _interopRequireDefault(_Spec);\nvar _spy_registry = require('./spy_registry');\nvar _spy_registry2 = _interopRequireDefault(_spy_registry);\nvar _Suite = require('./Suite');\nvar _Suite2 = _interopRequireDefault(_Suite);\nvar _Timer = require('./Timer');\nvar _Timer2 = _interopRequireDefault(_Timer);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nexports.create = function (createOptions) {\n  var j$ = Object.assign({}, createOptions);\n  j$._DEFAULT_TIMEOUT_INTERVAL = 5000;\n  j$.getEnv = function (options) {\n    var env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options);\n    //jasmine. singletons in here (setTimeout blah blah).\n    return env;\n  };\n  j$.createSpy = _create_spy2.default;\n  j$.Env = (0, _Env2.default)(j$);\n  j$.JsApiReporter = _js_api_reporter2.default;\n  j$.ReportDispatcher = _report_dispatcher2.default;\n  j$.Spec = _Spec2.default;\n  j$.SpyRegistry = _spy_registry2.default;\n  j$.Suite = _Suite2.default;\n  j$.Timer = _Timer2.default;\n  j$.version = '2.5.2-light';\n  return j$;\n};\n\n// Interface is a reserved word in strict mode, so can't export it as ESM\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// This file is a heavily modified fork of Jasmine. Original license:\n/*\nCopyright (c) 2008-2016 Pivotal Labs\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* eslint-disable sort-keys */\n\nexports.interface = function (jasmine, env) {\n  var jasmineInterface = {\n    describe: function describe(description, specDefinitions) {\n      return env.describe(description, specDefinitions);\n    },\n    xdescribe: function xdescribe(description, specDefinitions) {\n      return env.xdescribe(description, specDefinitions);\n    },\n    fdescribe: function fdescribe(description, specDefinitions) {\n      return env.fdescribe(description, specDefinitions);\n    },\n    it: function it() {\n      return env.it.apply(env, arguments);\n    },\n    xit: function xit() {\n      return env.xit.apply(env, arguments);\n    },\n    fit: function fit() {\n      return env.fit.apply(env, arguments);\n    },\n    beforeEach: function beforeEach() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n      return env.beforeEach.apply(env, arguments);\n    },\n    afterEach: function afterEach() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n      return env.afterEach.apply(env, arguments);\n    },\n    beforeAll: function beforeAll() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n      return env.beforeAll.apply(env, arguments);\n    },\n    afterAll: function afterAll() {\n      if (typeof arguments[0] !== 'function') {\n        throw new Error('Invalid first argument. It must be a callback function.');\n      }\n      return env.afterAll.apply(env, arguments);\n    },\n    pending: function pending() {\n      return env.pending.apply(env, arguments);\n    },\n    fail: function fail() {\n      return env.fail.apply(env, arguments);\n    },\n    spyOn: function spyOn(obj, methodName, accessType) {\n      return env.spyOn(obj, methodName, accessType);\n    },\n    jsApiReporter: new jasmine.JsApiReporter({\n      timer: new jasmine.Timer()\n    }),\n    jasmine: jasmine\n  };\n  return jasmineInterface;\n};","map":null,"metadata":{},"sourceType":"script"}
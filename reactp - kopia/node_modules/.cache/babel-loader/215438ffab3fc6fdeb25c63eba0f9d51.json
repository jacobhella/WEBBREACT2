{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nexports.createReporterError = createReporterError;\nexports.createArrayReporterError = createArrayReporterError;\nexports.validateReporters = validateReporters;\nvar _jestValidate;\nfunction _load_jestValidate() {\n  return _jestValidate = require('jest-validate');\n}\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _jestGetType;\nfunction _load_jestGetType() {\n  return _jestGetType = _interopRequireDefault(require('jest-get-type'));\n}\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./utils');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar validReporterTypes = ['array', 'string'];\nvar ERROR = \"\".concat((_utils || _load_utils()).BULLET, \"Reporter Validation Error\");\n\n/**\n * Reporter Validation Error is thrown if the given arguments\n * within the reporter are not valid.\n *\n * This is a highly specific reporter error and in the future will be\n * merged with jest-validate. Till then, we can make use of it. It works\n * and that's what counts most at this time.\n */\nfunction createReporterError(reporterIndex, reporterValue) {\n  var errorMessage = \"  Reporter at index \".concat(reporterIndex, \" must be of type:\\n\") + \"    \".concat((_chalk || _load_chalk()).default.bold.green(validReporterTypes.join(' or ')), \"\\n\") + \"  but instead received:\\n\" + \"    \".concat((_chalk || _load_chalk()).default.bold.red((0, (_jestGetType || _load_jestGetType()).default)(reporterValue)));\n  return new (_jestValidate || _load_jestValidate()).ValidationError(ERROR, errorMessage, (_utils || _load_utils()).DOCUMENTATION_NOTE);\n}\nfunction createArrayReporterError(arrayReporter, reporterIndex, valueIndex, value, expectedType, valueName) {\n  var errorMessage = \"  Unexpected value for \".concat(valueName, \" \") + \"at index \".concat(valueIndex, \" of reporter at index \").concat(reporterIndex, \"\\n\") + '  Expected:\\n' + \"    \".concat((_chalk || _load_chalk()).default.bold.red(expectedType), \"\\n\") + '  Got:\\n' + \"    \".concat((_chalk || _load_chalk()).default.bold.green((0, (_jestGetType || _load_jestGetType()).default)(value)), \"\\n\") + \"  Reporter configuration:\\n\" + \"    \".concat((_chalk || _load_chalk()).default.bold.green(JSON.stringify(arrayReporter, null, 2).split('\\n').join('\\n    ')));\n  return new (_jestValidate || _load_jestValidate()).ValidationError(ERROR, errorMessage, (_utils || _load_utils()).DOCUMENTATION_NOTE);\n}\nfunction validateReporters(reporterConfig) {\n  return reporterConfig.every(function (reporter, index) {\n    if (Array.isArray(reporter)) {\n      validateArrayReporter(reporter, index);\n    } else if (typeof reporter !== 'string') {\n      throw createReporterError(index, reporter);\n    }\n    return true;\n  });\n}\nfunction validateArrayReporter(arrayReporter, reporterIndex) {\n  var _arrayReporter = _slicedToArray(arrayReporter, 2);\n  var path = _arrayReporter[0],\n    options = _arrayReporter[1];\n  if (typeof path !== 'string') {\n    throw createArrayReporterError(arrayReporter, reporterIndex, 0, path, 'string', 'Path');\n  } else if (typeof options !== 'object') {\n    throw createArrayReporterError(arrayReporter, reporterIndex, 1, options, 'object', 'Reporter Configuration');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
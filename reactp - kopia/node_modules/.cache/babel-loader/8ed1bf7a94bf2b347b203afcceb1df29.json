{"ast":null,"code":"'use strict';\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _micromatch;\nfunction _load_micromatch() {\n  return _micromatch = _interopRequireDefault(require('micromatch'));\n}\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _jestUtil;\nfunction _load_jestUtil() {\n  return _jestUtil = require('jest-util');\n}\nvar _exit;\nfunction _load_exit() {\n  return _exit = _interopRequireDefault(require('exit'));\n}\nvar _gracefulFs;\nfunction _load_gracefulFs() {\n  return _gracefulFs = _interopRequireDefault(require('graceful-fs'));\n}\nvar _getNoTestsFoundMessage;\nfunction _load_getNoTestsFoundMessage() {\n  return _getNoTestsFoundMessage = _interopRequireDefault(require('./getNoTestsFoundMessage'));\n}\nvar _SearchSource;\nfunction _load_SearchSource() {\n  return _SearchSource = _interopRequireDefault(require('./SearchSource'));\n}\nvar _TestScheduler;\nfunction _load_TestScheduler() {\n  return _TestScheduler = _interopRequireDefault(require('./TestScheduler'));\n}\nvar _TestSequencer;\nfunction _load_TestSequencer() {\n  return _TestSequencer = _interopRequireDefault(require('./TestSequencer'));\n}\nvar _testResultHelpers;\nfunction _load_testResultHelpers() {\n  return _testResultHelpers = require('./testResultHelpers');\n}\nvar _FailedTestsCache;\nfunction _load_FailedTestsCache() {\n  return _FailedTestsCache = _interopRequireDefault(require('./FailedTestsCache'));\n}\nvar _jestWatcher;\nfunction _load_jestWatcher() {\n  return _jestWatcher = require('jest-watcher');\n}\nvar _collectHandles;\nfunction _load_collectHandles() {\n  return _collectHandles = _interopRequireDefault(require('./collectHandles'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar setConfig = function setConfig(contexts, newConfig) {\n  return contexts.forEach(function (context) {\n    return context.config = Object.freeze(Object.assign({}, context.config, newConfig));\n  });\n};\nvar getTestPaths = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(globalConfig, context, outputStream, changedFilesPromise, jestHooks) {\n    var source, data, shouldTestArray, filteredTests;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          source = new (_SearchSource || _load_SearchSource()).default(context);\n          _context.next = 3;\n          return source.getTestPaths(globalConfig, changedFilesPromise);\n        case 3:\n          data = _context.sent;\n          if (!data.tests.length && globalConfig.onlyChanged && data.noSCM) {\n            new (_jestUtil || _load_jestUtil()).Console(outputStream, outputStream).log('Jest can only find uncommitted changed files in a git or hg ' + 'repository. If you make your project a git or hg ' + 'repository (`git init` or `hg init`), Jest will be able ' + 'to only run tests related to files changed since the last ' + 'commit.');\n          }\n          _context.next = 7;\n          return Promise.all(data.tests.map(function (test) {\n            return jestHooks.shouldRunTestSuite({\n              config: test.context.config,\n              duration: test.duration,\n              testPath: test.path\n            });\n          }));\n        case 7:\n          shouldTestArray = _context.sent;\n          filteredTests = data.tests.filter(function (test, i) {\n            return shouldTestArray[i];\n          });\n          return _context.abrupt(\"return\", Object.assign({}, data, {\n            allTests: filteredTests.length,\n            tests: filteredTests\n          }));\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getTestPaths(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar processResults = function processResults(runResults, options) {\n  var outputFile = options.outputFile,\n    isJSON = options.isJSON,\n    onComplete = options.onComplete,\n    outputStream = options.outputStream,\n    testResultsProcessor = options.testResultsProcessor,\n    collectHandles = options.collectHandles;\n  if (collectHandles) {\n    runResults.openHandles = collectHandles();\n  } else {\n    runResults.openHandles = [];\n  }\n  if (testResultsProcessor) {\n    /* $FlowFixMe */\n    runResults = require(testResultsProcessor)(runResults);\n  }\n  if (isJSON) {\n    if (outputFile) {\n      var filePath = (_path || _load_path()).default.resolve(process.cwd(), outputFile);\n      (_gracefulFs || _load_gracefulFs()).default.writeFileSync(filePath, JSON.stringify((0, (_jestUtil || _load_jestUtil()).formatTestResults)(runResults)));\n      outputStream.write(\"Test results written to: \" + \"\".concat((_path || _load_path()).default.relative(process.cwd(), filePath), \"\\n\"));\n    } else {\n      process.stdout.write(JSON.stringify((0, (_jestUtil || _load_jestUtil()).formatTestResults)(runResults)));\n    }\n  }\n  return onComplete && onComplete(runResults);\n};\nvar testSchedulerContext = {\n  firstRun: true,\n  previousSuccess: true\n};\nexports.default = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref2) {\n    var contexts, globalConfig, outputStream, testWatcher, _ref2$jestHooks, jestHooks, startRun, changedFilesPromise, onComplete, failedTestsCache, sequencer, allTests, _ref4, repos, noSCM, collectCoverageFrom, testRunData, newConfig, testsPaths, noTestsFoundMessage, _newConfig, collectHandles, globalSetup, results, globalTeardown;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          contexts = _ref2.contexts, globalConfig = _ref2.globalConfig, outputStream = _ref2.outputStream, testWatcher = _ref2.testWatcher;\n          _ref2$jestHooks = _ref2.jestHooks;\n          jestHooks = _ref2$jestHooks === undefined ? new (_jestWatcher || _load_jestWatcher()).JestHook().getEmitter() : _ref2$jestHooks, startRun = _ref2.startRun, changedFilesPromise = _ref2.changedFilesPromise, onComplete = _ref2.onComplete, failedTestsCache = _ref2.failedTestsCache;\n          sequencer = new (_TestSequencer || _load_TestSequencer()).default();\n          allTests = [];\n          if (!(changedFilesPromise && globalConfig.watch)) {\n            _context3.next = 12;\n            break;\n          }\n          _context3.next = 8;\n          return changedFilesPromise;\n        case 8:\n          _ref4 = _context3.sent;\n          repos = _ref4.repos;\n          noSCM = Object.keys(repos).every(function (scm) {\n            return repos[scm].size === 0;\n          });\n          if (noSCM) {\n            process.stderr.write('\\n' + (_chalk || _load_chalk()).default.bold('--watch') + ' is not supported without git/hg, please use --watchAll ' + '\\n');\n            (0, (_exit || _load_exit()).default)(1);\n          }\n        case 12:\n          collectCoverageFrom = [];\n          _context3.next = 15;\n          return Promise.all(contexts.map(function () {\n            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(context) {\n              var matches;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return getTestPaths(globalConfig, context, outputStream, changedFilesPromise, jestHooks);\n                  case 2:\n                    matches = _context2.sent;\n                    allTests = allTests.concat(matches.tests);\n                    if (matches.collectCoverageFrom) {\n                      collectCoverageFrom = collectCoverageFrom.concat(matches.collectCoverageFrom.filter(function (filename) {\n                        if (globalConfig.collectCoverageFrom && !(0, (_micromatch || _load_micromatch()).default)([(_path || _load_path()).default.relative(globalConfig.rootDir, filename)], globalConfig.collectCoverageFrom).length) {\n                          return false;\n                        }\n                        if (globalConfig.coveragePathIgnorePatterns && globalConfig.coveragePathIgnorePatterns.some(function (pattern) {\n                          return filename.match(pattern);\n                        })) {\n                          return false;\n                        }\n                        return true;\n                      }));\n                    }\n                    return _context2.abrupt(\"return\", {\n                      context: context,\n                      matches: matches\n                    });\n                  case 6:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            return function (_x7) {\n              return _ref5.apply(this, arguments);\n            };\n          }()));\n        case 15:\n          testRunData = _context3.sent;\n          if (collectCoverageFrom.length) {\n            // $FlowFixMe Object.assign\n            newConfig = Object.assign({}, globalConfig, {\n              collectCoverageFrom: collectCoverageFrom\n            });\n            globalConfig = Object.freeze(newConfig);\n          }\n          allTests = sequencer.sort(allTests);\n          if (!globalConfig.listTests) {\n            _context3.next = 23;\n            break;\n          }\n          testsPaths = Array.from(new Set(allTests.map(function (test) {\n            return test.path;\n          })));\n          if (globalConfig.json) {\n            console.log(JSON.stringify(testsPaths));\n          } else {\n            console.log(testsPaths.join('\\n'));\n          }\n          onComplete && onComplete((0, (_testResultHelpers || _load_testResultHelpers()).makeEmptyAggregatedTestResult)());\n          return _context3.abrupt(\"return\", null);\n        case 23:\n          if (globalConfig.onlyFailures && failedTestsCache) {\n            allTests = failedTestsCache.filterTests(allTests);\n            globalConfig = failedTestsCache.updateConfig(globalConfig);\n          }\n          if (!allTests.length) {\n            noTestsFoundMessage = (0, (_getNoTestsFoundMessage || _load_getNoTestsFoundMessage()).default)(testRunData, globalConfig);\n            if (globalConfig.passWithNoTests || globalConfig.findRelatedTests || globalConfig.lastCommit || globalConfig.onlyChanged) {\n              new (_jestUtil || _load_jestUtil()).Console(outputStream, outputStream).log(noTestsFoundMessage);\n            } else {\n              new (_jestUtil || _load_jestUtil()).Console(outputStream, outputStream).error(noTestsFoundMessage);\n              (0, (_exit || _load_exit()).default)(1);\n            }\n          } else if (allTests.length === 1 && globalConfig.silent !== true && globalConfig.verbose !== false) {\n            // $FlowFixMe Object.assign\n            _newConfig = Object.assign({}, globalConfig, {\n              verbose: true\n            });\n            globalConfig = Object.freeze(_newConfig);\n          }\n\n          // When using more than one context, make all printed paths relative to the\n          // current cwd. Do not modify rootDir, since will be used by custom resolvers.\n          // If --runInBand is true, the resolver saved a copy during initialization,\n          // however, if it is running on spawned processes, the initiation of the\n          // custom resolvers is done within each spawned process and it needs the\n          // original value of rootDir. Instead, use the {cwd: Path} property to resolve\n          // paths when printing.\n          setConfig(contexts, {\n            cwd: process.cwd()\n          });\n          if (globalConfig.detectOpenHandles) {\n            collectHandles = (0, (_collectHandles || _load_collectHandles()).default)();\n          }\n          if (!globalConfig.globalSetup) {\n            _context3.next = 33;\n            break;\n          }\n          // $FlowFixMe\n          globalSetup = require(globalConfig.globalSetup);\n          if (!(typeof globalSetup !== 'function')) {\n            _context3.next = 31;\n            break;\n          }\n          throw new TypeError(\"globalSetup file must export a function at \".concat(globalConfig.globalSetup));\n        case 31:\n          _context3.next = 33;\n          return globalSetup(globalConfig);\n        case 33:\n          _context3.next = 35;\n          return new (_TestScheduler || _load_TestScheduler()).default(globalConfig, {\n            startRun: startRun\n          }, testSchedulerContext).scheduleTests(allTests, testWatcher);\n        case 35:\n          results = _context3.sent;\n          sequencer.cacheResults(allTests, results);\n          if (!globalConfig.globalTeardown) {\n            _context3.next = 43;\n            break;\n          }\n          // $FlowFixMe\n          globalTeardown = require(globalConfig.globalTeardown);\n          if (!(typeof globalTeardown !== 'function')) {\n            _context3.next = 41;\n            break;\n          }\n          throw new TypeError(\"globalTeardown file must export a function at \".concat(globalConfig.globalTeardown));\n        case 41:\n          _context3.next = 43;\n          return globalTeardown(globalConfig);\n        case 43:\n          return _context3.abrupt(\"return\", processResults(results, {\n            collectHandles: collectHandles,\n            isJSON: globalConfig.json,\n            onComplete: onComplete,\n            outputFile: globalConfig.outputFile,\n            outputStream: outputStream,\n            testResultsProcessor: globalConfig.testResultsProcessor\n          }));\n        case 44:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  function runJest(_x6) {\n    return _ref3.apply(this, arguments);\n  }\n  return runJest;\n}();","map":null,"metadata":{},"sourceType":"script"}
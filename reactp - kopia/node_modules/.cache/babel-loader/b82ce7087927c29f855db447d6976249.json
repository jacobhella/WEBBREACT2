{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\nvar t = require(\"@babel/types\");\nvar _helperEnvironmentVisitor = require(\"@babel/helper-environment-visitor\");\nvar _traverseNode = require(\"../../traverse-node\");\nvar _visitors = require(\"../../visitors\");\nvar renameVisitor = {\n  ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {\n    var node = _ref.node;\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      path.skip();\n      if (path.isMethod()) {\n        (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path);\n      }\n    }\n  },\n  \"AssignmentExpression|Declaration|VariableDeclarator\": function AssignmentExpressionDeclarationVariableDeclarator(path, state) {\n    if (path.isVariableDeclaration()) return;\n    var ids = path.getOuterBindingIdentifiers();\n    for (var name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n};\nvar Renamer = /*#__PURE__*/function () {\n  function Renamer(binding, oldName, newName) {\n    _classCallCheck(this, Renamer);\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n  _createClass(Renamer, [{\n    key: \"maybeConvertFromExportDeclaration\",\n    value: function maybeConvertFromExportDeclaration(parentDeclar) {\n      var maybeExportDeclar = parentDeclar.parentPath;\n      if (!maybeExportDeclar.isExportDeclaration()) {\n        return;\n      }\n      if (maybeExportDeclar.isExportDefaultDeclaration()) {\n        var declaration = maybeExportDeclar.node.declaration;\n        if (t.isDeclaration(declaration) && !declaration.id) {\n          return;\n        }\n      }\n      if (maybeExportDeclar.isExportAllDeclaration()) {\n        return;\n      }\n      (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n    }\n  }, {\n    key: \"maybeConvertFromClassFunctionDeclaration\",\n    value: function maybeConvertFromClassFunctionDeclaration(path) {\n      return path;\n    }\n  }, {\n    key: \"maybeConvertFromClassFunctionExpression\",\n    value: function maybeConvertFromClassFunctionExpression(path) {\n      return path;\n    }\n  }, {\n    key: \"rename\",\n    value: function rename() {\n      var binding = this.binding,\n        oldName = this.oldName,\n        newName = this.newName;\n      var scope = binding.scope,\n        path = binding.path;\n      var parentDeclar = path.find(function (path) {\n        return path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression();\n      });\n      if (parentDeclar) {\n        var bindingIds = parentDeclar.getOuterBindingIdentifiers();\n        if (bindingIds[oldName] === binding.identifier) {\n          this.maybeConvertFromExportDeclaration(parentDeclar);\n        }\n      }\n      var blockToTraverse = arguments[0] || scope.block;\n      (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, {\n        discriminant: true\n      });\n      if (!arguments[0]) {\n        scope.removeOwnBinding(oldName);\n        scope.bindings[newName] = binding;\n        this.binding.identifier.name = newName;\n      }\n      if (parentDeclar) {\n        this.maybeConvertFromClassFunctionDeclaration(path);\n        this.maybeConvertFromClassFunctionExpression(path);\n      }\n    }\n  }]);\n  return Renamer;\n}();\nexports.default = Renamer;","map":null,"metadata":{},"sourceType":"script"}
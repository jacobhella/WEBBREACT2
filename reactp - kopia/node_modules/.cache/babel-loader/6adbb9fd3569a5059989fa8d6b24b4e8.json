{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = readInitialCoverage;\nvar _constants = require('./constants');\nvar _babylon = require('babylon');\nvar _babelTraverse = require('babel-traverse');\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\nvar _babelTypes = require('babel-types');\nvar t = _interopRequireWildcard(_babelTypes);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readInitialCoverage(code) {\n  if (typeof code !== 'string') {\n    throw new Error('Code must be a string');\n  }\n\n  // Parse as leniently as possible\n  var ast = (0, _babylon.parse)(code, {\n    allowImportExportEverywhere: true,\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: \"script\",\n    // I think ?\n    plugins: [\"*\"]\n  });\n  var covScope = void 0;\n  (0, _babelTraverse2.default)(ast, {\n    ObjectProperty: function ObjectProperty(path) {\n      var node = path.node;\n      if (!node.computed && t.isIdentifier(node.key) && node.key.name === _constants.MAGIC_KEY) {\n        var magicValue = path.get('value').evaluate();\n        if (!magicValue.confident || magicValue.value !== _constants.MAGIC_VALUE) {\n          return;\n        }\n        covScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        path.stop();\n      }\n    }\n  });\n  if (!covScope) {\n    return null;\n  }\n  var result = {};\n  var _arr = ['path', 'hash', 'gcv', 'coverageData'];\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var key = _arr[_i];\n    var binding = covScope.getOwnBinding(key);\n    if (!binding) {\n      return null;\n    }\n    var valuePath = binding.path.get('init');\n    var value = valuePath.evaluate();\n    if (!value.confident) {\n      return null;\n    }\n    result[key] = value.value;\n  }\n  delete result.coverageData[_constants.MAGIC_KEY];\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}
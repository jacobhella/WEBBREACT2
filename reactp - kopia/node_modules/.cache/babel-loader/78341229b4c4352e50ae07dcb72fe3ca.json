{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _normalizeAst = require(\"../helpers/normalize-ast\");\nvar _normalizeAst2 = _interopRequireDefault(_normalizeAst);\nvar _plugin = require(\"./plugin\");\nvar _plugin2 = _interopRequireDefault(_plugin);\nvar _file = require(\"./file\");\nvar _file2 = _interopRequireDefault(_file);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar Pipeline = function () {\n  function Pipeline() {\n    (0, _classCallCheck3.default)(this, Pipeline);\n  }\n  Pipeline.prototype.lint = function lint(code) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    opts.code = false;\n    opts.mode = \"lint\";\n    return this.transform(code, opts);\n  };\n  Pipeline.prototype.pretransform = function pretransform(code, opts) {\n    var file = new _file2.default(opts, this);\n    return file.wrap(code, function () {\n      file.addCode(code);\n      file.parseCode(code);\n      return file;\n    });\n  };\n  Pipeline.prototype.transform = function transform(code, opts) {\n    var file = new _file2.default(opts, this);\n    return file.wrap(code, function () {\n      file.addCode(code);\n      file.parseCode(code);\n      return file.transform();\n    });\n  };\n  Pipeline.prototype.analyse = function analyse(code) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var visitor = arguments[2];\n    opts.code = false;\n    if (visitor) {\n      opts.plugins = opts.plugins || [];\n      opts.plugins.push(new _plugin2.default({\n        visitor: visitor\n      }));\n    }\n    return this.transform(code, opts).metadata;\n  };\n  Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {\n    ast = (0, _normalizeAst2.default)(ast);\n    var file = new _file2.default(opts, this);\n    return file.wrap(code, function () {\n      file.addCode(code);\n      file.addAst(ast);\n      return file.transform();\n    });\n  };\n  return Pipeline;\n}();\nexports.default = Pipeline;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
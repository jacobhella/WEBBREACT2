{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.is = undefined;\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nexports.matchesPattern = matchesPattern;\nexports.has = has;\nexports.isStatic = isStatic;\nexports.isnt = isnt;\nexports.equals = equals;\nexports.isNodeType = isNodeType;\nexports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;\nexports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;\nexports.isCompletionRecord = isCompletionRecord;\nexports.isStatementOrBlock = isStatementOrBlock;\nexports.referencesImport = referencesImport;\nexports.getSource = getSource;\nexports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;\nexports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;\nexports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;\nexports.resolve = resolve;\nexports._resolve = _resolve;\nvar _includes = require(\"lodash/includes\");\nvar _includes2 = _interopRequireDefault(_includes);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction matchesPattern(pattern, allowPartial) {\n  if (!this.isMemberExpression()) return false;\n  var parts = pattern.split(\".\");\n  var search = [this.node];\n  var i = 0;\n  function matches(name) {\n    var part = parts[i];\n    return part === \"*\" || name === part;\n  }\n  while (search.length) {\n    var node = search.shift();\n    if (allowPartial && i === parts.length) {\n      return true;\n    }\n    if (t.isIdentifier(node)) {\n      if (!matches(node.name)) return false;\n    } else if (t.isLiteral(node)) {\n      if (!matches(node.value)) return false;\n    } else if (t.isMemberExpression(node)) {\n      if (node.computed && !t.isLiteral(node.property)) {\n        return false;\n      } else {\n        search.unshift(node.property);\n        search.unshift(node.object);\n        continue;\n      }\n    } else if (t.isThisExpression(node)) {\n      if (!matches(\"this\")) return false;\n    } else {\n      return false;\n    }\n    if (++i > parts.length) {\n      return false;\n    }\n  }\n  return i === parts.length;\n}\nfunction has(key) {\n  var val = this.node && this.node[key];\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\nfunction isStatic() {\n  return this.scope.isStatic(this.node);\n}\nvar is = exports.is = has;\nfunction isnt(key) {\n  return !this.has(key);\n}\nfunction equals(key, value) {\n  return this.node[key] === value;\n}\nfunction isNodeType(type) {\n  return t.isType(this.type, type);\n}\nfunction canHaveVariableDeclarationOrExpression() {\n  return (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor();\n}\nfunction canSwapBetweenExpressionAndStatement(replacement) {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n  if (this.isExpression()) {\n    return t.isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return t.isExpression(replacement);\n  }\n  return false;\n}\nfunction isCompletionRecord(allowInsideFunction) {\n  var path = this;\n  var first = true;\n  do {\n    var container = path.container;\n    if (path.isFunction() && !first) {\n      return !!allowInsideFunction;\n    }\n    first = false;\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while ((path = path.parentPath) && !path.isProgram());\n  return true;\n}\nfunction isStatementOrBlock() {\n  if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {\n    return false;\n  } else {\n    return (0, _includes2.default)(t.STATEMENT_OR_BLOCK_KEYS, this.key);\n  }\n}\nfunction referencesImport(moduleSource, importName) {\n  if (!this.isReferencedIdentifier()) return false;\n  var binding = this.scope.getBinding(this.node.name);\n  if (!binding || binding.kind !== \"module\") return false;\n  var path = binding.path;\n  var parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n  if (path.isImportSpecifier() && path.node.imported.name === importName) {\n    return true;\n  }\n  return false;\n}\nfunction getSource() {\n  var node = this.node;\n  if (node.end) {\n    return this.hub.file.code.slice(node.start, node.end);\n  } else {\n    return \"\";\n  }\n}\nfunction willIMaybeExecuteBefore(target) {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\nfunction _guessExecutionStatusRelativeTo(target) {\n  var targetFuncParent = target.scope.getFunctionParent();\n  var selfFuncParent = this.scope.getFunctionParent();\n  if (targetFuncParent.node !== selfFuncParent.node) {\n    var status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);\n    if (status) {\n      return status;\n    } else {\n      target = targetFuncParent.path;\n    }\n  }\n  var targetPaths = target.getAncestry();\n  if (targetPaths.indexOf(this) >= 0) return \"after\";\n  var selfPaths = this.getAncestry();\n  var commonPath = void 0;\n  var targetIndex = void 0;\n  var selfIndex = void 0;\n  for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {\n    var selfPath = selfPaths[selfIndex];\n    targetIndex = targetPaths.indexOf(selfPath);\n    if (targetIndex >= 0) {\n      commonPath = selfPath;\n      break;\n    }\n  }\n  if (!commonPath) {\n    return \"before\";\n  }\n  var targetRelationship = targetPaths[targetIndex - 1];\n  var selfRelationship = selfPaths[selfIndex - 1];\n  if (!targetRelationship || !selfRelationship) {\n    return \"before\";\n  }\n  if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {\n    return targetRelationship.key > selfRelationship.key ? \"before\" : \"after\";\n  }\n  var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);\n  var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);\n  return targetKeyPosition > selfKeyPosition ? \"before\" : \"after\";\n}\nfunction _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {\n  var targetFuncPath = targetFuncParent.path;\n  if (!targetFuncPath.isFunctionDeclaration()) return;\n  var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);\n  if (!binding.references) return \"before\";\n  var referencePaths = binding.referencePaths;\n  for (var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var path = _ref;\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      return;\n    }\n  }\n  var allStatus = void 0;\n  for (var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n    var _ref2;\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref2 = _i2.value;\n    }\n    var _path = _ref2;\n    var childOfFunction = !!_path.find(function (path) {\n      return path.node === targetFuncPath.node;\n    });\n    if (childOfFunction) continue;\n    var status = this._guessExecutionStatusRelativeTo(_path);\n    if (allStatus) {\n      if (allStatus !== status) return;\n    } else {\n      allStatus = status;\n    }\n  }\n  return allStatus;\n}\nfunction resolve(dangerous, resolved) {\n  return this._resolve(dangerous, resolved) || this;\n}\nfunction _resolve(dangerous, resolved) {\n  if (resolved && resolved.indexOf(this) >= 0) return;\n  resolved = resolved || [];\n  resolved.push(this);\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {}\n  } else if (this.isReferencedIdentifier()) {\n    var binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n    if (!binding.constant) return;\n    if (binding.kind === \"module\") return;\n    if (binding.path !== this) {\n      var ret = binding.path.resolve(dangerous, resolved);\n      if (this.find(function (parent) {\n        return parent.node === ret.node;\n      })) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    var targetKey = this.toComputedKey();\n    if (!t.isLiteral(targetKey)) return;\n    var targetName = targetKey.value;\n    var target = this.get(\"object\").resolve(dangerous, resolved);\n    if (target.isObjectExpression()) {\n      var props = target.get(\"properties\");\n      for (var _iterator3 = props, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {\n        var _ref3;\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n        var prop = _ref3;\n        if (!prop.isProperty()) continue;\n        var key = prop.get(\"key\");\n        var match = prop.isnt(\"computed\") && key.isIdentifier({\n          name: targetName\n        });\n        match = match || key.isLiteral({\n          value: targetName\n        });\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      var elems = target.get(\"elements\");\n      var elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
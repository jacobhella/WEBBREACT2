{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.beginHiddenCallStack = beginHiddenCallStack;\nexports.endHiddenCallStack = endHiddenCallStack;\nexports.expectedError = expectedError;\nexports.injectVirtualStackFrame = injectVirtualStackFrame;\nvar ErrorToString = Function.call.bind(Error.prototype.toString);\nvar SUPPORTED = !!Error.captureStackTrace;\nvar START_HIDING = \"startHiding - secret - don't use this - v1\";\nvar STOP_HIDING = \"stopHiding - secret - don't use this - v1\";\nvar expectedErrors = new WeakSet();\nvar virtualFrames = new WeakMap();\nfunction CallSite(filename) {\n  return Object.create({\n    isNative: function isNative() {\n      return false;\n    },\n    isConstructor: function isConstructor() {\n      return false;\n    },\n    isToplevel: function isToplevel() {\n      return true;\n    },\n    getFileName: function getFileName() {\n      return filename;\n    },\n    getLineNumber: function getLineNumber() {\n      return undefined;\n    },\n    getColumnNumber: function getColumnNumber() {\n      return undefined;\n    },\n    getFunctionName: function getFunctionName() {\n      return undefined;\n    },\n    getMethodName: function getMethodName() {\n      return undefined;\n    },\n    getTypeName: function getTypeName() {\n      return undefined;\n    },\n    toString: function toString() {\n      return filename;\n    }\n  });\n}\nfunction injectVirtualStackFrame(error, filename) {\n  if (!SUPPORTED) return;\n  var frames = virtualFrames.get(error);\n  if (!frames) virtualFrames.set(error, frames = []);\n  frames.push(CallSite(filename));\n  return error;\n}\nfunction expectedError(error) {\n  if (!SUPPORTED) return;\n  expectedErrors.add(error);\n  return error;\n}\nfunction beginHiddenCallStack(fn) {\n  if (!SUPPORTED) return fn;\n  return Object.defineProperty(function () {\n    setupPrepareStackTrace();\n    return fn.apply(void 0, arguments);\n  }, \"name\", {\n    value: STOP_HIDING\n  });\n}\nfunction endHiddenCallStack(fn) {\n  if (!SUPPORTED) return fn;\n  return Object.defineProperty(function () {\n    return fn.apply(void 0, arguments);\n  }, \"name\", {\n    value: START_HIDING\n  });\n}\nfunction setupPrepareStackTrace() {\n  setupPrepareStackTrace = function setupPrepareStackTrace() {};\n  var _Error$prepareStackTr = Error.prepareStackTrace,\n    prepareStackTrace = _Error$prepareStackTr === void 0 ? defaultPrepareStackTrace : _Error$prepareStackTr;\n  var MIN_STACK_TRACE_LIMIT = 50;\n  Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, MIN_STACK_TRACE_LIMIT));\n  Error.prepareStackTrace = function stackTraceRewriter(err, trace) {\n    var newTrace = [];\n    var isExpected = expectedErrors.has(err);\n    var status = isExpected ? \"hiding\" : \"unknown\";\n    for (var i = 0; i < trace.length; i++) {\n      var name = trace[i].getFunctionName();\n      if (name === START_HIDING) {\n        status = \"hiding\";\n      } else if (name === STOP_HIDING) {\n        if (status === \"hiding\") {\n          status = \"showing\";\n          if (virtualFrames.has(err)) {\n            var _newTrace;\n            (_newTrace = newTrace).unshift.apply(_newTrace, _toConsumableArray(virtualFrames.get(err)));\n          }\n        } else if (status === \"unknown\") {\n          newTrace = trace;\n          break;\n        }\n      } else if (status !== \"hiding\") {\n        newTrace.push(trace[i]);\n      }\n    }\n    return prepareStackTrace(err, newTrace);\n  };\n}\nfunction defaultPrepareStackTrace(err, trace) {\n  if (trace.length === 0) return ErrorToString(err);\n  return \"\".concat(ErrorToString(err), \"\\n    at \").concat(trace.join(\"\\n    at \"));\n}\n0 && 0;","map":null,"metadata":{},"sourceType":"script"}
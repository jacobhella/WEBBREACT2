{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar _jestSnapshot;\nfunction _load_jestSnapshot() {\n  return _jestSnapshot = _interopRequireDefault(require('jest-snapshot'));\n}\nvar _jestRegexUtil;\nfunction _load_jestRegexUtil() {\n  return _jestRegexUtil = require('jest-regex-util');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar snapshotDirRegex = new RegExp((0, (_jestRegexUtil || _load_jestRegexUtil()).replacePathSepForRegex)('/__snapshots__/'));\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar snapshotFileRegex = new RegExp((0, (_jestRegexUtil || _load_jestRegexUtil()).replacePathSepForRegex)(\"__snapshots__/(.*).\".concat((_jestSnapshot || _load_jestSnapshot()).default.EXTENSION)));\nvar isSnapshotPath = function isSnapshotPath(path) {\n  return !!path.match(snapshotDirRegex);\n};\n\n/**\n * DependencyResolver is used to resolve the direct dependencies of a module or\n * to retrieve a list of all transitive inverse dependencies.\n */\nvar DependencyResolver = /*#__PURE__*/function () {\n  function DependencyResolver(resolver, hasteFS) {\n    _classCallCheck(this, DependencyResolver);\n    this._resolver = resolver;\n    this._hasteFS = hasteFS;\n  }\n  _createClass(DependencyResolver, [{\n    key: \"resolve\",\n    value: function resolve(file, options) {\n      var _this = this;\n      var dependencies = this._hasteFS.getDependencies(file);\n      if (!dependencies) {\n        return [];\n      }\n      return dependencies.map(function (dependency) {\n        if (_this._resolver.isCoreModule(dependency)) {\n          return null;\n        }\n        try {\n          return _this._resolver.resolveModule(file, dependency, options);\n        } catch (e) {}\n        return _this._resolver.getMockModule(file, dependency);\n      }).filter(Boolean);\n    }\n  }, {\n    key: \"resolveInverse\",\n    value: function resolveInverse(paths, filter, options) {\n      var _this2 = this;\n      if (!paths.size) {\n        return [];\n      }\n      var collectModules = function collectModules(relatedPaths, moduleMap, changed) {\n        var visitedModules = new Set();\n        while (changed.size) {\n          changed = new Set(moduleMap.filter(function (module) {\n            return !visitedModules.has(module.file) && module.dependencies.some(function (dep) {\n              return dep && changed.has(dep);\n            });\n          }).map(function (module) {\n            var file = module.file;\n            if (filter(file)) {\n              relatedPaths.add(file);\n            }\n            visitedModules.add(file);\n            return module.file;\n          }));\n        }\n        return relatedPaths;\n      };\n      var relatedPaths = new Set();\n      var changed = new Set();\n      var _iterator = _createForOfIteratorHelper(paths),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          if (this._hasteFS.exists(path)) {\n            // /path/to/__snapshots__/test.js.snap is always adjacent to\n            // /path/to/test.js\n            var modulePath = isSnapshotPath(path) ? path.replace(snapshotFileRegex, '$1') : path;\n            changed.add(modulePath);\n            if (filter(modulePath)) {\n              relatedPaths.add(modulePath);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var modules = this._hasteFS.getAllFiles().map(function (file) {\n        return {\n          dependencies: _this2.resolve(file, options),\n          file: file\n        };\n      });\n      return Array.from(collectModules(relatedPaths, modules, changed));\n    }\n  }]);\n  return DependencyResolver;\n}();\nmodule.exports = DependencyResolver;","map":null,"metadata":{},"sourceType":"script"}
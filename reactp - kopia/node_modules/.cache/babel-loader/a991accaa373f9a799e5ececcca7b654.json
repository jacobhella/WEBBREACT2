{"ast":null,"code":"'use strict';\n\nvar util = require('util');\nvar isArrayish = require('is-arrayish');\nvar errorEx = function errorEx(name, properties) {\n  if (!name || name.constructor !== String) {\n    properties = name || {};\n    name = Error.name;\n  }\n  var errorExError = function ErrorEXError(message) {\n    if (!this) {\n      return new ErrorEXError(message);\n    }\n    message = message instanceof Error ? message.message : message || this.message;\n    Error.call(this, message);\n    Error.captureStackTrace(this, errorExError);\n    this.name = name;\n    Object.defineProperty(this, 'message', {\n      configurable: true,\n      enumerable: false,\n      get: function get() {\n        var newMessage = message.split(/\\r?\\n/g);\n        for (var key in properties) {\n          if (!properties.hasOwnProperty(key)) {\n            continue;\n          }\n          var modifier = properties[key];\n          if ('message' in modifier) {\n            newMessage = modifier.message(this[key], newMessage) || newMessage;\n            if (!isArrayish(newMessage)) {\n              newMessage = [newMessage];\n            }\n          }\n        }\n        return newMessage.join('\\n');\n      },\n      set: function set(v) {\n        message = v;\n      }\n    });\n    var overwrittenStack = null;\n    var stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');\n    var stackGetter = stackDescriptor.get;\n    var stackValue = stackDescriptor.value;\n    delete stackDescriptor.value;\n    delete stackDescriptor.writable;\n    stackDescriptor.set = function (newstack) {\n      overwrittenStack = newstack;\n    };\n    stackDescriptor.get = function () {\n      var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\\r?\\n+/g);\n\n      // starting in Node 7, the stack builder caches the message.\n      // just replace it.\n      if (!overwrittenStack) {\n        stack[0] = this.name + ': ' + this.message;\n      }\n      var lineCount = 1;\n      for (var key in properties) {\n        if (!properties.hasOwnProperty(key)) {\n          continue;\n        }\n        var modifier = properties[key];\n        if ('line' in modifier) {\n          var line = modifier.line(this[key]);\n          if (line) {\n            stack.splice(lineCount++, 0, '    ' + line);\n          }\n        }\n        if ('stack' in modifier) {\n          modifier.stack(this[key], stack);\n        }\n      }\n      return stack.join('\\n');\n    };\n    Object.defineProperty(this, 'stack', stackDescriptor);\n  };\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(errorExError.prototype, Error.prototype);\n    Object.setPrototypeOf(errorExError, Error);\n  } else {\n    util.inherits(errorExError, Error);\n  }\n  return errorExError;\n};\nerrorEx.append = function (str, def) {\n  return {\n    message: function message(v, _message) {\n      v = v || def;\n      if (v) {\n        _message[0] += ' ' + str.replace('%s', v.toString());\n      }\n      return _message;\n    }\n  };\n};\nerrorEx.line = function (str, def) {\n  return {\n    line: function line(v) {\n      v = v || def;\n      if (v) {\n        return str.replace('%s', v.toString());\n      }\n      return null;\n    }\n  };\n};\nmodule.exports = errorEx;","map":null,"metadata":{},"sourceType":"script"}
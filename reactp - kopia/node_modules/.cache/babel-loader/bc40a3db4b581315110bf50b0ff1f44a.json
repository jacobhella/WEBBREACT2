{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\nvar _assign2 = _interopRequireDefault(_assign);\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\nvar _stringify2 = _interopRequireDefault(_stringify);\nvar _weakSet = require(\"babel-runtime/core-js/weak-set\");\nvar _weakSet2 = _interopRequireDefault(_weakSet);\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\nvar _find = require(\"lodash/find\");\nvar _find2 = _interopRequireDefault(_find);\nvar _findLast = require(\"lodash/findLast\");\nvar _findLast2 = _interopRequireDefault(_findLast);\nvar _isInteger = require(\"lodash/isInteger\");\nvar _isInteger2 = _interopRequireDefault(_isInteger);\nvar _repeat = require(\"lodash/repeat\");\nvar _repeat2 = _interopRequireDefault(_repeat);\nvar _buffer = require(\"./buffer\");\nvar _buffer2 = _interopRequireDefault(_buffer);\nvar _node = require(\"./node\");\nvar n = _interopRequireWildcard(_node);\nvar _whitespace = require(\"./whitespace\");\nvar _whitespace2 = _interopRequireDefault(_whitespace);\nvar _babelTypes = require(\"babel-types\");\nvar t = _interopRequireWildcard(_babelTypes);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar SCIENTIFIC_NOTATION = /e/i;\nvar ZERO_DECIMAL_INTEGER = /\\.0+$/;\nvar NON_DECIMAL_LITERAL = /^0[box]/;\nvar Printer = function () {\n  function Printer(format, map, tokens) {\n    (0, _classCallCheck3.default)(this, Printer);\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._insideAux = false;\n    this._printedCommentStarts = {};\n    this._parenPushNewlineState = null;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new _weakSet2.default();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format || {};\n    this._buf = new _buffer2.default(map);\n    this._whitespace = tokens.length > 0 ? new _whitespace2.default(tokens) : null;\n  }\n  Printer.prototype.generate = function generate(ast) {\n    this.print(ast);\n    this._maybeAddAuxComment();\n    return this._buf.get();\n  };\n  Printer.prototype.indent = function indent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent++;\n  };\n  Printer.prototype.dedent = function dedent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent--;\n  };\n  Printer.prototype.semicolon = function semicolon() {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._maybeAddAuxComment();\n    this._append(\";\", !force);\n  };\n  Printer.prototype.rightBrace = function rightBrace() {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.token(\"}\");\n  };\n  Printer.prototype.space = function space() {\n    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.format.compact) return;\n    if (this._buf.hasContent() && !this.endsWith(\" \") && !this.endsWith(\"\\n\") || force) {\n      this._space();\n    }\n  };\n  Printer.prototype.word = function word(str) {\n    if (this._endsWithWord) this._space();\n    this._maybeAddAuxComment();\n    this._append(str);\n    this._endsWithWord = true;\n  };\n  Printer.prototype.number = function number(str) {\n    this.word(str);\n    this._endsWithInteger = (0, _isInteger2.default)(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str[str.length - 1] !== \".\";\n  };\n  Printer.prototype.token = function token(str) {\n    if (str === \"--\" && this.endsWith(\"!\") || str[0] === \"+\" && this.endsWith(\"+\") || str[0] === \"-\" && this.endsWith(\"-\") || str[0] === \".\" && this._endsWithInteger) {\n      this._space();\n    }\n    this._maybeAddAuxComment();\n    this._append(str);\n  };\n  Printer.prototype.newline = function newline(i) {\n    if (this.format.retainLines || this.format.compact) return;\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n    if (this.endsWith(\"\\n\\n\")) return;\n    if (typeof i !== \"number\") i = 1;\n    i = Math.min(2, i);\n    if (this.endsWith(\"{\\n\") || this.endsWith(\":\\n\")) i--;\n    if (i <= 0) return;\n    for (var j = 0; j < i; j++) {\n      this._newline();\n    }\n  };\n  Printer.prototype.endsWith = function endsWith(str) {\n    return this._buf.endsWith(str);\n  };\n  Printer.prototype.removeTrailingNewline = function removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  };\n  Printer.prototype.source = function source(prop, loc) {\n    this._catchUp(prop, loc);\n    this._buf.source(prop, loc);\n  };\n  Printer.prototype.withSource = function withSource(prop, loc, cb) {\n    this._catchUp(prop, loc);\n    this._buf.withSource(prop, loc, cb);\n  };\n  Printer.prototype._space = function _space() {\n    this._append(\" \", true);\n  };\n  Printer.prototype._newline = function _newline() {\n    this._append(\"\\n\", true);\n  };\n  Printer.prototype._append = function _append(str) {\n    var queue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this._maybeAddParen(str);\n    this._maybeIndent(str);\n    if (queue) this._buf.queue(str);else this._buf.append(str);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  };\n  Printer.prototype._maybeIndent = function _maybeIndent(str) {\n    if (this._indent && this.endsWith(\"\\n\") && str[0] !== \"\\n\") {\n      this._buf.queue(this._getIndent());\n    }\n  };\n  Printer.prototype._maybeAddParen = function _maybeAddParen(str) {\n    var parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n    this._parenPushNewlineState = null;\n    var i = void 0;\n    for (i = 0; i < str.length && str[i] === \" \"; i++) {\n      continue;\n    }\n    if (i === str.length) return;\n    var cha = str[i];\n    if (cha === \"\\n\" || cha === \"/\") {\n      this.token(\"(\");\n      this.indent();\n      parenPushNewlineState.printed = true;\n    }\n  };\n  Printer.prototype._catchUp = function _catchUp(prop, loc) {\n    if (!this.format.retainLines) return;\n    var pos = loc ? loc[prop] : null;\n    if (pos && pos.line !== null) {\n      var count = pos.line - this._buf.getCurrentLine();\n      for (var i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  };\n  Printer.prototype._getIndent = function _getIndent() {\n    return (0, _repeat2.default)(this.format.indent.style, this._indent);\n  };\n  Printer.prototype.startTerminatorless = function startTerminatorless() {\n    return this._parenPushNewlineState = {\n      printed: false\n    };\n  };\n  Printer.prototype.endTerminatorless = function endTerminatorless(state) {\n    if (state.printed) {\n      this.dedent();\n      this.newline();\n      this.token(\")\");\n    }\n  };\n  Printer.prototype.print = function print(node, parent) {\n    var _this = this;\n    if (!node) return;\n    var oldConcise = this.format.concise;\n    if (node._compact) {\n      this.format.concise = true;\n    }\n    var printMethod = this[node.type];\n    if (!printMethod) {\n      throw new ReferenceError(\"unknown node of type \" + (0, _stringify2.default)(node.type) + \" with constructor \" + (0, _stringify2.default)(node && node.constructor.name));\n    }\n    this._printStack.push(node);\n    var oldInAux = this._insideAux;\n    this._insideAux = !node.loc;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n    var needsParens = n.needsParens(node, parent, this._printStack);\n    if (this.format.retainFunctionParens && node.type === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n      needsParens = true;\n    }\n    if (needsParens) this.token(\"(\");\n    this._printLeadingComments(node, parent);\n    var loc = t.isProgram(node) || t.isFile(node) ? null : node.loc;\n    this.withSource(\"start\", loc, function () {\n      _this[node.type](node, parent);\n    });\n    this._printTrailingComments(node, parent);\n    if (needsParens) this.token(\")\");\n    this._printStack.pop();\n    this.format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  };\n  Printer.prototype._maybeAddAuxComment = function _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  };\n  Printer.prototype._printAuxBeforeComment = function _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    var comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  };\n  Printer.prototype._printAuxAfterComment = function _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    var comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  };\n  Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {\n    var extra = node.extra;\n    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  };\n  Printer.prototype.printJoin = function printJoin(nodes, parent) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!nodes || !nodes.length) return;\n    if (opts.indent) this.indent();\n    var newlineOpts = {\n      addNewlines: opts.addNewlines\n    };\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n      this.print(node, parent);\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n      if (opts.separator && i < nodes.length - 1) {\n        opts.separator.call(this);\n      }\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n    if (opts.indent) this.dedent();\n  };\n  Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {\n    var indent = !!node.leadingComments;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  };\n  Printer.prototype.printBlock = function printBlock(parent) {\n    var node = parent.body;\n    if (!t.isEmptyStatement(node)) {\n      this.space();\n    }\n    this.print(node, parent);\n  };\n  Printer.prototype._printTrailingComments = function _printTrailingComments(node, parent) {\n    this._printComments(this._getComments(false, node, parent));\n  };\n  Printer.prototype._printLeadingComments = function _printLeadingComments(node, parent) {\n    this._printComments(this._getComments(true, node, parent));\n  };\n  Printer.prototype.printInnerComments = function printInnerComments(node) {\n    var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!node.innerComments) return;\n    if (indent) this.indent();\n    this._printComments(node.innerComments);\n    if (indent) this.dedent();\n  };\n  Printer.prototype.printSequence = function printSequence(nodes, parent) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  };\n  Printer.prototype.printList = function printList(items, parent) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n    return this.printJoin(items, parent, opts);\n  };\n  Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {\n    var _this2 = this;\n    if (this.format.retainLines || this.format.compact) return;\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n    var lines = 0;\n    if (node.start != null && !node._ignoreUserWhitespace && this._whitespace) {\n      if (leading) {\n        var _comments = node.leadingComments;\n        var _comment = _comments && (0, _find2.default)(_comments, function (comment) {\n          return !!comment.loc && _this2.format.shouldPrintComment(comment.value);\n        });\n        lines = this._whitespace.getNewlinesBefore(_comment || node);\n      } else {\n        var _comments2 = node.trailingComments;\n        var _comment2 = _comments2 && (0, _findLast2.default)(_comments2, function (comment) {\n          return !!comment.loc && _this2.format.shouldPrintComment(comment.value);\n        });\n        lines = this._whitespace.getNewlinesAfter(_comment2 || node);\n      }\n    } else {\n      if (!leading) lines++;\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n      var needs = n.needsWhitespaceAfter;\n      if (leading) needs = n.needsWhitespaceBefore;\n      if (needs(node, parent)) lines++;\n      if (!this._buf.hasContent()) lines = 0;\n    }\n    this.newline(lines);\n  };\n  Printer.prototype._getComments = function _getComments(leading, node) {\n    return node && (leading ? node.leadingComments : node.trailingComments) || [];\n  };\n  Printer.prototype._printComment = function _printComment(comment) {\n    var _this3 = this;\n    if (!this.format.shouldPrintComment(comment.value)) return;\n    if (comment.ignore) return;\n    if (this._printedComments.has(comment)) return;\n    this._printedComments.add(comment);\n    if (comment.start != null) {\n      if (this._printedCommentStarts[comment.start]) return;\n      this._printedCommentStarts[comment.start] = true;\n    }\n    this.newline(this._whitespace ? this._whitespace.getNewlinesBefore(comment) : 0);\n    if (!this.endsWith(\"[\") && !this.endsWith(\"{\")) this.space();\n    var val = comment.type === \"CommentLine\" ? \"//\" + comment.value + \"\\n\" : \"/*\" + comment.value + \"*/\";\n    if (comment.type === \"CommentBlock\" && this.format.indent.adjustMultilineComment) {\n      var offset = comment.loc && comment.loc.start.column;\n      if (offset) {\n        var newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n        val = val.replace(newlineRegex, \"\\n\");\n      }\n      var indentSize = Math.max(this._getIndent().length, this._buf.getCurrentColumn());\n      val = val.replace(/\\n(?!$)/g, \"\\n\" + (0, _repeat2.default)(\" \", indentSize));\n    }\n    this.withSource(\"start\", comment.loc, function () {\n      _this3._append(val);\n    });\n    this.newline((this._whitespace ? this._whitespace.getNewlinesAfter(comment) : 0) + (comment.type === \"CommentLine\" ? -1 : 0));\n  };\n  Printer.prototype._printComments = function _printComments(comments) {\n    if (!comments || !comments.length) return;\n    for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n      var _comment3 = _ref;\n      this._printComment(_comment3);\n    }\n  };\n  return Printer;\n}();\nexports.default = Printer;\nfunction commaSeparator() {\n  this.token(\",\");\n  this.space();\n}\nvar _arr = [require(\"./generators/template-literals\"), require(\"./generators/expressions\"), require(\"./generators/statements\"), require(\"./generators/classes\"), require(\"./generators/methods\"), require(\"./generators/modules\"), require(\"./generators/types\"), require(\"./generators/flow\"), require(\"./generators/base\"), require(\"./generators/jsx\")];\nfor (var _i2 = 0; _i2 < _arr.length; _i2++) {\n  var generator = _arr[_i2];\n  (0, _assign2.default)(Printer.prototype, generator);\n}\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}
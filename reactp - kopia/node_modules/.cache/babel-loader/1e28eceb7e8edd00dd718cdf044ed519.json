{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitExportDeclaration;\nvar _t = require(\"@babel/types\");\nvar cloneNode = _t.cloneNode,\n  exportNamedDeclaration = _t.exportNamedDeclaration,\n  exportSpecifier = _t.exportSpecifier,\n  identifier = _t.identifier,\n  variableDeclaration = _t.variableDeclaration,\n  variableDeclarator = _t.variableDeclarator;\nfunction splitExportDeclaration(exportDeclaration) {\n  if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) {\n    throw new Error(\"Only default and named export declarations can be split.\");\n  }\n  if (exportDeclaration.isExportDefaultDeclaration()) {\n    var _declaration = exportDeclaration.get(\"declaration\");\n    var standaloneDeclaration = _declaration.isFunctionDeclaration() || _declaration.isClassDeclaration();\n    var scope = _declaration.isScope() ? _declaration.scope.parent : _declaration.scope;\n    var id = _declaration.node.id;\n    var needBindingRegistration = false;\n    if (!id) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier(\"default\");\n      if (standaloneDeclaration || _declaration.isFunctionExpression() || _declaration.isClassExpression()) {\n        _declaration.node.id = cloneNode(id);\n      }\n    }\n    var updatedDeclaration = standaloneDeclaration ? _declaration.node : variableDeclaration(\"var\", [variableDeclarator(cloneNode(id), _declaration.node)]);\n    var updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier(\"default\"))]);\n    exportDeclaration.insertAfter(updatedExportDeclaration);\n    exportDeclaration.replaceWith(updatedDeclaration);\n    if (needBindingRegistration) {\n      scope.registerDeclaration(exportDeclaration);\n    }\n    return exportDeclaration;\n  } else if (exportDeclaration.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n  var declaration = exportDeclaration.get(\"declaration\");\n  var bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n  var specifiers = Object.keys(bindingIdentifiers).map(function (name) {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n  var aliasDeclar = exportNamedDeclaration(null, specifiers);\n  exportDeclaration.insertAfter(aliasDeclar);\n  exportDeclaration.replaceWith(declaration.node);\n  return exportDeclaration;\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * Node.js wrapper for \"notify-send\".\n */\nvar os = require('os');\nvar which = require('which');\nvar utils = require('../lib/utils');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar notifier = 'notify-send';\nvar hasNotifier = void 0;\nmodule.exports = NotifySend;\nfunction NotifySend(options) {\n  options = utils.clone(options || {});\n  if (!(this instanceof NotifySend)) {\n    return new NotifySend(options);\n  }\n  this.options = options;\n  EventEmitter.call(this);\n}\nutil.inherits(NotifySend, EventEmitter);\nfunction noop() {}\nNotifySend.prototype.notify = function (options, callback) {\n  options = utils.clone(options || {});\n  callback = callback || noop;\n  if (typeof callback !== 'function') {\n    throw new TypeError('The second argument must be a function callback. You have passed ' + typeof callback);\n  }\n  if (typeof options === 'string') {\n    options = {\n      title: 'node-notifier',\n      message: options\n    };\n  }\n  if (!options.message) {\n    callback(new Error('Message is required.'));\n    return this;\n  }\n  if (os.type() !== 'Linux' && !os.type().match(/BSD$/)) {\n    callback(new Error('Only supported on Linux and *BSD systems'));\n    return this;\n  }\n  if (hasNotifier === false) {\n    callback(new Error('notify-send must be installed on the system.'));\n    return this;\n  }\n  if (hasNotifier || !!this.options.suppressOsdCheck) {\n    doNotification(options, callback);\n    return this;\n  }\n  try {\n    hasNotifier = !!which.sync(notifier);\n    doNotification(options, callback);\n  } catch (err) {\n    hasNotifier = false;\n    return callback(err);\n  }\n  return this;\n};\nvar allowedArguments = ['urgency', 'expire-time', 'icon', 'category', 'hint'];\nfunction doNotification(options, callback) {\n  var initial, argsList;\n  options = utils.mapToNotifySend(options);\n  options.title = options.title || 'Node Notification:';\n  initial = [options.title, options.message];\n  delete options.title;\n  delete options.message;\n  argsList = utils.constructArgumentList(options, {\n    initial: initial,\n    keyExtra: '-',\n    allowedArguments: allowedArguments\n  });\n  utils.command(notifier, argsList, callback);\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar Reporter = require('./lib/reporter');\n/**\n * @module Exports\n */\nmodule.exports = {\n  config: require('./lib/config'),\n  cover: require('./lib/run-cover'),\n  reports: require('./lib/run-reports'),\n  instrument: require('./lib/run-instrument'),\n  checkCoverage: require('./lib/run-check-coverage'),\n  createReporter: function createReporter(cfg, opts) {\n    return new Reporter(cfg, opts);\n  },\n  /**\n   * asynchronously returns a function that can match filesystem paths.\n   * The function returned in the callback may be passed directly as a `matcher`\n   * to the functions in the `hook` module.\n   *\n   * When no options are passed, the match function is one that matches all JS\n   * files under the current working directory except ones under `node_modules`\n   *\n   * Match patterns are `ant`-style patterns processed using the `fileset` library.\n   * Examples not provided due to limitations in putting asterisks inside\n   * jsdoc comments. Please refer to tests under `test/other/test-matcher.js`\n   * for examples.\n   *\n   * @method matcherFor\n   * @static\n   * @param {Object} options Optional. Lookup options.\n   * @param {String} [options.root] the root of the filesystem tree under\n   *     which to match files. Defaults to `process.cwd()`\n   * @param {Array} [options.includes] an array of include patterns to match.\n   *     Defaults to all JS files under the root.\n   * @param {Array} [options.excludes] and array of exclude patterns. File paths\n   *     matching these patterns will be excluded by the returned matcher.\n   *     Defaults to files under `node_modules` found anywhere under root.\n   * @param {Function(err, matchFunction)} callback  The callback that is\n   *      called with two arguments. The first is an `Error` object in case\n   *      of errors or a falsy value if there were no errors. The second\n   *      is a function that may be use as a matcher.\n   */\n  matcherFor: require('./lib/file-matcher').matcherFor,\n  filesFor: require('./lib/file-matcher').filesFor\n};\n\n// export all the istanbul libraries as is so users don't have to take 5 deps\n// that are potentially inconsistent\n\nvar DASH_PATTERN = /-([a-z])/g;\nfunction camelize(word) {\n  return word.replace(DASH_PATTERN, function (match, lch) {\n    return lch.toUpperCase();\n  });\n}\n['coverage', 'hook', 'instrument', 'report', 'source-maps'].forEach(function (k) {\n  var mod = 'lib-' + k,\n    prop = camelize(mod);\n  module.exports[prop] = require('istanbul-' + mod);\n});\nmodule.exports.reportsImpl = require('istanbul-reports');","map":null,"metadata":{},"sourceType":"script"}
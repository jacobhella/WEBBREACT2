{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _assert = require(\"assert\");\nvar _t = require(\"@babel/types\");\nvar _importBuilder = require(\"./import-builder\");\nvar _isModule = require(\"./is-module\");\nvar numericLiteral = _t.numericLiteral,\n  sequenceExpression = _t.sequenceExpression;\nvar ImportInjector = /*#__PURE__*/function () {\n  function ImportInjector(path, importedSource, opts) {\n    _classCallCheck(this, ImportInjector);\n    this._defaultOpts = {\n      importedSource: null,\n      importedType: \"commonjs\",\n      importedInterop: \"babel\",\n      importingInterop: \"babel\",\n      ensureLiveReference: false,\n      ensureNoContext: false,\n      importPosition: \"before\"\n    };\n    var programPath = path.find(function (p) {\n      return p.isProgram();\n    });\n    this._programPath = programPath;\n    this._programScope = programPath.scope;\n    this._hub = programPath.hub;\n    this._defaultOpts = this._applyDefaults(importedSource, opts, true);\n  }\n  _createClass(ImportInjector, [{\n    key: \"addDefault\",\n    value: function addDefault(importedSourceIn, opts) {\n      return this.addNamed(\"default\", importedSourceIn, opts);\n    }\n  }, {\n    key: \"addNamed\",\n    value: function addNamed(importName, importedSourceIn, opts) {\n      _assert(typeof importName === \"string\");\n      return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);\n    }\n  }, {\n    key: \"addNamespace\",\n    value: function addNamespace(importedSourceIn, opts) {\n      return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);\n    }\n  }, {\n    key: \"addSideEffect\",\n    value: function addSideEffect(importedSourceIn, opts) {\n      return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);\n    }\n  }, {\n    key: \"_applyDefaults\",\n    value: function _applyDefaults(importedSource, opts) {\n      var isInit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var newOpts;\n      if (typeof importedSource === \"string\") {\n        newOpts = Object.assign({}, this._defaultOpts, {\n          importedSource: importedSource\n        }, opts);\n      } else {\n        _assert(!opts, \"Unexpected secondary arguments.\");\n        newOpts = Object.assign({}, this._defaultOpts, importedSource);\n      }\n      if (!isInit && opts) {\n        if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;\n        if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;\n      }\n      return newOpts;\n    }\n  }, {\n    key: \"_generateImport\",\n    value: function _generateImport(opts, importName) {\n      var isDefault = importName === \"default\";\n      var isNamed = !!importName && !isDefault;\n      var isNamespace = importName === null;\n      var importedSource = opts.importedSource,\n        importedType = opts.importedType,\n        importedInterop = opts.importedInterop,\n        importingInterop = opts.importingInterop,\n        ensureLiveReference = opts.ensureLiveReference,\n        ensureNoContext = opts.ensureNoContext,\n        nameHint = opts.nameHint,\n        importPosition = opts.importPosition,\n        blockHoist = opts.blockHoist;\n      var name = nameHint || importName;\n      var isMod = (0, _isModule.default)(this._programPath);\n      var isModuleForNode = isMod && importingInterop === \"node\";\n      var isModuleForBabel = isMod && importingInterop === \"babel\";\n      if (importPosition === \"after\" && !isMod) {\n        throw new Error(\"\\\"importPosition\\\": \\\"after\\\" is only supported in modules\");\n      }\n      var builder = new _importBuilder.default(importedSource, this._programScope, this._hub);\n      if (importedType === \"es6\") {\n        if (!isModuleForNode && !isModuleForBabel) {\n          throw new Error(\"Cannot import an ES6 module from CommonJS\");\n        }\n        builder.import();\n        if (isNamespace) {\n          builder.namespace(nameHint || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else if (importedType !== \"commonjs\") {\n        throw new Error(\"Unexpected interopType \\\"\".concat(importedType, \"\\\"\"));\n      } else if (importedInterop === \"babel\") {\n        if (isModuleForNode) {\n          name = name !== \"default\" ? name : importedSource;\n          var es6Default = \"\".concat(importedSource, \"$es6Default\");\n          builder.import();\n          if (isNamespace) {\n            builder.default(es6Default).var(name || importedSource).wildcardInterop();\n          } else if (isDefault) {\n            if (ensureLiveReference) {\n              builder.default(es6Default).var(name || importedSource).defaultInterop().read(\"default\");\n            } else {\n              builder.default(es6Default).var(name).defaultInterop().prop(importName);\n            }\n          } else if (isNamed) {\n            builder.default(es6Default).read(importName);\n          }\n        } else if (isModuleForBabel) {\n          builder.import();\n          if (isNamespace) {\n            builder.namespace(name || importedSource);\n          } else if (isDefault || isNamed) {\n            builder.named(name, importName);\n          }\n        } else {\n          builder.require();\n          if (isNamespace) {\n            builder.var(name || importedSource).wildcardInterop();\n          } else if ((isDefault || isNamed) && ensureLiveReference) {\n            if (isDefault) {\n              name = name !== \"default\" ? name : importedSource;\n              builder.var(name).read(importName);\n              builder.defaultInterop();\n            } else {\n              builder.var(importedSource).read(importName);\n            }\n          } else if (isDefault) {\n            builder.var(name).defaultInterop().prop(importName);\n          } else if (isNamed) {\n            builder.var(name).prop(importName);\n          }\n        }\n      } else if (importedInterop === \"compiled\") {\n        if (isModuleForNode) {\n          builder.import();\n          if (isNamespace) {\n            builder.default(name || importedSource);\n          } else if (isDefault || isNamed) {\n            builder.default(importedSource).read(name);\n          }\n        } else if (isModuleForBabel) {\n          builder.import();\n          if (isNamespace) {\n            builder.namespace(name || importedSource);\n          } else if (isDefault || isNamed) {\n            builder.named(name, importName);\n          }\n        } else {\n          builder.require();\n          if (isNamespace) {\n            builder.var(name || importedSource);\n          } else if (isDefault || isNamed) {\n            if (ensureLiveReference) {\n              builder.var(importedSource).read(name);\n            } else {\n              builder.prop(importName).var(name);\n            }\n          }\n        }\n      } else if (importedInterop === \"uncompiled\") {\n        if (isDefault && ensureLiveReference) {\n          throw new Error(\"No live reference for commonjs default\");\n        }\n        if (isModuleForNode) {\n          builder.import();\n          if (isNamespace) {\n            builder.default(name || importedSource);\n          } else if (isDefault) {\n            builder.default(name);\n          } else if (isNamed) {\n            builder.default(importedSource).read(name);\n          }\n        } else if (isModuleForBabel) {\n          builder.import();\n          if (isNamespace) {\n            builder.default(name || importedSource);\n          } else if (isDefault) {\n            builder.default(name);\n          } else if (isNamed) {\n            builder.named(name, importName);\n          }\n        } else {\n          builder.require();\n          if (isNamespace) {\n            builder.var(name || importedSource);\n          } else if (isDefault) {\n            builder.var(name);\n          } else if (isNamed) {\n            if (ensureLiveReference) {\n              builder.var(importedSource).read(name);\n            } else {\n              builder.var(name).prop(importName);\n            }\n          }\n        }\n      } else {\n        throw new Error(\"Unknown importedInterop \\\"\".concat(importedInterop, \"\\\".\"));\n      }\n      var _builder$done = builder.done(),\n        statements = _builder$done.statements,\n        resultName = _builder$done.resultName;\n      this._insertStatements(statements, importPosition, blockHoist);\n      if ((isDefault || isNamed) && ensureNoContext && resultName.type !== \"Identifier\") {\n        return sequenceExpression([numericLiteral(0), resultName]);\n      }\n      return resultName;\n    }\n  }, {\n    key: \"_insertStatements\",\n    value: function _insertStatements(statements) {\n      var importPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"before\";\n      var blockHoist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n      var body = this._programPath.get(\"body\");\n      if (importPosition === \"after\") {\n        for (var i = body.length - 1; i >= 0; i--) {\n          if (body[i].isImportDeclaration()) {\n            body[i].insertAfter(statements);\n            return;\n          }\n        }\n      } else {\n        statements.forEach(function (node) {\n          node._blockHoist = blockHoist;\n        });\n        var targetPath = body.find(function (p) {\n          var val = p.node._blockHoist;\n          return Number.isFinite(val) && val < 4;\n        });\n        if (targetPath) {\n          targetPath.insertBefore(statements);\n          return;\n        }\n      }\n      this._programPath.unshiftContainer(\"body\", statements);\n    }\n  }]);\n  return ImportInjector;\n}();\nexports.default = ImportInjector;","map":null,"metadata":{},"sourceType":"script"}
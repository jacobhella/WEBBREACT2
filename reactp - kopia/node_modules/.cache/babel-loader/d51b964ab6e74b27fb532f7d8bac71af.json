{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\n// Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\nvar runTestInternal = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, globalConfig, config, resolver) {\n    var testSource, parsedDocblock, customEnvironment, testEnvironment, TestEnvironment, testFramework, Runtime, runtime, consoleOut, consoleFormatter, testConsole, environment, leakDetector, cacheFS, start, sourcemapOptions, realExit, result, testCount;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          testSource = (_gracefulFs || _load_gracefulFs()).default.readFileSync(path, 'utf8');\n          parsedDocblock = (_jestDocblock || _load_jestDocblock()).parse((_jestDocblock || _load_jestDocblock()).extract(testSource));\n          customEnvironment = parsedDocblock['jest-environment'];\n          testEnvironment = config.testEnvironment;\n          if (customEnvironment) {\n            testEnvironment = (0, (_jestConfig || _load_jestConfig()).getTestEnvironment)(Object.assign({}, config, {\n              testEnvironment: customEnvironment\n            }));\n          }\n\n          /* $FlowFixMe */\n          TestEnvironment = require(testEnvironment);\n          testFramework = process.env.JEST_CIRCUS === '1' ? require('jest-circus/runner') // eslint-disable-line import/no-extraneous-dependencies\n          : /* $FlowFixMe */\n          require(config.testRunner);\n          /* $FlowFixMe */\n          Runtime = require(config.moduleLoader || 'jest-runtime');\n          runtime = undefined;\n          consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n          consoleFormatter = function consoleFormatter(type, message) {\n            return (0, (_jestUtil || _load_jestUtil()).getConsoleOutput)(config.cwd, !!globalConfig.verbose,\n            // 4 = the console call is buried 4 stack frames deep\n            (_jestUtil || _load_jestUtil()).BufferedConsole.write([], type, message, 4, runtime && runtime.getSourceMaps()));\n          };\n          if (globalConfig.silent) {\n            testConsole = new (_jestUtil || _load_jestUtil()).NullConsole(consoleOut, process.stderr, consoleFormatter);\n          } else if (globalConfig.verbose) {\n            testConsole = new (_jestUtil || _load_jestUtil()).Console(consoleOut, process.stderr, consoleFormatter);\n          } else {\n            testConsole = new (_jestUtil || _load_jestUtil()).BufferedConsole(function () {\n              return runtime && runtime.getSourceMaps();\n            });\n          }\n          environment = new TestEnvironment(config, {\n            console: testConsole\n          });\n          leakDetector = config.detectLeaks ? new (_jestLeakDetector || _load_jestLeakDetector()).default(environment) : null;\n          cacheFS = _defineProperty({}, path, testSource);\n          (0, (_jestUtil || _load_jestUtil()).setGlobal)(environment.global, 'console', testConsole);\n          runtime = new Runtime(config, environment, resolver, cacheFS, {\n            collectCoverage: globalConfig.collectCoverage,\n            collectCoverageFrom: globalConfig.collectCoverageFrom,\n            collectCoverageOnlyFrom: globalConfig.collectCoverageOnlyFrom\n          });\n          start = Date.now();\n          sourcemapOptions = {\n            environment: 'node',\n            handleUncaughtExceptions: false,\n            retrieveSourceMap: function retrieveSourceMap(source) {\n              var sourceMaps = runtime && runtime.getSourceMaps();\n              var sourceMapSource = sourceMaps && sourceMaps[source];\n              if (sourceMapSource) {\n                try {\n                  return {\n                    map: JSON.parse((_gracefulFs || _load_gracefulFs()).default.readFileSync(sourceMapSource)),\n                    url: source\n                  };\n                } catch (e) {}\n              }\n              return null;\n            }\n          }; // For tests\n          runtime.requireInternalModule(require.resolve('source-map-support'), 'source-map-support').install(sourcemapOptions);\n\n          // For runtime errors\n          (_sourceMapSupport || _load_sourceMapSupport()).default.install(sourcemapOptions);\n          if (environment.global && environment.global.process && environment.global.process.exit) {\n            realExit = environment.global.process.exit;\n            environment.global.process.exit = function exit() {\n              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              var error = new Error(\"process.exit called with \\\"\".concat(args.join(', '), \"\\\"\"));\n              if (Error.captureStackTrace) {\n                Error.captureStackTrace(error, exit);\n              }\n              var formattedError = (0, (_jestMessageUtil || _load_jestMessageUtil()).formatExecError)(error, config, {\n                noStackTrace: false\n              }, undefined, true);\n              process.stderr.write(formattedError);\n              return realExit.apply(undefined, args);\n            };\n          }\n          _context.prev = 22;\n          _context.next = 25;\n          return environment.setup();\n        case 25:\n          _context.prev = 25;\n          _context.next = 28;\n          return testFramework(globalConfig, config, environment, runtime, path);\n        case 28:\n          result = _context.sent;\n          _context.next = 35;\n          break;\n        case 31:\n          _context.prev = 31;\n          _context.t0 = _context[\"catch\"](25);\n          // Access stack before uninstalling sourcemaps\n          _context.t0.stack;\n          throw _context.t0;\n        case 35:\n          testCount = result.numPassingTests + result.numFailingTests + result.numPendingTests;\n          result.perfStats = {\n            end: Date.now(),\n            start: start\n          };\n          result.testFilePath = path;\n          result.coverage = runtime.getAllCoverageInfoCopy();\n          result.sourceMaps = runtime.getSourceMapInfo(new Set(Object.keys(result.coverage || {})));\n          result.console = testConsole.getBuffer();\n          result.skipped = testCount === result.numPendingTests;\n          result.displayName = config.displayName;\n          if (globalConfig.logHeapUsage) {\n            if (global.gc) {\n              global.gc();\n            }\n            result.memoryUsage = process.memoryUsage().heapUsed;\n          }\n\n          // Delay the resolution to allow log messages to be output.\n          return _context.abrupt(\"return\", new Promise(function (resolve) {\n            setImmediate(function () {\n              return resolve({\n                leakDetector: leakDetector,\n                result: result\n              });\n            });\n          }));\n        case 45:\n          _context.prev = 45;\n          _context.next = 48;\n          return environment.teardown();\n        case 48:\n          (_sourceMapSupport || _load_sourceMapSupport()).default.resetRetrieveHandlers();\n          return _context.finish(45);\n        case 50:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[22,, 45, 50], [25, 31]]);\n  }));\n  return function runTestInternal(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _gracefulFs;\nfunction _load_gracefulFs() {\n  return _gracefulFs = _interopRequireDefault(require('graceful-fs'));\n}\nvar _jestUtil;\nfunction _load_jestUtil() {\n  return _jestUtil = require('jest-util');\n}\nvar _jestLeakDetector;\nfunction _load_jestLeakDetector() {\n  return _jestLeakDetector = _interopRequireDefault(require('jest-leak-detector'));\n}\nvar _jestConfig;\nfunction _load_jestConfig() {\n  return _jestConfig = require('jest-config');\n}\nvar _jestDocblock;\nfunction _load_jestDocblock() {\n  return _jestDocblock = _interopRequireWildcard(require('jest-docblock'));\n}\nvar _jestMessageUtil;\nfunction _load_jestMessageUtil() {\n  return _jestMessageUtil = require('jest-message-util');\n}\nvar _sourceMapSupport;\nfunction _load_sourceMapSupport() {\n  return _sourceMapSupport = _interopRequireDefault(require('source-map-support'));\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nexports.default = function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path, globalConfig, config, resolver) {\n    var _ref3, leakDetector, result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return runTestInternal(path, globalConfig, config, resolver);\n        case 2:\n          _ref3 = _context2.sent;\n          leakDetector = _ref3.leakDetector, result = _ref3.result; // Resolve leak detector, outside the \"runTestInternal\" closure.\n          result.leaks = leakDetector ? leakDetector.isLeaking() : false;\n          return _context2.abrupt(\"return\", result);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  function runTest(_x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  }\n  return runTest;\n}();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _jestUtil;\nfunction _load_jestUtil() {\n  return _jestUtil = require('jest-util');\n}\nvar _istanbulApi;\nfunction _load_istanbulApi() {\n  return _istanbulApi = require('istanbul-api');\n}\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _istanbulLibCoverage;\nfunction _load_istanbulLibCoverage() {\n  return _istanbulLibCoverage = _interopRequireDefault(require('istanbul-lib-coverage'));\n}\nvar _istanbulLibSourceMaps;\nfunction _load_istanbulLibSourceMaps() {\n  return _istanbulLibSourceMaps = _interopRequireDefault(require('istanbul-lib-source-maps'));\n}\nvar _jestWorker;\nfunction _load_jestWorker() {\n  return _jestWorker = _interopRequireDefault(require('jest-worker'));\n}\nvar _base_reporter;\nfunction _load_base_reporter() {\n  return _base_reporter = _interopRequireDefault(require('./base_reporter'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _glob;\nfunction _load_glob() {\n  return _glob = _interopRequireDefault(require('glob'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar FAIL_COLOR = (_chalk || _load_chalk()).default.bold.red;\nvar RUNNING_TEST_COLOR = (_chalk || _load_chalk()).default.bold.dim;\nvar CoverageReporter = /*#__PURE__*/function (_default) {\n  _inherits(CoverageReporter, _default);\n  function CoverageReporter(globalConfig) {\n    var _this3;\n    _classCallCheck(this, CoverageReporter);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(CoverageReporter).call(this));\n    _this3._coverageMap = (_istanbulLibCoverage || _load_istanbulLibCoverage()).default.createCoverageMap({});\n    _this3._globalConfig = globalConfig;\n    _this3._sourceMapStore = (_istanbulLibSourceMaps || _load_istanbulLibSourceMaps()).default.createSourceMapStore();\n    return _this3;\n  }\n  _createClass(CoverageReporter, [{\n    key: \"onTestResult\",\n    value: function onTestResult(test, testResult, aggregatedResults) {\n      var _this4 = this;\n      if (testResult.coverage) {\n        this._coverageMap.merge(testResult.coverage);\n        // Remove coverage data to free up some memory.\n        delete testResult.coverage;\n        Object.keys(testResult.sourceMaps).forEach(function (sourcePath) {\n          var inputSourceMap;\n          try {\n            var coverage = _this4._coverageMap.fileCoverageFor(sourcePath);\n            var _coverage$toJSON = coverage.toJSON();\n            inputSourceMap = _coverage$toJSON.inputSourceMap;\n          } finally {\n            if (inputSourceMap) {\n              _this4._sourceMapStore.registerMap(sourcePath, inputSourceMap);\n            } else {\n              _this4._sourceMapStore.registerURL(sourcePath, testResult.sourceMaps[sourcePath]);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onRunComplete\",\n    value: function onRunComplete(contexts, aggregatedResults) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _sourceMapStore$trans, map, sourceFinder, reporter, coverageReporters;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this._addUntestedFiles(_this._globalConfig, contexts);\n            case 2:\n              _sourceMapStore$trans = _this._sourceMapStore.transformCoverage(_this._coverageMap);\n              map = _sourceMapStore$trans.map, sourceFinder = _sourceMapStore$trans.sourceFinder;\n              reporter = (0, (_istanbulApi || _load_istanbulApi()).createReporter)();\n              try {\n                if (_this._globalConfig.coverageDirectory) {\n                  reporter.dir = _this._globalConfig.coverageDirectory;\n                }\n                coverageReporters = _this._globalConfig.coverageReporters || [];\n                if (!_this._globalConfig.useStderr && coverageReporters.length && coverageReporters.indexOf('text') === -1) {\n                  coverageReporters = coverageReporters.concat(['text-summary']);\n                }\n                reporter.addAll(coverageReporters);\n                reporter.write(map, sourceFinder && {\n                  sourceFinder: sourceFinder\n                });\n                aggregatedResults.coverageMap = map;\n              } catch (e) {\n                console.error((_chalk || _load_chalk()).default.red(\"\\n        Failed to write coverage reports:\\n        ERROR: \".concat(e.toString(), \"\\n        STACK: \").concat(e.stack, \"\\n      \")));\n              }\n              _this._checkThreshold(_this._globalConfig, map);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }, {\n    key: \"_addUntestedFiles\",\n    value: function _addUntestedFiles(globalConfig, contexts) {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var files, worker, instrumentation;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              files = [];\n              contexts.forEach(function (context) {\n                var config = context.config;\n                if (globalConfig.collectCoverageFrom && globalConfig.collectCoverageFrom.length) {\n                  context.hasteFS.matchFilesWithGlob(globalConfig.collectCoverageFrom, config.rootDir).forEach(function (filePath) {\n                    return files.push({\n                      config: config,\n                      path: filePath\n                    });\n                  });\n                }\n              });\n              if (files.length) {\n                _context3.next = 4;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 4:\n              if ((_jestUtil || _load_jestUtil()).isInteractive) {\n                process.stderr.write(RUNNING_TEST_COLOR('Running coverage on untested files...'));\n              }\n              if (_this2._globalConfig.maxWorkers <= 1) {\n                worker = require('./coverage_worker');\n              } else {\n                // $FlowFixMe: assignment of a worker with custom properties.\n                worker = new (_jestWorker || _load_jestWorker()).default(require.resolve('./coverage_worker'), {\n                  exposedMethods: ['worker'],\n                  maxRetries: 2,\n                  numWorkers: _this2._globalConfig.maxWorkers\n                });\n              }\n              instrumentation = files.map(function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(fileObj) {\n                  var filename, config, result;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        filename = fileObj.path;\n                        config = fileObj.config;\n                        if (_this2._coverageMap.data[filename]) {\n                          _context2.next = 13;\n                          break;\n                        }\n                        _context2.prev = 3;\n                        _context2.next = 6;\n                        return worker.worker({\n                          config: config,\n                          globalConfig: globalConfig,\n                          path: filename\n                        });\n                      case 6:\n                        result = _context2.sent;\n                        if (result) {\n                          _this2._coverageMap.addFileCoverage(result.coverage);\n                          if (result.sourceMapPath) {\n                            _this2._sourceMapStore.registerURL(filename, result.sourceMapPath);\n                          }\n                        }\n                        _context2.next = 13;\n                        break;\n                      case 10:\n                        _context2.prev = 10;\n                        _context2.t0 = _context2[\"catch\"](3);\n                        console.error((_chalk || _load_chalk()).default.red([\"Failed to collect coverage from \".concat(filename), \"ERROR: \".concat(_context2.t0.message), \"STACK: \".concat(_context2.t0.stack)].join('\\n')));\n                      case 13:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[3, 10]]);\n                }));\n                return function (_x) {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              _context3.prev = 7;\n              _context3.next = 10;\n              return Promise.all(instrumentation);\n            case 10:\n              _context3.next = 14;\n              break;\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](7);\n            case 14:\n              if ((_jestUtil || _load_jestUtil()).isInteractive) {\n                (0, (_jestUtil || _load_jestUtil()).clearLine)(process.stderr);\n              }\n              if (worker && typeof worker.end === 'function') {\n                worker.end();\n              }\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[7, 12]]);\n      }))();\n    }\n  }, {\n    key: \"_checkThreshold\",\n    value: function _checkThreshold(globalConfig, map) {\n      if (globalConfig.coverageThreshold) {\n        var check = function check(name, thresholds, actuals) {\n          return ['statements', 'branches', 'lines', 'functions'].reduce(function (errors, key) {\n            var actual = actuals[key].pct;\n            var actualUncovered = actuals[key].total - actuals[key].covered;\n            var threshold = thresholds[key];\n            if (threshold != null) {\n              if (threshold < 0) {\n                if (threshold * -1 < actualUncovered) {\n                  errors.push(\"Jest: Uncovered count for \".concat(key, \" (\").concat(actualUncovered, \")\") + \"exceeds \".concat(name, \" threshold (\").concat(-1 * threshold, \")\"));\n                }\n              } else if (actual < threshold) {\n                errors.push(\"Jest: \\\"\".concat(name, \"\\\" coverage threshold for \").concat(key, \" (\").concat(threshold, \"%) not met: \").concat(actual, \"%\"));\n              }\n            }\n            return errors;\n          }, []);\n        };\n        var combineCoverage = function combineCoverage(filePaths) {\n          return filePaths.map(function (filePath) {\n            return map.fileCoverageFor(filePath);\n          }).reduce(function (combinedCoverage, nextFileCoverage) {\n            if (combinedCoverage === undefined || combinedCoverage === null) {\n              return nextFileCoverage.toSummary();\n            }\n            return combinedCoverage.merge(nextFileCoverage.toSummary());\n          }, undefined);\n        };\n        var THRESHOLD_GROUP_TYPES = {\n          GLOB: 'glob',\n          GLOBAL: 'global',\n          PATH: 'path'\n        };\n        var coveredFiles = map.files();\n        var thresholdGroups = Object.keys(globalConfig.coverageThreshold);\n        var groupTypeByThresholdGroup = {};\n        var filesByGlob = {};\n        var coveredFilesSortedIntoThresholdGroup = coveredFiles.reduce(function (files, file) {\n          var pathOrGlobMatches = thresholdGroups.reduce(function (agg, thresholdGroup) {\n            var absoluteThresholdGroup = (_path || _load_path()).default.resolve(thresholdGroup);\n\n            // The threshold group might be a path:\n\n            if (file.indexOf(absoluteThresholdGroup) === 0) {\n              groupTypeByThresholdGroup[thresholdGroup] = THRESHOLD_GROUP_TYPES.PATH;\n              return agg.concat([[file, thresholdGroup]]);\n            }\n\n            // If the threshold group is not a path it might be a glob:\n\n            // Note: glob.sync is slow. By memoizing the files matching each glob\n            // (rather than recalculating it for each covered file) we save a tonne\n            // of execution time.\n            if (filesByGlob[absoluteThresholdGroup] === undefined) {\n              filesByGlob[absoluteThresholdGroup] = (_glob || _load_glob()).default.sync(absoluteThresholdGroup).map(function (filePath) {\n                return (_path || _load_path()).default.resolve(filePath);\n              });\n            }\n            if (filesByGlob[absoluteThresholdGroup].indexOf(file) > -1) {\n              groupTypeByThresholdGroup[thresholdGroup] = THRESHOLD_GROUP_TYPES.GLOB;\n              return agg.concat([[file, thresholdGroup]]);\n            }\n            return agg;\n          }, []);\n          if (pathOrGlobMatches.length > 0) {\n            return files.concat(pathOrGlobMatches);\n          }\n\n          // Neither a glob or a path? Toss it in global if there's a global threshold:\n          if (thresholdGroups.indexOf(THRESHOLD_GROUP_TYPES.GLOBAL) > -1) {\n            groupTypeByThresholdGroup[THRESHOLD_GROUP_TYPES.GLOBAL] = THRESHOLD_GROUP_TYPES.GLOBAL;\n            return files.concat([[file, THRESHOLD_GROUP_TYPES.GLOBAL]]);\n          }\n\n          // A covered file that doesn't have a threshold:\n          return files.concat([[file, undefined]]);\n        }, []);\n        var getFilesInThresholdGroup = function getFilesInThresholdGroup(thresholdGroup) {\n          return coveredFilesSortedIntoThresholdGroup.filter(function (fileAndGroup) {\n            return fileAndGroup[1] === thresholdGroup;\n          }).map(function (fileAndGroup) {\n            return fileAndGroup[0];\n          });\n        };\n        var errors = [];\n        thresholdGroups.forEach(function (thresholdGroup) {\n          switch (groupTypeByThresholdGroup[thresholdGroup]) {\n            case THRESHOLD_GROUP_TYPES.GLOBAL:\n              {\n                var coverage = combineCoverage(getFilesInThresholdGroup(THRESHOLD_GROUP_TYPES.GLOBAL));\n                if (coverage) {\n                  errors = errors.concat(check(thresholdGroup, globalConfig.coverageThreshold[thresholdGroup], coverage));\n                }\n                break;\n              }\n            case THRESHOLD_GROUP_TYPES.PATH:\n              {\n                var _coverage = combineCoverage(getFilesInThresholdGroup(thresholdGroup));\n                if (_coverage) {\n                  errors = errors.concat(check(thresholdGroup, globalConfig.coverageThreshold[thresholdGroup], _coverage));\n                }\n                break;\n              }\n            case THRESHOLD_GROUP_TYPES.GLOB:\n              getFilesInThresholdGroup(thresholdGroup).forEach(function (fileMatchingGlob) {\n                errors = errors.concat(check(fileMatchingGlob, globalConfig.coverageThreshold[thresholdGroup], map.fileCoverageFor(fileMatchingGlob).toSummary()));\n              });\n              break;\n            default:\n              // If the file specified by path is not found, error is returned.\n              if (thresholdGroup !== THRESHOLD_GROUP_TYPES.GLOBAL) {\n                errors = errors.concat(\"Jest: Coverage data for \".concat(thresholdGroup, \" was not found.\"));\n              }\n            // Sometimes all files in the coverage data are matched by\n            // PATH and GLOB threshold groups in which case, don't error when\n            // the global threshold group doesn't match any files.\n          }\n        });\n\n        errors = errors.filter(function (err) {\n          return err !== undefined && err !== null && err.length > 0;\n        });\n        if (errors.length > 0) {\n          this.log(\"\".concat(FAIL_COLOR(errors.join('\\n'))));\n          this._setError(new Error(errors.join('\\n')));\n        }\n      }\n    } // Only exposed for the internal runner. Should not be used\n  }, {\n    key: \"getCoverageMap\",\n    value: function getCoverageMap() {\n      return this._coverageMap;\n    }\n  }]);\n  return CoverageReporter;\n}((_base_reporter || _load_base_reporter()).default);\nexports.default = CoverageReporter;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _crypto;\nfunction _load_crypto() {\n  return _crypto = _interopRequireDefault(require('crypto'));\n}\nvar _fs;\nfunction _load_fs() {\n  return _fs = _interopRequireDefault(require('fs'));\n}\nvar _path;\nfunction _load_path() {\n  return _path = _interopRequireDefault(require('path'));\n}\nvar _babelPresetJest;\nfunction _load_babelPresetJest() {\n  return _babelPresetJest = _interopRequireDefault(require('babel-preset-jest'));\n}\nvar _babelCore;\nfunction _load_babelCore() {\n  return _babelCore = require('babel-core');\n}\nvar _babelPluginIstanbul;\nfunction _load_babelPluginIstanbul() {\n  return _babelPluginIstanbul = _interopRequireDefault(require('babel-plugin-istanbul'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar BABELRC_FILENAME = '.babelrc';\nvar BABELRC_JS_FILENAME = '.babelrc.js';\nvar BABEL_CONFIG_JS_FILENAME = 'babel.config.js';\nvar BABEL_CONFIG_KEY = 'babel';\nvar PACKAGE_JSON = 'package.json';\nvar THIS_FILE = (_fs || _load_fs()).default.readFileSync(__filename);\nvar createTransformer = function createTransformer(options) {\n  var cache = Object.create(null);\n  var getBabelRC = function getBabelRC(filename) {\n    var paths = [];\n    var directory = filename;\n    while (directory !== (directory = (_path || _load_path()).default.dirname(directory))) {\n      if (cache[directory]) {\n        break;\n      }\n      paths.push(directory);\n      var configFilePath = (_path || _load_path()).default.join(directory, BABELRC_FILENAME);\n      if ((_fs || _load_fs()).default.existsSync(configFilePath)) {\n        cache[directory] = (_fs || _load_fs()).default.readFileSync(configFilePath, 'utf8');\n        break;\n      }\n      var configJsFilePath = (_path || _load_path()).default.join(directory, BABELRC_JS_FILENAME);\n      if ((_fs || _load_fs()).default.existsSync(configJsFilePath)) {\n        // $FlowFixMe\n        cache[directory] = JSON.stringify(require(configJsFilePath));\n        break;\n      }\n      configJsFilePath = (_path || _load_path()).default.join(directory, BABEL_CONFIG_JS_FILENAME);\n      if ((_fs || _load_fs()).default.existsSync(configJsFilePath)) {\n        // $FlowFixMe\n        cache[directory] = JSON.stringify(require(configJsFilePath));\n        break;\n      }\n      var resolvedJsonFilePath = (_path || _load_path()).default.join(directory, PACKAGE_JSON);\n      var packageJsonFilePath = resolvedJsonFilePath === PACKAGE_JSON ? (_path || _load_path()).default.resolve(directory, PACKAGE_JSON) : resolvedJsonFilePath;\n      if ((_fs || _load_fs()).default.existsSync(packageJsonFilePath)) {\n        // $FlowFixMe\n        var packageJsonFileContents = require(packageJsonFilePath);\n        if (packageJsonFileContents[BABEL_CONFIG_KEY]) {\n          cache[directory] = JSON.stringify(packageJsonFileContents[BABEL_CONFIG_KEY]);\n          break;\n        }\n      }\n    }\n    paths.forEach(function (directoryPath) {\n      return cache[directoryPath] = cache[directory];\n    });\n    return cache[directory] || '';\n  };\n  options = Object.assign({}, options, {\n    compact: false,\n    plugins: options && options.plugins || [],\n    presets: (options && options.presets || []).concat([(_babelPresetJest || _load_babelPresetJest()).default]),\n    sourceMaps: 'both'\n  });\n  delete options.cacheDirectory;\n  delete options.filename;\n  return {\n    canInstrument: true,\n    getCacheKey: function getCacheKey(fileData, filename, configString, _ref) {\n      var instrument = _ref.instrument,\n        rootDir = _ref.rootDir;\n      return (_crypto || _load_crypto()).default.createHash('md5').update(THIS_FILE).update('\\0', 'utf8').update(JSON.stringify(options)).update('\\0', 'utf8').update(fileData).update('\\0', 'utf8').update((_path || _load_path()).default.relative(rootDir, filename)).update('\\0', 'utf8').update(configString).update('\\0', 'utf8').update(getBabelRC(filename)).update('\\0', 'utf8').update(instrument ? 'instrument' : '').digest('hex');\n    },\n    process: function process(src, filename, config, transformOptions) {\n      var altExts = config.moduleFileExtensions.map(function (extension) {\n        return '.' + extension;\n      });\n      if ((_babelCore || _load_babelCore()).util && !(_babelCore || _load_babelCore()).util.canCompile(filename, altExts)) {\n        return src;\n      }\n      var theseOptions = Object.assign({\n        filename: filename\n      }, options);\n      if (transformOptions && transformOptions.instrument) {\n        theseOptions.auxiliaryCommentBefore = ' istanbul ignore next ';\n        // Copied from jest-runtime transform.js\n        theseOptions.plugins = theseOptions.plugins.concat([[(_babelPluginIstanbul || _load_babelPluginIstanbul()).default, {\n          // files outside `cwd` will not be instrumented\n          cwd: config.rootDir,\n          exclude: []\n        }]]);\n      }\n\n      // babel v7 might return null in the case when the file has been ignored.\n      var transformResult = (0, (_babelCore || _load_babelCore()).transform)(src, theseOptions);\n      return transformResult || src;\n    }\n  };\n};\nmodule.exports = createTransformer();\nmodule.exports.createTransformer = createTransformer;","map":null,"metadata":{},"sourceType":"script"}
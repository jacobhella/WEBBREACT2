{"ast":null,"code":"'use strict';\n\n// Older verions of Node.js might not have `util.getSystemErrorName()`.\n// In that case, fall back to a deprecated internal.\nvar util = require('util');\nvar uv;\nif (typeof util.getSystemErrorName === 'function') {\n  module.exports = util.getSystemErrorName;\n} else {\n  try {\n    uv = process.binding('uv');\n    if (typeof uv.errname !== 'function') {\n      throw new TypeError('uv.errname is not a function');\n    }\n  } catch (err) {\n    console.error('execa/lib/errname: unable to establish process.binding(\\'uv\\')', err);\n    uv = null;\n  }\n  module.exports = function (code) {\n    return errname(uv, code);\n  };\n}\n\n// Used for testing the fallback behavior\nmodule.exports.__test__ = errname;\nfunction errname(uv, code) {\n  if (uv) {\n    return uv.errname(code);\n  }\n  if (!(code < 0)) {\n    throw new Error('err >= 0');\n  }\n  return \"Unknown system error \".concat(code);\n}","map":null,"metadata":{},"sourceType":"script"}
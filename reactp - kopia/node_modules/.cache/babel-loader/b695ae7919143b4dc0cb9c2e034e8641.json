{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\nvar pump = require('pump');\nvar bufferStream = require('./buffer-stream');\nvar MaxBufferError = /*#__PURE__*/function (_Error) {\n  _inherits(MaxBufferError, _Error);\n  function MaxBufferError() {\n    var _this;\n    _classCallCheck(this, MaxBufferError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaxBufferError).call(this, 'maxBuffer exceeded'));\n    _this.name = 'MaxBufferError';\n    return _this;\n  }\n  return MaxBufferError;\n}(_wrapNativeSuper(Error));\nfunction getStream(inputStream, options) {\n  if (!inputStream) {\n    return Promise.reject(new Error('Expected a stream'));\n  }\n  options = Object.assign({\n    maxBuffer: Infinity\n  }, options);\n  var _options = options,\n    maxBuffer = _options.maxBuffer;\n  var stream;\n  return new Promise(function (resolve, reject) {\n    var rejectPromise = function rejectPromise(error) {\n      if (error) {\n        // A null check\n        error.bufferedData = stream.getBufferedValue();\n      }\n      reject(error);\n    };\n    stream = pump(inputStream, bufferStream(options), function (error) {\n      if (error) {\n        rejectPromise(error);\n        return;\n      }\n      resolve();\n    });\n    stream.on('data', function () {\n      if (stream.getBufferedLength() > maxBuffer) {\n        rejectPromise(new MaxBufferError());\n      }\n    });\n  }).then(function () {\n    return stream.getBufferedValue();\n  });\n}\nmodule.exports = getStream;\nmodule.exports.buffer = function (stream, options) {\n  return getStream(stream, Object.assign({}, options, {\n    encoding: 'buffer'\n  }));\n};\nmodule.exports.array = function (stream, options) {\n  return getStream(stream, Object.assign({}, options, {\n    array: true\n  }));\n};\nmodule.exports.MaxBufferError = MaxBufferError;","map":null,"metadata":{},"sourceType":"script"}
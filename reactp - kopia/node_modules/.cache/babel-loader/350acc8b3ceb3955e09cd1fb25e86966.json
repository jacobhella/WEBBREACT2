{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _sourceCoverage = require('./source-coverage');\nvar _constants = require('./constants');\nvar _crypto = require('crypto');\nvar _babelTemplate = require('babel-template');\nvar _babelTemplate2 = _interopRequireDefault(_babelTemplate);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n// istanbul ignore comment pattern\nvar COMMENT_RE = /^\\s*istanbul\\s+ignore\\s+(if|else|next)(?=\\W|$)/;\n// istanbul ignore file pattern\nvar COMMENT_FILE_RE = /^\\s*istanbul\\s+ignore\\s+(file)(?=\\W|$)/;\n// source map URL pattern\nvar SOURCE_MAP_RE = /[#@]\\s*sourceMappingURL=(.*)\\s*$/m;\n\n// generate a variable name from hashing the supplied file path\nfunction genVar(filename) {\n  var hash = (0, _crypto.createHash)(_constants.SHA);\n  hash.update(filename);\n  return 'cov_' + parseInt(hash.digest('hex').substr(0, 12), 16).toString(36);\n}\n\n// VisitState holds the state of the visitor, provides helper functions\n// and is the `this` for the individual coverage visitors.\n\nvar VisitState = function () {\n  function VisitState(types, sourceFilePath, inputSourceMap) {\n    _classCallCheck(this, VisitState);\n    this.varName = genVar(sourceFilePath);\n    this.attrs = {};\n    this.nextIgnore = null;\n    this.cov = new _sourceCoverage.SourceCoverage(sourceFilePath);\n    if (typeof inputSourceMap !== \"undefined\") {\n      this.cov.inputSourceMap(inputSourceMap);\n    }\n    this.types = types;\n    this.sourceMappingURL = null;\n  }\n\n  // should we ignore the node? Yes, if specifically ignoring\n  // or if the node is generated.\n\n  _createClass(VisitState, [{\n    key: 'shouldIgnore',\n    value: function shouldIgnore(path) {\n      return this.nextIgnore || !path.node.loc;\n    }\n\n    // extract the ignore comment hint (next|if|else) or null\n  }, {\n    key: 'hintFor',\n    value: function hintFor(node) {\n      var hint = null;\n      if (node.leadingComments) {\n        node.leadingComments.forEach(function (c) {\n          var v = (c.value || /* istanbul ignore next: paranoid check */\"\").trim();\n          var groups = v.match(COMMENT_RE);\n          if (groups) {\n            hint = groups[1];\n          }\n        });\n      }\n      return hint;\n    }\n\n    // extract a source map URL from comments and keep track of it\n  }, {\n    key: 'maybeAssignSourceMapURL',\n    value: function maybeAssignSourceMapURL(node) {\n      var that = this;\n      var extractURL = function extractURL(comments) {\n        if (!comments) {\n          return;\n        }\n        comments.forEach(function (c) {\n          var v = (c.value || /* istanbul ignore next: paranoid check */\"\").trim();\n          var groups = v.match(SOURCE_MAP_RE);\n          if (groups) {\n            that.sourceMappingURL = groups[1];\n          }\n        });\n      };\n      extractURL(node.leadingComments);\n      extractURL(node.trailingComments);\n    }\n\n    // for these expressions the statement counter needs to be hoisted, so\n    // function name inference can be preserved\n  }, {\n    key: 'counterNeedsHoisting',\n    value: function counterNeedsHoisting(path) {\n      return path.isFunctionExpression() || path.isArrowFunctionExpression() || path.isClassExpression();\n    }\n\n    // all the generic stuff that needs to be done on enter for every node\n  }, {\n    key: 'onEnter',\n    value: function onEnter(path) {\n      var n = path.node;\n      this.maybeAssignSourceMapURL(n);\n\n      // if already ignoring, nothing more to do\n      if (this.nextIgnore !== null) {\n        return;\n      }\n      // check hint to see if ignore should be turned on\n      var hint = this.hintFor(n);\n      if (hint === 'next') {\n        this.nextIgnore = n;\n        return;\n      }\n      // else check custom node attribute set by a prior visitor\n      if (this.getAttr(path.node, 'skip-all') !== null) {\n        this.nextIgnore = n;\n      }\n    }\n\n    // all the generic stuff on exit of a node,\n    // including reseting ignores and custom node attrs\n  }, {\n    key: 'onExit',\n    value: function onExit(path) {\n      // restore ignore status, if needed\n      if (path.node === this.nextIgnore) {\n        this.nextIgnore = null;\n      }\n      // nuke all attributes for the node\n      delete path.node.__cov__;\n    }\n\n    // set a node attribute for the supplied node\n  }, {\n    key: 'setAttr',\n    value: function setAttr(node, name, value) {\n      node.__cov__ = node.__cov__ || {};\n      node.__cov__[name] = value;\n    }\n\n    // retrieve a node attribute for the supplied node or null\n  }, {\n    key: 'getAttr',\n    value: function getAttr(node, name) {\n      var c = node.__cov__;\n      if (!c) {\n        return null;\n      }\n      return c[name];\n    }\n\n    //\n  }, {\n    key: 'increase',\n    value: function increase(type, id, index) {\n      var T = this.types;\n      var wrap = index !== null\n      // If `index` present, turn `x` into `x[index]`.\n      ? function (x) {\n        return T.memberExpression(x, T.numericLiteral(index), true);\n      } : function (x) {\n        return x;\n      };\n      return T.updateExpression('++', wrap(T.memberExpression(T.memberExpression(T.identifier(this.varName), T.identifier(type)), T.numericLiteral(id), true)));\n    }\n  }, {\n    key: 'insertCounter',\n    value: function insertCounter(path, increment) {\n      var T = this.types;\n      if (path.isBlockStatement()) {\n        path.node.body.unshift(T.expressionStatement(increment));\n      } else if (path.isStatement()) {\n        path.insertBefore(T.expressionStatement(increment));\n      } else if (this.counterNeedsHoisting(path) && T.isVariableDeclarator(path.parentPath)) {\n        // make an attempt to hoist the statement counter, so that\n        // function names are maintained.\n        var parent = path.parentPath.parentPath;\n        if (parent && T.isExportNamedDeclaration(parent.parentPath)) {\n          parent.parentPath.insertBefore(T.expressionStatement(increment));\n        } else if (parent && (T.isProgram(parent.parentPath) || T.isBlockStatement(parent.parentPath))) {\n          parent.insertBefore(T.expressionStatement(increment));\n        } else {\n          path.replaceWith(T.sequenceExpression([increment, path.node]));\n        }\n      } else /* istanbul ignore else: not expected */if (path.isExpression()) {\n          path.replaceWith(T.sequenceExpression([increment, path.node]));\n        } else {\n          console.error('Unable to insert counter for node type:', path.node.type);\n        }\n    }\n  }, {\n    key: 'insertStatementCounter',\n    value: function insertStatementCounter(path) {\n      /* istanbul ignore if: paranoid check */\n      if (!(path.node && path.node.loc)) {\n        return;\n      }\n      var index = this.cov.newStatement(path.node.loc);\n      var increment = this.increase('s', index, null);\n      this.insertCounter(path, increment);\n    }\n  }, {\n    key: 'insertFunctionCounter',\n    value: function insertFunctionCounter(path) {\n      var T = this.types;\n      /* istanbul ignore if: paranoid check */\n      if (!(path.node && path.node.loc)) {\n        return;\n      }\n      var n = path.node;\n      var dloc = null;\n      // get location for declaration\n      switch (n.type) {\n        case \"FunctionDeclaration\":\n          /* istanbul ignore else: paranoid check */\n          if (n.id) {\n            dloc = n.id.loc;\n          }\n          break;\n        case \"FunctionExpression\":\n          if (n.id) {\n            dloc = n.id.loc;\n          }\n          break;\n      }\n      if (!dloc) {\n        dloc = {\n          start: n.loc.start,\n          end: {\n            line: n.loc.start.line,\n            column: n.loc.start.column + 1\n          }\n        };\n      }\n      var name = path.node.id ? path.node.id.name : path.node.name;\n      var index = this.cov.newFunction(name, dloc, path.node.body.loc);\n      var increment = this.increase('f', index, null);\n      var body = path.get('body');\n      /* istanbul ignore else: not expected */\n      if (body.isBlockStatement()) {\n        body.node.body.unshift(T.expressionStatement(increment));\n      } else {\n        console.error('Unable to process function body node type:', path.node.type);\n      }\n    }\n  }, {\n    key: 'getBranchIncrement',\n    value: function getBranchIncrement(branchName, loc) {\n      var index = this.cov.addBranchPath(branchName, loc);\n      return this.increase('b', branchName, index);\n    }\n  }, {\n    key: 'insertBranchCounter',\n    value: function insertBranchCounter(path, branchName, loc) {\n      var increment = this.getBranchIncrement(branchName, loc || path.node.loc);\n      this.insertCounter(path, increment);\n    }\n  }, {\n    key: 'findLeaves',\n    value: function findLeaves(node, accumulator, parent, property) {\n      if (!node) {\n        return;\n      }\n      if (node.type === \"LogicalExpression\") {\n        var hint = this.hintFor(node);\n        if (hint !== 'next') {\n          this.findLeaves(node.left, accumulator, node, 'left');\n          this.findLeaves(node.right, accumulator, node, 'right');\n        }\n      } else {\n        accumulator.push({\n          node: node,\n          parent: parent,\n          property: property\n        });\n      }\n    }\n  }]);\n  return VisitState;\n}();\n\n// generic function that takes a set of visitor methods and\n// returns a visitor object with `enter` and `exit` properties,\n// such that:\n//\n// * standard entry processing is done\n// * the supplied visitors are called only when ignore is not in effect\n//   This relieves them from worrying about ignore states and generated nodes.\n// * standard exit processing is done\n//\n\nfunction entries() {\n  var enter = Array.prototype.slice.call(arguments);\n  // the enter function\n  var wrappedEntry = function wrappedEntry(path, node) {\n    this.onEnter(path);\n    if (this.shouldIgnore(path)) {\n      return;\n    }\n    var that = this;\n    enter.forEach(function (e) {\n      e.call(that, path, node);\n    });\n  };\n  var exit = function exit(path, node) {\n    this.onExit(path, node);\n  };\n  return {\n    enter: wrappedEntry,\n    exit: exit\n  };\n}\nfunction coverStatement(path) {\n  this.insertStatementCounter(path);\n}\n\n/* istanbul ignore next: no node.js support */\nfunction coverAssignmentPattern(path) {\n  var n = path.node;\n  var b = this.cov.newBranch('default-arg', n.loc);\n  this.insertBranchCounter(path.get('right'), b);\n}\nfunction coverFunction(path) {\n  this.insertFunctionCounter(path);\n}\nfunction coverVariableDeclarator(path) {\n  this.insertStatementCounter(path.get('init'));\n}\nfunction skipInit(path) {\n  if (path.node.init) {\n    this.setAttr(path.node.init, 'skip-all', true);\n  }\n}\nfunction makeBlock(path) {\n  var T = this.types;\n  if (!path.node) {\n    path.replaceWith(T.blockStatement([]));\n  }\n  if (!path.isBlockStatement()) {\n    path.replaceWith(T.blockStatement([path.node]));\n    path.node.loc = path.node.body[0].loc;\n  }\n}\nfunction blockProp(prop) {\n  return function (path) {\n    makeBlock.call(this, path.get(prop));\n  };\n}\nfunction makeParenthesizedExpression(path) {\n  var T = this.types;\n  if (path.node) {\n    path.replaceWith(T.parenthesizedExpression(path.node));\n  }\n}\nfunction parenthesizedExpressionProp(prop) {\n  return function (path) {\n    makeParenthesizedExpression.call(this, path.get(prop));\n  };\n}\nfunction convertArrowExpression(path) {\n  var n = path.node;\n  var T = this.types;\n  if (!T.isBlockStatement(n.body)) {\n    var bloc = n.body.loc;\n    if (n.expression === true) {\n      n.expression = false;\n    }\n    n.body = T.blockStatement([T.returnStatement(n.body)]);\n    // restore body location\n    n.body.loc = bloc;\n    // set up the location for the return statement so it gets\n    // instrumented\n    n.body.body[0].loc = bloc;\n  }\n}\nfunction coverIfBranches(path) {\n  var n = path.node,\n    hint = this.hintFor(n),\n    ignoreIf = hint === 'if',\n    ignoreElse = hint === 'else',\n    branch = this.cov.newBranch('if', n.loc);\n  if (ignoreIf) {\n    this.setAttr(n.consequent, 'skip-all', true);\n  } else {\n    this.insertBranchCounter(path.get('consequent'), branch, n.loc);\n  }\n  if (ignoreElse) {\n    this.setAttr(n.alternate, 'skip-all', true);\n  } else {\n    this.insertBranchCounter(path.get('alternate'), branch, n.loc);\n  }\n}\nfunction createSwitchBranch(path) {\n  var b = this.cov.newBranch('switch', path.node.loc);\n  this.setAttr(path.node, 'branchName', b);\n}\nfunction coverSwitchCase(path) {\n  var T = this.types;\n  var b = this.getAttr(path.parentPath.node, 'branchName');\n  /* istanbul ignore if: paranoid check */\n  if (b === null) {\n    throw new Error('Unable to get switch branch name');\n  }\n  var increment = this.getBranchIncrement(b, path.node.loc);\n  path.node.consequent.unshift(T.expressionStatement(increment));\n}\nfunction coverTernary(path) {\n  var n = path.node,\n    branch = this.cov.newBranch('cond-expr', path.node.loc),\n    cHint = this.hintFor(n.consequent),\n    aHint = this.hintFor(n.alternate);\n  if (cHint !== 'next') {\n    this.insertBranchCounter(path.get('consequent'), branch);\n  }\n  if (aHint !== 'next') {\n    this.insertBranchCounter(path.get('alternate'), branch);\n  }\n}\nfunction coverLogicalExpression(path) {\n  var T = this.types;\n  if (path.parentPath.node.type === \"LogicalExpression\") {\n    return; // already processed\n  }\n\n  var leaves = [];\n  this.findLeaves(path.node, leaves);\n  var b = this.cov.newBranch(\"binary-expr\", path.node.loc);\n  for (var i = 0; i < leaves.length; i += 1) {\n    var leaf = leaves[i];\n    var hint = this.hintFor(leaf.node);\n    if (hint === 'next') {\n      continue;\n    }\n    var increment = this.getBranchIncrement(b, leaf.node.loc);\n    if (!increment) {\n      continue;\n    }\n    leaf.parent[leaf.property] = T.sequenceExpression([increment, leaf.node]);\n  }\n}\nvar codeVisitor = {\n  ArrowFunctionExpression: entries(convertArrowExpression, coverFunction),\n  AssignmentPattern: entries(coverAssignmentPattern),\n  BlockStatement: entries(),\n  // ignore processing only\n  ClassMethod: entries(coverFunction),\n  ClassDeclaration: entries(parenthesizedExpressionProp('superClass')),\n  ExpressionStatement: entries(coverStatement),\n  BreakStatement: entries(coverStatement),\n  ContinueStatement: entries(coverStatement),\n  DebuggerStatement: entries(coverStatement),\n  ReturnStatement: entries(coverStatement),\n  ThrowStatement: entries(coverStatement),\n  TryStatement: entries(coverStatement),\n  VariableDeclaration: entries(),\n  // ignore processing only\n  VariableDeclarator: entries(coverVariableDeclarator),\n  IfStatement: entries(blockProp('consequent'), blockProp('alternate'), coverStatement, coverIfBranches),\n  ForStatement: entries(blockProp('body'), skipInit, coverStatement),\n  ForInStatement: entries(blockProp('body'), skipInit, coverStatement),\n  ForOfStatement: entries(blockProp('body'), skipInit, coverStatement),\n  WhileStatement: entries(blockProp('body'), coverStatement),\n  DoWhileStatement: entries(blockProp('body'), coverStatement),\n  SwitchStatement: entries(createSwitchBranch, coverStatement),\n  SwitchCase: entries(coverSwitchCase),\n  WithStatement: entries(blockProp('body'), coverStatement),\n  FunctionDeclaration: entries(coverFunction),\n  FunctionExpression: entries(coverFunction),\n  LabeledStatement: entries(coverStatement),\n  ConditionalExpression: entries(coverTernary),\n  LogicalExpression: entries(coverLogicalExpression)\n};\n// the template to insert at the top of the program.\nvar coverageTemplate = (0, _babelTemplate2.default)('\\n    var COVERAGE_VAR = (function () {\\n        var path = PATH,\\n            hash = HASH,\\n            Function = (function(){}).constructor,\\n            global = (new Function(\\'return this\\'))(),\\n            gcv = GLOBAL_COVERAGE_VAR,\\n            coverageData = INITIAL,\\n            coverage = global[gcv] || (global[gcv] = {});\\n        if (coverage[path] && coverage[path].hash === hash) {\\n            return coverage[path];\\n        }\\n        coverageData.hash = hash;\\n        return coverage[path] = coverageData;\\n    })();\\n');\n// the rewire plugin (and potentially other babel middleware)\n// may cause files to be instrumented twice, see:\n// https://github.com/istanbuljs/babel-plugin-istanbul/issues/94\n// we should only instrument code for coverage the first time\n// it's run through istanbul-lib-instrument.\nfunction alreadyInstrumented(path, visitState) {\n  return path.scope.hasBinding(visitState.varName);\n}\nfunction shouldIgnoreFile(programNode) {\n  return programNode.parent && programNode.parent.comments.some(function (c) {\n    return COMMENT_FILE_RE.test(c.value);\n  });\n}\n/**\n * programVisitor is a `babel` adaptor for instrumentation.\n * It returns an object with two methods `enter` and `exit`.\n * These should be assigned to or called from `Program` entry and exit functions\n * in a babel visitor.\n * These functions do not make assumptions about the state set by Babel and thus\n * can be used in a context other than a Babel plugin.\n *\n * The exit function returns an object that currently has the following keys:\n *\n * `fileCoverage` - the file coverage object created for the source file.\n * `sourceMappingURL` - any source mapping URL found when processing the file.\n *\n * @param {Object} types - an instance of babel-types\n * @param {string} sourceFilePath - the path to source file\n * @param {Object} opts - additional options\n * @param {string} [opts.coverageVariable=__coverage__] the global coverage variable name.\n * @param {object} [opts.inputSourceMap=undefined] the input source map, that maps the uninstrumented code back to the\n * original code.\n */\nfunction programVisitor(types) {\n  var sourceFilePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknown.js';\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    coverageVariable: '__coverage__',\n    inputSourceMap: undefined\n  };\n  var T = types;\n  var visitState = new VisitState(types, sourceFilePath, opts.inputSourceMap);\n  return {\n    enter: function enter(path) {\n      if (shouldIgnoreFile(path.find(function (p) {\n        return p.isProgram();\n      }))) {\n        return;\n      }\n      if (alreadyInstrumented(path, visitState)) {\n        return;\n      }\n      path.traverse(codeVisitor, visitState);\n    },\n    exit: function exit(path) {\n      if (alreadyInstrumented(path, visitState)) {\n        return;\n      }\n      visitState.cov.freeze();\n      var coverageData = visitState.cov.toJSON();\n      if (shouldIgnoreFile(path.find(function (p) {\n        return p.isProgram();\n      }))) {\n        return {\n          fileCoverage: coverageData,\n          sourceMappingURL: visitState.sourceMappingURL\n        };\n      }\n      coverageData[_constants.MAGIC_KEY] = _constants.MAGIC_VALUE;\n      var hash = (0, _crypto.createHash)(_constants.SHA).update(JSON.stringify(coverageData)).digest('hex');\n      var coverageNode = T.valueToNode(coverageData);\n      delete coverageData[_constants.MAGIC_KEY];\n      var cv = coverageTemplate({\n        GLOBAL_COVERAGE_VAR: T.stringLiteral(opts.coverageVariable),\n        COVERAGE_VAR: T.identifier(visitState.varName),\n        PATH: T.stringLiteral(sourceFilePath),\n        INITIAL: coverageNode,\n        HASH: T.stringLiteral(hash)\n      });\n      cv._blockHoist = 5;\n      path.node.body.unshift(cv);\n      return {\n        fileCoverage: coverageData,\n        sourceMappingURL: visitState.sourceMappingURL\n      };\n    }\n  };\n}\nexports.default = programVisitor;","map":null,"metadata":{},"sourceType":"script"}
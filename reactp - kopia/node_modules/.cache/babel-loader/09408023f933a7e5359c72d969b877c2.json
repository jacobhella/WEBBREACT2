{"ast":null,"code":"var util = require('util');\nvar minimatch = require('minimatch');\nvar glob = require('glob');\nvar Glob = glob.Glob;\nvar EventEmitter = require('events').EventEmitter;\nmodule.exports = fileset;\n\n// Async API\nfunction fileset(include, exclude, options, cb) {\n  if (typeof exclude === 'function') cb = exclude, exclude = '';else if (typeof options === 'function') cb = options, options = {};\n  var includes = typeof include === 'string' ? include.split(' ') : include;\n  var excludes = typeof exclude === 'string' ? exclude.split(' ') : exclude;\n  var em = new EventEmitter();\n  var remaining = includes.length;\n  var results = [];\n  if (!includes.length) return cb(new Error('Must provide an include pattern'));\n  em.includes = includes.map(function (pattern) {\n    return new fileset.Fileset(pattern, options).on('error', cb ? cb : em.emit.bind(em, 'error')).on('match', em.emit.bind(em, 'match')).on('match', em.emit.bind(em, 'include')).on('end', next.bind({}, pattern));\n  });\n  function next(pattern, matches) {\n    results = results.concat(matches);\n    if (! --remaining) {\n      results = results.filter(function (file) {\n        return !excludes.filter(function (glob) {\n          var match = minimatch(file, glob, {\n            matchBase: true\n          });\n          if (match) em.emit('exclude', file);\n          return match;\n        }).length;\n      });\n      if (cb) cb(null, results);\n      em.emit('end', results);\n    }\n  }\n  return em;\n}\n\n// Sync API\nfileset.sync = function filesetSync(include, exclude) {\n  if (!exclude) exclude = '';\n\n  // includes / excludes, either an array or string separated by comma or whitespace\n  var includes = typeof include === 'string' ? include.split(/[\\s,]/g) : include;\n  var excludes = typeof exclude === 'string' ? exclude.split(/[\\s,]/g) : exclude;\n\n  // Filter out any false positive '' empty strings\n  includes = includes.filter(function (pattern) {\n    return pattern;\n  });\n  excludes = excludes.filter(function (pattern) {\n    return pattern;\n  });\n\n  // - todo: pass in glob options as last param\n  var options = {\n    matchBase: true\n  };\n\n  // always ignore node_modules for sync api\n  options.ignore = ['node_modules/**/*'];\n\n  // First, glob match on all include patters into a single array\n  var results = includes.map(function (include) {\n    return glob.sync(include, options);\n  }).reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n\n  // Then filters out on any exclude match\n  var ignored = excludes.map(function (exclude) {\n    return glob.sync(exclude, options);\n  }).reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n\n  // And filter any exclude match\n  results = results.filter(function (file) {\n    return !ignored.filter(function (glob) {\n      return minimatch(file, glob, {\n        matchBase: true\n      });\n    }).length;\n  });\n  return results;\n};\nfileset.Fileset = function Fileset(pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {};\n  if (!options) options = {};\n\n  // ignore node_modules by default, unless specified\n  options.ignore = options.ignore || ['node_modules/**/*'];\n  Glob.call(this, pattern, options);\n  if (typeof cb === 'function') {\n    this.on('error', cb);\n    this.on('end', function (matches) {\n      cb(null, matches);\n    });\n  }\n};\nutil.inherits(fileset.Fileset, Glob);","map":null,"metadata":{},"sourceType":"script"}
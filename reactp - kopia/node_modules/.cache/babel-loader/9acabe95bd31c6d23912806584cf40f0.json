{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\nexports.strip = strip;\nexports.parse = parse;\nexports.parseWithComments = parseWithComments;\nexports.print = print;\nvar _detectNewline;\nfunction _load_detectNewline() {\n  return _detectNewline = _interopRequireDefault(require('detect-newline'));\n}\nvar _os;\nfunction _load_os() {\n  return _os = require('os');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar commentEndRe = /\\*\\/$/;\nvar commentStartRe = /^\\/\\*\\*/;\nvar docblockRe = /^\\s*(\\/\\*\\*?(.|\\r?\\n)*?\\*\\/)/;\nvar lineCommentRe = /(^|\\s+)\\/\\/([^\\r\\n]*)/g;\nvar ltrimNewlineRe = /^(\\r?\\n)+/;\nvar multilineRe = /(?:^|\\r?\\n) *(@[^\\r\\n]*?) *\\r?\\n *(?![^@\\r\\n]*\\/\\/[^]*)([^@\\r\\n\\s][^@\\r\\n]+?) *\\r?\\n/g;\nvar propertyRe = /(?:^|\\r?\\n) *@(\\S+) *([^\\r\\n]*)/g;\nvar stringStartRe = /(\\r?\\n|^) *\\* ?/g;\nfunction extract(contents) {\n  var match = contents.match(docblockRe);\n  return match ? match[0].trimLeft() : '';\n}\nfunction strip(contents) {\n  var match = contents.match(docblockRe);\n  return match && match[0] ? contents.substring(match[0].length) : contents;\n}\nfunction parse(docblock) {\n  return parseWithComments(docblock).pragmas;\n}\nfunction parseWithComments(docblock) {\n  var line = (0, (_detectNewline || _load_detectNewline()).default)(docblock) || (_os || _load_os()).EOL;\n  docblock = docblock.replace(commentStartRe, '').replace(commentEndRe, '').replace(stringStartRe, '$1');\n\n  // Normalize multi-line directives\n  var prev = '';\n  while (prev !== docblock) {\n    prev = docblock;\n    docblock = docblock.replace(multilineRe, \"\".concat(line, \"$1 $2\").concat(line));\n  }\n  docblock = docblock.replace(ltrimNewlineRe, '').trimRight();\n  var result = Object.create(null);\n  var comments = docblock.replace(propertyRe, '').replace(ltrimNewlineRe, '').trimRight();\n  var match;\n  while (match = propertyRe.exec(docblock)) {\n    // strip linecomments from pragmas\n    var nextPragma = match[2].replace(lineCommentRe, '');\n    if (typeof result[match[1]] === 'string' || Array.isArray(result[match[1]])) {\n      result[match[1]] = [].concat(result[match[1]], nextPragma);\n    } else {\n      result[match[1]] = nextPragma;\n    }\n  }\n  return {\n    comments: comments,\n    pragmas: result\n  };\n}\nfunction print(_ref) {\n  var _ref$comments = _ref.comments;\n  var comments = _ref$comments === undefined ? '' : _ref$comments;\n  var _ref$pragmas = _ref.pragmas;\n  var pragmas = _ref$pragmas === undefined ? {} : _ref$pragmas;\n  var line = (0, (_detectNewline || _load_detectNewline()).default)(comments) || (_os || _load_os()).EOL;\n  var head = '/**';\n  var start = ' *';\n  var tail = ' */';\n  var keys = Object.keys(pragmas);\n  var printedObject = keys.map(function (key) {\n    return printKeyValues(key, pragmas[key]);\n  }).reduce(function (arr, next) {\n    return arr.concat(next);\n  }, []).map(function (keyValue) {\n    return start + ' ' + keyValue + line;\n  }).join('');\n  if (!comments) {\n    if (keys.length === 0) {\n      return '';\n    }\n    if (keys.length === 1 && !Array.isArray(pragmas[keys[0]])) {\n      var value = pragmas[keys[0]];\n      return \"\".concat(head, \" \").concat(printKeyValues(keys[0], value)[0]).concat(tail);\n    }\n  }\n  var printedComments = comments.split(line).map(function (textLine) {\n    return \"\".concat(start, \" \").concat(textLine);\n  }).join(line) + line;\n  return head + line + (comments ? printedComments : '') + (comments && keys.length ? start + line : '') + printedObject + tail;\n}\nfunction printKeyValues(key, valueOrArray) {\n  return [].concat(valueOrArray).map(function (value) {\n    return \"@\".concat(key, \" \").concat(value).trim();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
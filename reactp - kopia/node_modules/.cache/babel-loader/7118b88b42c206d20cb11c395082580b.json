{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _ansiEscapes;\nfunction _load_ansiEscapes() {\n  return _ansiEscapes = _interopRequireDefault(require('ansi-escapes'));\n}\nvar _jestWatcher;\nfunction _load_jestWatcher() {\n  return _jestWatcher = require('jest-watcher');\n}\nvar _utils;\nfunction _load_utils() {\n  return _utils = require('./reporters/utils');\n}\nvar _constants;\nfunction _load_constants() {\n  return _constants = require('./constants');\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\nvar SnapshotInteractiveMode = /*#__PURE__*/function () {\n  function SnapshotInteractiveMode(pipe) {\n    _classCallCheck(this, SnapshotInteractiveMode);\n    this._pipe = pipe;\n    this._isActive = false;\n    this._skippedNum = 0;\n  }\n  _createClass(SnapshotInteractiveMode, [{\n    key: \"isActive\",\n    value: function isActive() {\n      return this._isActive;\n    }\n  }, {\n    key: \"getSkippedNum\",\n    value: function getSkippedNum() {\n      return this._skippedNum;\n    }\n  }, {\n    key: \"_clearTestSummary\",\n    value: function _clearTestSummary() {\n      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.cursorUp(6));\n      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.eraseDown);\n    }\n  }, {\n    key: \"_drawUIProgress\",\n    value: function _drawUIProgress() {\n      this._clearTestSummary();\n      var numPass = this._countPaths - this._testAssertions.length;\n      var numRemaining = this._countPaths - numPass - this._skippedNum;\n      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', numRemaining) + ' remaining');\n      if (numPass) {\n        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');\n      }\n      if (this._skippedNum) {\n        stats += ', ' + (_chalk || _load_chalk()).default.bold.yellow((0, (_utils || _load_utils()).pluralize)('snapshot', this._skippedNum) + ' skipped');\n      }\n      var messages = ['\\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Progress'), (_constants || _load_constants()).ARROW + stats, '\\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'u' + (_chalk || _load_chalk()).default.dim(' to update failing snapshots for this test.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 's' + (_chalk || _load_chalk()).default.dim(' to skip the current test.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'q' + (_chalk || _load_chalk()).default.dim(' to quit Interactive Snapshot Mode.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'Enter' + (_chalk || _load_chalk()).default.dim(' to trigger a test run.')];\n      this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n    }\n  }, {\n    key: \"_drawUIDoneWithSkipped\",\n    value: function _drawUIDoneWithSkipped() {\n      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.clearScreen);\n      var numPass = this._countPaths - this._testAssertions.length;\n      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', this._countPaths) + ' reviewed');\n      if (numPass) {\n        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');\n      }\n      if (this._skippedNum) {\n        stats += ', ' + (_chalk || _load_chalk()).default.bold.yellow((0, (_utils || _load_utils()).pluralize)('snapshot', this._skippedNum) + ' skipped');\n      }\n      var messages = ['\\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Result'), (_constants || _load_constants()).ARROW + stats, '\\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'r' + (_chalk || _load_chalk()).default.dim(' to restart Interactive Snapshot Mode.'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'q' + (_chalk || _load_chalk()).default.dim(' to quit Interactive Snapshot Mode.')];\n      this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n    }\n  }, {\n    key: \"_drawUIDone\",\n    value: function _drawUIDone() {\n      this._pipe.write((_ansiEscapes || _load_ansiEscapes()).default.clearScreen);\n      var numPass = this._countPaths - this._testAssertions.length;\n      var stats = (_chalk || _load_chalk()).default.bold.dim((0, (_utils || _load_utils()).pluralize)('snapshot', this._countPaths) + ' reviewed');\n      if (numPass) {\n        stats += ', ' + (_chalk || _load_chalk()).default.bold.green((0, (_utils || _load_utils()).pluralize)('snapshot', numPass) + ' updated');\n      }\n      var messages = ['\\n' + (_chalk || _load_chalk()).default.bold('Interactive Snapshot Result'), (_constants || _load_constants()).ARROW + stats, '\\n' + (_chalk || _load_chalk()).default.bold('Watch Usage'), (_chalk || _load_chalk()).default.dim((_constants || _load_constants()).ARROW + 'Press ') + 'Enter' + (_chalk || _load_chalk()).default.dim(' to return to watch mode.')];\n      this._pipe.write(messages.filter(Boolean).join('\\n') + '\\n');\n    }\n  }, {\n    key: \"_drawUIOverlay\",\n    value: function _drawUIOverlay() {\n      if (this._testAssertions.length === 0) {\n        return this._drawUIDone();\n      }\n      if (this._testAssertions.length - this._skippedNum === 0) {\n        return this._drawUIDoneWithSkipped();\n      }\n      return this._drawUIProgress();\n    }\n  }, {\n    key: \"put\",\n    value: function put(key) {\n      switch (key) {\n        case 's':\n          if (this._skippedNum === this._testAssertions.length) break;\n          this._skippedNum += 1;\n\n          // move skipped test to the end\n          this._testAssertions.push(this._testAssertions.shift());\n          if (this._testAssertions.length - this._skippedNum > 0) {\n            this._run(false);\n          } else {\n            this._drawUIDoneWithSkipped();\n          }\n          break;\n        case 'u':\n          this._run(true);\n          break;\n        case 'q':\n        case (_jestWatcher || _load_jestWatcher()).KEYS.ESCAPE:\n          this.abort();\n          break;\n        case 'r':\n          this.restart();\n          break;\n        case (_jestWatcher || _load_jestWatcher()).KEYS.ENTER:\n          if (this._testAssertions.length === 0) {\n            this.abort();\n          } else {\n            this._run(false);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._isActive = false;\n      this._skippedNum = 0;\n      this._updateTestRunnerConfig(null, false);\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this._skippedNum = 0;\n      this._countPaths = this._testAssertions.length;\n      this._run(false);\n    }\n  }, {\n    key: \"updateWithResults\",\n    value: function updateWithResults(results) {\n      var hasSnapshotFailure = !!results.snapshot.failure;\n      if (hasSnapshotFailure) {\n        this._drawUIOverlay();\n        return;\n      }\n      this._testAssertions.shift();\n      if (this._testAssertions.length - this._skippedNum === 0) {\n        this._drawUIOverlay();\n        return;\n      }\n\n      // Go to the next test\n      this._run(false);\n    }\n  }, {\n    key: \"_run\",\n    value: function _run(shouldUpdateSnapshot) {\n      var testAssertion = this._testAssertions[0];\n      this._updateTestRunnerConfig(testAssertion, shouldUpdateSnapshot);\n    }\n  }, {\n    key: \"run\",\n    value: function run(failedSnapshotTestAssertions, onConfigChange) {\n      if (!failedSnapshotTestAssertions.length) {\n        return;\n      }\n      this._testAssertions = [].concat(failedSnapshotTestAssertions);\n      this._countPaths = this._testAssertions.length;\n      this._updateTestRunnerConfig = onConfigChange;\n      this._isActive = true;\n      this._run(false);\n    }\n  }]);\n  return SnapshotInteractiveMode;\n}();\nexports.default = SnapshotInteractiveMode;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _prettyFormat = require('pretty-format');\nvar _prettyFormat2 = _interopRequireDefault(_prettyFormat);\nvar _chalk = require('chalk');\nvar _chalk2 = _interopRequireDefault(_chalk);\nvar _jestGetType = require('jest-get-type');\nvar _jestGetType2 = _interopRequireDefault(_jestGetType);\nvar _diff_strings = require('./diff_strings');\nvar _diff_strings2 = _interopRequireDefault(_diff_strings);\nvar _constants = require('./constants');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar _prettyFormat$plugins = _prettyFormat2.default.plugins;\nvar AsymmetricMatcher = _prettyFormat$plugins.AsymmetricMatcher,\n  DOMCollection = _prettyFormat$plugins.DOMCollection,\n  DOMElement = _prettyFormat$plugins.DOMElement,\n  Immutable = _prettyFormat$plugins.Immutable,\n  ReactElement = _prettyFormat$plugins.ReactElement,\n  ReactTestComponent = _prettyFormat$plugins.ReactTestComponent;\nvar PLUGINS = [ReactTestComponent, ReactElement, DOMElement, DOMCollection, Immutable, AsymmetricMatcher];\nvar FORMAT_OPTIONS = {\n  plugins: PLUGINS\n};\nvar FORMAT_OPTIONS_0 = Object.assign({}, FORMAT_OPTIONS, {\n  indent: 0\n});\nvar FALLBACK_FORMAT_OPTIONS = {\n  callToJSON: false,\n  maxDepth: 10,\n  plugins: PLUGINS\n};\nvar FALLBACK_FORMAT_OPTIONS_0 = Object.assign({}, FALLBACK_FORMAT_OPTIONS, {\n  indent: 0\n});\n\n// Generate a string that will highlight the difference between two values\n// with green and red. (similar to how github does code diffing)\nfunction diff(a, b, options) {\n  if (a === b) {\n    return _constants.NO_DIFF_MESSAGE;\n  }\n  var aType = (0, _jestGetType2.default)(a);\n  var expectedType = aType;\n  var omitDifference = false;\n  if (aType === 'object' && typeof a.asymmetricMatch === 'function') {\n    if (a.$$typeof !== Symbol.for('jest.asymmetricMatcher')) {\n      // Do not know expected type of user-defined asymmetric matcher.\n      return null;\n    }\n    if (typeof a.getExpectedType !== 'function') {\n      // For example, expect.anything() matches either null or undefined\n      return null;\n    }\n    expectedType = a.getExpectedType();\n    // Primitive types boolean and number omit difference below.\n    // For example, omit difference for expect.stringMatching(regexp)\n    omitDifference = expectedType === 'string';\n  }\n  if (expectedType !== (0, _jestGetType2.default)(b)) {\n    return '  Comparing two different types of values.' + \" Expected \".concat(_chalk2.default.green(expectedType), \" but \") + \"received \".concat(_chalk2.default.red((0, _jestGetType2.default)(b)), \".\");\n  }\n  if (omitDifference) {\n    return null;\n  }\n  switch (aType) {\n    case 'string':\n      return (0, _diff_strings2.default)(a, b, options);\n    case 'number':\n    case 'boolean':\n      return null;\n    case 'map':\n      return compareObjects(sortMap(a), sortMap(b), options);\n    case 'set':\n      return compareObjects(sortSet(a), sortSet(b), options);\n    default:\n      return compareObjects(a, b, options);\n  }\n}\nfunction sortMap(map) {\n  return new Map(Array.from(map.entries()).sort());\n}\nfunction sortSet(set) {\n  return new Set(Array.from(set.values()).sort());\n}\nfunction compareObjects(a, b, options) {\n  var diffMessage;\n  var hasThrown = false;\n  try {\n    diffMessage = (0, _diff_strings2.default)((0, _prettyFormat2.default)(a, FORMAT_OPTIONS_0), (0, _prettyFormat2.default)(b, FORMAT_OPTIONS_0), options, {\n      a: (0, _prettyFormat2.default)(a, FORMAT_OPTIONS),\n      b: (0, _prettyFormat2.default)(b, FORMAT_OPTIONS)\n    });\n  } catch (e) {\n    hasThrown = true;\n  }\n\n  // If the comparison yields no results, compare again but this time\n  // without calling `toJSON`. It's also possible that toJSON might throw.\n  if (!diffMessage || diffMessage === _constants.NO_DIFF_MESSAGE) {\n    diffMessage = (0, _diff_strings2.default)((0, _prettyFormat2.default)(a, FALLBACK_FORMAT_OPTIONS_0), (0, _prettyFormat2.default)(b, FALLBACK_FORMAT_OPTIONS_0), options, {\n      a: (0, _prettyFormat2.default)(a, FALLBACK_FORMAT_OPTIONS),\n      b: (0, _prettyFormat2.default)(b, FALLBACK_FORMAT_OPTIONS)\n    });\n    if (diffMessage !== _constants.NO_DIFF_MESSAGE && !hasThrown) {\n      diffMessage = _constants.SIMILAR_MESSAGE + '\\n\\n' + diffMessage;\n    }\n  }\n  return diffMessage;\n}\nmodule.exports = diff;","map":null,"metadata":{},"sourceType":"script"}
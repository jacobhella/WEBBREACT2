{"ast":null,"code":"'use strict';\n\nvar inspect = require('util').inspect;\nvar path = require('path');\nvar Parser = require('yargs-parser');\nvar DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\n\n// handles parsing positional arguments,\n// and populating argv with said positional\n// arguments.\nmodule.exports = function command(yargs, usage, validation) {\n  var self = {};\n  var handlers = {};\n  var aliasMap = {};\n  var defaultCommand;\n  self.addHandler = function addHandler(cmd, description, builder, handler, middlewares) {\n    var aliases = [];\n    handler = handler || function () {};\n    middlewares = middlewares || [];\n    if (Array.isArray(cmd)) {\n      aliases = cmd.slice(1);\n      cmd = cmd[0];\n    } else if (typeof cmd === 'object') {\n      var _command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : moduleName(cmd);\n      if (cmd.aliases) _command = [].concat(_command).concat(cmd.aliases);\n      self.addHandler(_command, extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares);\n      return;\n    }\n\n    // allow a module to be provided instead of separate builder and handler\n    if (typeof builder === 'object' && builder.builder && typeof builder.handler === 'function') {\n      self.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares);\n      return;\n    }\n\n    // parse positionals out of cmd string\n    var parsedCommand = self.parseCommand(cmd);\n\n    // remove positional args from aliases only\n    aliases = aliases.map(function (alias) {\n      return self.parseCommand(alias).cmd;\n    });\n\n    // check for default and filter out '*''\n    var isDefault = false;\n    var parsedAliases = [parsedCommand.cmd].concat(aliases).filter(function (c) {\n      if (DEFAULT_MARKER.test(c)) {\n        isDefault = true;\n        return false;\n      }\n      return true;\n    });\n\n    // standardize on $0 for default command.\n    if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');\n\n    // shift cmd and aliases after filtering out '*'\n    if (isDefault) {\n      parsedCommand.cmd = parsedAliases[0];\n      aliases = parsedAliases.slice(1);\n      cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n    }\n\n    // populate aliasMap\n    aliases.forEach(function (alias) {\n      aliasMap[alias] = parsedCommand.cmd;\n    });\n    if (description !== false) {\n      usage.command(cmd, description, isDefault, aliases);\n    }\n    handlers[parsedCommand.cmd] = {\n      original: cmd,\n      description: description,\n      handler: handler,\n      builder: builder || {},\n      middlewares: middlewares || [],\n      demanded: parsedCommand.demanded,\n      optional: parsedCommand.optional\n    };\n    if (isDefault) defaultCommand = handlers[parsedCommand.cmd];\n  };\n  self.addDirectory = function addDirectory(dir, context, req, callerFile, opts) {\n    opts = opts || {};\n    // disable recursion to support nested directories of subcommands\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    // exclude 'json', 'coffee' from require-directory defaults\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    // allow consumer to define their own visitor function\n    var parentVisit = typeof opts.visit === 'function' ? opts.visit : function (o) {\n      return o;\n    };\n    // call addHandler via visitor function\n    opts.visit = function visit(obj, joined, filename) {\n      var visited = parentVisit(obj, joined, filename);\n      // allow consumer to skip modules with their own visitor\n      if (visited) {\n        // check for cyclic reference\n        // each command file path should only be seen once per execution\n        if (~context.files.indexOf(joined)) return visited;\n        // keep track of visited files in context.files\n        context.files.push(joined);\n        self.addHandler(visited);\n      }\n      return visited;\n    };\n    require('require-directory')({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  };\n\n  // lookup module object from require()d command and derive name\n  // if module was not require()d and no name given, throw error\n  function moduleName(obj) {\n    var mod = require('which-module')(obj);\n    if (!mod) throw new Error(\"No command name given for module: \".concat(inspect(obj)));\n    return commandFromFilename(mod.filename);\n  }\n\n  // derive command name from filename\n  function commandFromFilename(filename) {\n    return path.basename(filename, path.extname(filename));\n  }\n  function extractDesc(obj) {\n    for (var keys = ['describe', 'description', 'desc'], i = 0, l = keys.length, test; i < l; i++) {\n      test = obj[keys[i]];\n      if (typeof test === 'string' || typeof test === 'boolean') return test;\n    }\n    return false;\n  }\n  self.parseCommand = function parseCommand(cmd) {\n    var extraSpacesStrippedCommand = cmd.replace(/\\s{2,}/g, ' ');\n    var splitCommand = extraSpacesStrippedCommand.split(/\\s+(?![^[]*]|[^<]*>)/);\n    var bregex = /\\.*[\\][<>]/g;\n    var parsedCommand = {\n      cmd: splitCommand.shift().replace(bregex, ''),\n      demanded: [],\n      optional: []\n    };\n    splitCommand.forEach(function (cmd, i) {\n      var variadic = false;\n      cmd = cmd.replace(/\\s/g, '');\n      if (/\\.+[\\]>]/.test(cmd) && i === splitCommand.length - 1) variadic = true;\n      if (/^\\[/.test(cmd)) {\n        parsedCommand.optional.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic: variadic\n        });\n      } else {\n        parsedCommand.demanded.push({\n          cmd: cmd.replace(bregex, '').split('|'),\n          variadic: variadic\n        });\n      }\n    });\n    return parsedCommand;\n  };\n  self.getCommands = function () {\n    return Object.keys(handlers).concat(Object.keys(aliasMap));\n  };\n  self.getCommandHandlers = function () {\n    return handlers;\n  };\n  self.hasDefaultCommand = function () {\n    return !!defaultCommand;\n  };\n  self.runCommand = function runCommand(command, yargs, parsed, commandIndex) {\n    var aliases = parsed.aliases;\n    var commandHandler = handlers[command] || handlers[aliasMap[command]] || defaultCommand;\n    var currentContext = yargs.getContext();\n    var numFiles = currentContext.files.length;\n    var parentCommands = currentContext.commands.slice();\n\n    // what does yargs look like after the buidler is run?\n    var innerArgv = parsed.argv;\n    var innerYargs = null;\n    var positionalMap = {};\n    if (command) {\n      currentContext.commands.push(command);\n      currentContext.fullCommands.push(commandHandler.original);\n    }\n    if (typeof commandHandler.builder === 'function') {\n      // a function can be provided, which builds\n      // up a yargs chain and possibly returns it.\n      innerYargs = commandHandler.builder(yargs.reset(parsed.aliases));\n      // if the builder function did not yet parse argv with reset yargs\n      // and did not explicitly set a usage() string, then apply the\n      // original command string as usage() for consistent behavior with\n      // options object below.\n      if (yargs.parsed === false) {\n        if (shouldUpdateUsage(yargs)) {\n          yargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n        }\n        innerArgv = innerYargs ? innerYargs._parseArgs(null, null, true, commandIndex) : yargs._parseArgs(null, null, true, commandIndex);\n      } else {\n        innerArgv = yargs.parsed.argv;\n      }\n      if (innerYargs && yargs.parsed === false) aliases = innerYargs.parsed.aliases;else aliases = yargs.parsed.aliases;\n    } else if (typeof commandHandler.builder === 'object') {\n      // as a short hand, an object can instead be provided, specifying\n      // the options that a command takes.\n      innerYargs = yargs.reset(parsed.aliases);\n      if (shouldUpdateUsage(innerYargs)) {\n        innerYargs.getUsageInstance().usage(usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n      }\n      Object.keys(commandHandler.builder).forEach(function (key) {\n        innerYargs.option(key, commandHandler.builder[key]);\n      });\n      innerArgv = innerYargs._parseArgs(null, null, true, commandIndex);\n      aliases = innerYargs.parsed.aliases;\n    }\n    if (!yargs._hasOutput()) {\n      positionalMap = populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n    }\n\n    // we apply validation post-hoc, so that custom\n    // checks get passed populated positional arguments.\n    if (!yargs._hasOutput()) yargs._runValidation(innerArgv, aliases, positionalMap, yargs.parsed.error);\n    if (commandHandler.handler && !yargs._hasOutput()) {\n      yargs._setHasOutput();\n      if (commandHandler.middlewares.length > 0) {\n        var middlewareArgs = commandHandler.middlewares.reduce(function (initialObj, middleware) {\n          return Object.assign(initialObj, middleware(innerArgv));\n        }, {});\n        Object.assign(innerArgv, middlewareArgs);\n      }\n      var handlerResult = commandHandler.handler(innerArgv);\n      if (handlerResult && typeof handlerResult.then === 'function') {\n        handlerResult.then(null, function (error) {\n          return yargs.getUsageInstance().fail(null, error);\n        });\n      }\n    }\n    if (command) {\n      currentContext.commands.pop();\n      currentContext.fullCommands.pop();\n    }\n    numFiles = currentContext.files.length - numFiles;\n    if (numFiles > 0) currentContext.files.splice(numFiles * -1, numFiles);\n    return innerArgv;\n  };\n  function shouldUpdateUsage(yargs) {\n    return !yargs.getUsageInstance().getUsageDisabled() && yargs.getUsageInstance().getUsage().length === 0;\n  }\n  function usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n    var c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;\n    var pc = parentCommands.filter(function (c) {\n      return !DEFAULT_MARKER.test(c);\n    });\n    pc.push(c);\n    return \"$0 \".concat(pc.join(' '));\n  }\n  self.runDefaultBuilderOn = function (yargs) {\n    if (shouldUpdateUsage(yargs)) {\n      // build the root-level command string from the default string.\n      var commandString = DEFAULT_MARKER.test(defaultCommand.original) ? defaultCommand.original : defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n      yargs.getUsageInstance().usage(commandString, defaultCommand.description);\n    }\n    var builder = defaultCommand.builder;\n    if (typeof builder === 'function') {\n      builder(yargs);\n    } else {\n      Object.keys(builder).forEach(function (key) {\n        yargs.option(key, builder[key]);\n      });\n    }\n  };\n\n  // transcribe all positional arguments \"command <foo> <bar> [apple]\"\n  // onto argv.\n  function populatePositionals(commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length); // nuke the current commands\n    var demanded = commandHandler.demanded.slice(0);\n    var optional = commandHandler.optional.slice(0);\n    var positionalMap = {};\n    validation.positionalCount(demanded.length, argv._.length);\n    while (demanded.length) {\n      var demand = demanded.shift();\n      populatePositional(demand, argv, positionalMap);\n    }\n    while (optional.length) {\n      var maybe = optional.shift();\n      populatePositional(maybe, argv, positionalMap);\n    }\n    argv._ = context.commands.concat(argv._);\n    postProcessPositionals(argv, positionalMap, self.cmdToParseOptions(commandHandler.original));\n    return positionalMap;\n  }\n  function populatePositional(positional, argv, positionalMap, parseOptions) {\n    var cmd = positional.cmd[0];\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String);\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];\n    }\n  }\n\n  // we run yargs-parser against the positional arguments\n  // applying the same parsing logic used for flags.\n  function postProcessPositionals(argv, positionalMap, parseOptions) {\n    // combine the parsing hints we've inferred from the command\n    // string with explicitly configured parsing hints.\n    var options = Object.assign({}, yargs.getOptions());\n    options.default = Object.assign(parseOptions.default, options.default);\n    options.alias = Object.assign(parseOptions.alias, options.alias);\n    options.array = options.array.concat(parseOptions.array);\n    var unparsed = [];\n    Object.keys(positionalMap).forEach(function (key) {\n      positionalMap[key].map(function (value) {\n        unparsed.push(\"--\".concat(key));\n        unparsed.push(value);\n      });\n    });\n\n    // short-circuit parse.\n    if (!unparsed.length) return;\n    var parsed = Parser.detailed(unparsed, options);\n    if (parsed.error) {\n      yargs.getUsageInstance().fail(parsed.error.message, parsed.error);\n    } else {\n      // only copy over positional keys (don't overwrite\n      // flag arguments that were already parsed).\n      var positionalKeys = Object.keys(positionalMap);\n      Object.keys(positionalMap).forEach(function (key) {\n        [].push.apply(positionalKeys, parsed.aliases[key]);\n      });\n      Object.keys(parsed.argv).forEach(function (key) {\n        if (positionalKeys.indexOf(key) !== -1) {\n          argv[key] = parsed.argv[key];\n        }\n      });\n    }\n  }\n  self.cmdToParseOptions = function (cmdString) {\n    var parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    };\n    var parsed = self.parseCommand(cmdString);\n    parsed.demanded.forEach(function (d) {\n      var cmds = d.cmd.slice(0);\n      var cmd = cmds.shift();\n      if (d.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      cmds.forEach(function (c) {\n        parseOptions.alias[cmd] = c;\n      });\n      parseOptions.demand[cmd] = true;\n    });\n    parsed.optional.forEach(function (o) {\n      var cmds = o.cmd.slice(0);\n      var cmd = cmds.shift();\n      if (o.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n      cmds.forEach(function (c) {\n        parseOptions.alias[cmd] = c;\n      });\n    });\n    return parseOptions;\n  };\n  self.reset = function () {\n    handlers = {};\n    aliasMap = {};\n    defaultCommand = undefined;\n    return self;\n  };\n\n  // used by yargs.parse() to freeze\n  // the state of commands such that\n  // we can apply .parse() multiple times\n  // with the same yargs instance.\n  var frozen;\n  self.freeze = function () {\n    frozen = {};\n    frozen.handlers = handlers;\n    frozen.aliasMap = aliasMap;\n    frozen.defaultCommand = defaultCommand;\n  };\n  self.unfreeze = function () {\n    handlers = frozen.handlers;\n    aliasMap = frozen.aliasMap;\n    defaultCommand = frozen.defaultCommand;\n    frozen = undefined;\n  };\n  return self;\n};","map":null,"metadata":{},"sourceType":"script"}
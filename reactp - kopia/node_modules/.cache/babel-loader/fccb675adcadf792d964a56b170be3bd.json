{"ast":null,"code":"'use strict';\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.runCLI = exports.run = undefined;\nvar run = exports.run = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(maybeArgv, project) {\n    var argv, projects, _ref2, results, globalConfig;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          argv = buildArgv(maybeArgv, project);\n          if (!argv.init) {\n            _context.next = 6;\n            break;\n          }\n          _context.next = 5;\n          return (0, (_init || _load_init()).default)();\n        case 5:\n          return _context.abrupt(\"return\");\n        case 6:\n          projects = getProjectListFromCLIArgs(argv, project);\n          _context.next = 9;\n          return runCLI(argv, projects);\n        case 9:\n          _ref2 = _context.sent;\n          results = _ref2.results, globalConfig = _ref2.globalConfig;\n          readResultsAndExit(results, globalConfig);\n          _context.next = 21;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          (0, (_jestUtil || _load_jestUtil()).clearLine)(process.stderr);\n          (0, (_jestUtil || _load_jestUtil()).clearLine)(process.stdout);\n          console.error((_chalk || _load_chalk()).default.red(_context.t0.stack));\n          (0, (_exit || _load_exit()).default)(1);\n          throw _context.t0;\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n  return function run(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _jestUtil;\nfunction _load_jestUtil() {\n  return _jestUtil = require('jest-util');\n}\nvar _jestValidate;\nfunction _load_jestValidate() {\n  return _jestValidate = require('jest-validate');\n}\nvar _jestConfig;\nfunction _load_jestConfig() {\n  return _jestConfig = require('jest-config');\n}\nvar _args;\nfunction _load_args() {\n  return _args = _interopRequireWildcard(require('./args'));\n}\nvar _chalk;\nfunction _load_chalk() {\n  return _chalk = _interopRequireDefault(require('chalk'));\n}\nvar _create_context;\nfunction _load_create_context() {\n  return _create_context = _interopRequireDefault(require('../lib/create_context'));\n}\nvar _exit;\nfunction _load_exit() {\n  return _exit = _interopRequireDefault(require('exit'));\n}\nvar _getChangedFilesPromise;\nfunction _load_getChangedFilesPromise() {\n  return _getChangedFilesPromise = _interopRequireDefault(require('../getChangedFilesPromise'));\n}\nvar _collectHandles;\nfunction _load_collectHandles() {\n  return _collectHandles = require('../collectHandles');\n}\nvar _fs;\nfunction _load_fs() {\n  return _fs = _interopRequireDefault(require('fs'));\n}\nvar _handle_deprecation_warnings;\nfunction _load_handle_deprecation_warnings() {\n  return _handle_deprecation_warnings = _interopRequireDefault(require('../lib/handle_deprecation_warnings'));\n}\nvar _log_debug_messages;\nfunction _load_log_debug_messages() {\n  return _log_debug_messages = _interopRequireDefault(require('../lib/log_debug_messages'));\n}\nvar _preRunMessage;\nfunction _load_preRunMessage() {\n  return _preRunMessage = require('../preRunMessage');\n}\nvar _runJest;\nfunction _load_runJest() {\n  return _runJest = _interopRequireDefault(require('../runJest'));\n}\nvar _jestRuntime;\nfunction _load_jestRuntime() {\n  return _jestRuntime = _interopRequireDefault(require('jest-runtime'));\n}\nvar _TestWatcher;\nfunction _load_TestWatcher() {\n  return _TestWatcher = _interopRequireDefault(require('../TestWatcher'));\n}\nvar _watch;\nfunction _load_watch() {\n  return _watch = _interopRequireDefault(require('../watch'));\n}\nvar _pluralize;\nfunction _load_pluralize() {\n  return _pluralize = _interopRequireDefault(require('../pluralize'));\n}\nvar _yargs;\nfunction _load_yargs() {\n  return _yargs = _interopRequireDefault(require('yargs'));\n}\nvar _rimraf;\nfunction _load_rimraf() {\n  return _rimraf = _interopRequireDefault(require('rimraf'));\n}\nvar _realpathNative;\nfunction _load_realpathNative() {\n  return _realpathNative = require('realpath-native');\n}\nvar _init;\nfunction _load_init() {\n  return _init = _interopRequireDefault(require('../lib/init'));\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step('next', value);\n          }, function (err) {\n            step('throw', err);\n          });\n        }\n      }\n      return step('next');\n    });\n  };\n}\n/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n */\n\nvar runCLI = exports.runCLI = function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(argv, projects) {\n    var realFs, fs, results, outputStream, _getConfigs, globalConfig, configs, hasDeprecationWarnings, _results, openHandles, formatted, openHandlesString, message;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          realFs = require('fs');\n          fs = require('graceful-fs');\n          fs.gracefulify(realFs);\n          // If we output a JSON object, we can't write anything to stdout, since\n          // it'll break the JSON structure and it won't be valid.\n          outputStream = argv.json || argv.useStderr ? process.stderr : process.stdout;\n          _getConfigs = getConfigs(projects, argv, outputStream);\n          globalConfig = _getConfigs.globalConfig, configs = _getConfigs.configs, hasDeprecationWarnings = _getConfigs.hasDeprecationWarnings;\n          if (argv.clearCache) {\n            configs.forEach(function (config) {\n              (_rimraf || _load_rimraf()).default.sync(config.cacheDirectory);\n              process.stdout.write(\"Cleared \".concat(config.cacheDirectory, \"\\n\"));\n            });\n            (0, (_exit || _load_exit()).default)(0);\n          }\n          _context2.next = 9;\n          return _run(globalConfig, configs, hasDeprecationWarnings, outputStream, function (r) {\n            return results = r;\n          });\n        case 9:\n          if (!(argv.watch || argv.watchAll)) {\n            _context2.next = 11;\n            break;\n          }\n          return _context2.abrupt(\"return\", new Promise(function () {}));\n        case 11:\n          if (results) {\n            _context2.next = 13;\n            break;\n          }\n          throw new Error('AggregatedResult must be present after test run is complete');\n        case 13:\n          _results = results;\n          openHandles = _results.openHandles;\n          if (openHandles && openHandles.length) {\n            formatted = (0, (_collectHandles || _load_collectHandles()).formatHandleErrors)(openHandles, configs[0]);\n            openHandlesString = (0, (_pluralize || _load_pluralize()).default)('open handle', formatted.length, 's');\n            message = (_chalk || _load_chalk()).default.red(\"\\nJest has detected the following \".concat(openHandlesString, \" potentially keeping Jest from exiting:\\n\\n\")) + formatted.join('\\n\\n');\n            console.error(message);\n          }\n          return _context2.abrupt(\"return\", Promise.resolve({\n            globalConfig: globalConfig,\n            results: results\n          }));\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function runCLI(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar readResultsAndExit = function readResultsAndExit(result, globalConfig) {\n  var code = !result || result.success ? 0 : globalConfig.testFailureExitCode;\n  process.on('exit', function () {\n    return process.exitCode = code;\n  });\n  if (globalConfig.forceExit) {\n    if (!globalConfig.detectOpenHandles) {\n      console.error((_chalk || _load_chalk()).default.red.bold('Force exiting Jest\\n\\n') + (_chalk || _load_chalk()).default.red('Have you considered using `--detectOpenHandles` to detect ' + 'async operations that kept running after all tests finished?'));\n    }\n    (0, (_exit || _load_exit()).default)(code);\n  } else if (!globalConfig.detectOpenHandles) {\n    setTimeout(function () {\n      console.error((_chalk || _load_chalk()).default.red.bold('Jest did not exit one second after the test run has completed.\\n\\n') + (_chalk || _load_chalk()).default.red('This usually means that there are asynchronous operations that ' + \"weren't stopped in your tests. Consider running Jest with \" + '`--detectOpenHandles` to troubleshoot this issue.'));\n      // $FlowFixMe: `unref` exists in Node\n    }, 1000).unref();\n  }\n};\nvar buildArgv = function buildArgv(maybeArgv, project) {\n  var argv = (0, (_yargs || _load_yargs()).default)(maybeArgv || process.argv.slice(2)).usage((_args || _load_args()).usage).alias('help', 'h').options((_args || _load_args()).options).epilogue((_args || _load_args()).docs).check((_args || _load_args()).check).argv;\n  (0, (_jestValidate || _load_jestValidate()).validateCLIOptions)(argv, Object.assign({}, (_args || _load_args()).options, {\n    deprecationEntries: (_jestConfig || _load_jestConfig()).deprecationEntries\n  }));\n  return argv;\n};\nvar getProjectListFromCLIArgs = function getProjectListFromCLIArgs(argv, project) {\n  var projects = argv.projects ? argv.projects : [];\n  if (project) {\n    projects.push(project);\n  }\n  if (!projects.length && process.platform === 'win32') {\n    try {\n      projects.push((0, (_realpathNative || _load_realpathNative()).sync)(process.cwd()));\n    } catch (err) {\n      // do nothing, just catch error\n      // process.binding('fs').realpath can throw, e.g. on mapped drives\n    }\n  }\n  if (!projects.length) {\n    projects.push(process.cwd());\n  }\n  return projects;\n};\nvar printDebugInfoAndExitIfNeeded = function printDebugInfoAndExitIfNeeded(argv, globalConfig, configs, outputStream) {\n  if (argv.debug) {\n    (0, (_log_debug_messages || _load_log_debug_messages()).default)(globalConfig, configs, outputStream);\n    return;\n  }\n  if (argv.showConfig) {\n    (0, (_log_debug_messages || _load_log_debug_messages()).default)(globalConfig, configs, process.stdout);\n    (0, (_exit || _load_exit()).default)(0);\n  }\n};\nvar ensureNoDuplicateConfigs = function ensureNoDuplicateConfigs(parsedConfigs, projects, rootConfigPath) {\n  var configPathMap = new Map();\n  var _iterator = _createForOfIteratorHelper(parsedConfigs),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var config = _step.value;\n      var configPath = config.configPath;\n      if (configPathMap.has(configPath)) {\n        var message = \"Whoops! Two projects resolved to the same config path: \".concat((_chalk || _load_chalk()).default.bold(String(configPath)), \":\\n\\n  Project 1: \").concat((_chalk || _load_chalk()).default.bold(projects[parsedConfigs.findIndex(function (x) {\n          return x === config;\n        })]), \"\\n  Project 2: \").concat((_chalk || _load_chalk()).default.bold(projects[parsedConfigs.findIndex(function (x) {\n          return x === configPathMap.get(configPath);\n        })]), \"\\n\\nThis usually means that your \").concat((_chalk || _load_chalk()).default.bold('\"projects\"'), \" config includes a directory that doesn't have any configuration recognizable by Jest. Please fix it.\\n\");\n        throw new Error(message);\n      }\n      if (configPath !== null) {\n        configPathMap.set(configPath, config);\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\n// Possible scenarios:\n//  1. jest --config config.json\n//  2. jest --projects p1 p2\n//  3. jest --projects p1 p2 --config config.json\n//  4. jest --projects p1\n//  5. jest\n//\n// If no projects are specified, process.cwd() will be used as the default\n// (and only) project.\nvar getConfigs = function getConfigs(projectsFromCLIArgs, argv, outputStream) {\n  var globalConfig;\n  var hasDeprecationWarnings;\n  var configs = [];\n  var projects = projectsFromCLIArgs;\n  var configPath;\n  if (projectsFromCLIArgs.length === 1) {\n    var parsedConfig = (0, (_jestConfig || _load_jestConfig()).readConfig)(argv, projects[0]);\n    configPath = parsedConfig.configPath;\n    if (parsedConfig.globalConfig.projects) {\n      // If this was a single project, and its config has `projects`\n      // settings, use that value instead.\n      projects = parsedConfig.globalConfig.projects;\n    }\n    hasDeprecationWarnings = parsedConfig.hasDeprecationWarnings;\n    globalConfig = parsedConfig.globalConfig;\n    configs = [parsedConfig.projectConfig];\n    if (globalConfig.projects && globalConfig.projects.length) {\n      // Even though we had one project in CLI args, there might be more\n      // projects defined in the config.\n      projects = globalConfig.projects;\n    }\n  }\n  if (projects.length > 1) {\n    var parsedConfigs = projects.filter(function (root) {\n      // Ignore globbed files that cannot be `require`d.\n      if ((_fs || _load_fs()).default.existsSync(root) && !(_fs || _load_fs()).default.lstatSync(root).isDirectory() && !root.endsWith('.js') && !root.endsWith('.json')) {\n        return false;\n      }\n      return true;\n    }).map(function (root) {\n      return (0, (_jestConfig || _load_jestConfig()).readConfig)(argv, root, true, configPath);\n    });\n    ensureNoDuplicateConfigs(parsedConfigs, projects, configPath);\n    configs = parsedConfigs.map(function (_ref4) {\n      var projectConfig = _ref4.projectConfig;\n      return projectConfig;\n    });\n    if (!hasDeprecationWarnings) {\n      hasDeprecationWarnings = parsedConfigs.some(function (_ref5) {\n        var hasDeprecationWarnings = _ref5.hasDeprecationWarnings;\n        return !!hasDeprecationWarnings;\n      });\n    }\n    // If no config was passed initially, use the one from the first project\n    if (!globalConfig) {\n      globalConfig = parsedConfigs[0].globalConfig;\n    }\n  }\n  if (!globalConfig || !configs.length) {\n    throw new Error('jest: No configuration found for any project.');\n  }\n  printDebugInfoAndExitIfNeeded(argv, globalConfig, configs, outputStream);\n  return {\n    configs: configs,\n    globalConfig: globalConfig,\n    hasDeprecationWarnings: !!hasDeprecationWarnings\n  };\n};\nvar buildContextsAndHasteMaps = function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(configs, globalConfig, outputStream) {\n    var hasteMapInstances, contexts;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          hasteMapInstances = Array(configs.length);\n          _context4.next = 3;\n          return Promise.all(configs.map(function () {\n            var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(config, index) {\n              var hasteMapInstance;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    (0, (_jestUtil || _load_jestUtil()).createDirectory)(config.cacheDirectory);\n                    hasteMapInstance = (_jestRuntime || _load_jestRuntime()).default.createHasteMap(config, {\n                      console: new (_jestUtil || _load_jestUtil()).Console(outputStream, outputStream),\n                      maxWorkers: globalConfig.maxWorkers,\n                      resetCache: !config.cache,\n                      watch: globalConfig.watch || globalConfig.watchAll,\n                      watchman: globalConfig.watchman\n                    });\n                    hasteMapInstances[index] = hasteMapInstance;\n                    _context3.t0 = (0, (_create_context || _load_create_context()).default);\n                    _context3.t1 = config;\n                    _context3.next = 7;\n                    return hasteMapInstance.build();\n                  case 7:\n                    _context3.t2 = _context3.sent;\n                    return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1, _context3.t2));\n                  case 9:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3);\n            }));\n            return function (_x8, _x9) {\n              return _ref7.apply(this, arguments);\n            };\n          }()));\n        case 3:\n          contexts = _context4.sent;\n          return _context4.abrupt(\"return\", {\n            contexts: contexts,\n            hasteMapInstances: hasteMapInstances\n          });\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function buildContextsAndHasteMaps(_x5, _x6, _x7) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar _run = function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(globalConfig, configs, hasDeprecationWarnings, outputStream, onComplete) {\n    var changedFilesPromise, _ref9, contexts, hasteMapInstances;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          // Queries to hg/git can take a while, so we need to start the process\n          // as soon as possible, so by the time we need the result it's already there.\n          changedFilesPromise = (0, (_getChangedFilesPromise || _load_getChangedFilesPromise()).default)(globalConfig, configs);\n          _context5.next = 3;\n          return buildContextsAndHasteMaps(configs, globalConfig, outputStream);\n        case 3:\n          _ref9 = _context5.sent;\n          contexts = _ref9.contexts, hasteMapInstances = _ref9.hasteMapInstances;\n          if (!(globalConfig.watch || globalConfig.watchAll)) {\n            _context5.next = 10;\n            break;\n          }\n          _context5.next = 8;\n          return runWatch(contexts, configs, hasDeprecationWarnings, globalConfig, outputStream, hasteMapInstances, changedFilesPromise);\n        case 8:\n          _context5.next = 12;\n          break;\n        case 10:\n          _context5.next = 12;\n          return runWithoutWatch(globalConfig, contexts, outputStream, onComplete, changedFilesPromise);\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function _run(_x10, _x11, _x12, _x13, _x14) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nvar runWatch = function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(contexts, configs, hasDeprecationWarnings, globalConfig, outputStream, hasteMapInstances, changedFilesPromise) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!hasDeprecationWarnings) {\n            _context6.next = 10;\n            break;\n          }\n          _context6.prev = 1;\n          _context6.next = 4;\n          return (0, (_handle_deprecation_warnings || _load_handle_deprecation_warnings()).default)(outputStream, process.stdin);\n        case 4:\n          return _context6.abrupt(\"return\", (0, (_watch || _load_watch()).default)(globalConfig, contexts, outputStream, hasteMapInstances));\n        case 7:\n          _context6.prev = 7;\n          _context6.t0 = _context6[\"catch\"](1);\n          (0, (_exit || _load_exit()).default)(0);\n        case 10:\n          return _context6.abrupt(\"return\", (0, (_watch || _load_watch()).default)(globalConfig, contexts, outputStream, hasteMapInstances));\n        case 11:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[1, 7]]);\n  }));\n  return function runWatch(_x15, _x16, _x17, _x18, _x19, _x20, _x21) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nvar runWithoutWatch = function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(globalConfig, contexts, outputStream, onComplete, changedFilesPromise) {\n    var startRun;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          startRun = function () {\n            var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n              return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                while (1) switch (_context7.prev = _context7.next) {\n                  case 0:\n                    if (!globalConfig.listTests) {\n                      (0, (_preRunMessage || _load_preRunMessage()).print)(outputStream);\n                    }\n                    _context7.next = 3;\n                    return (0, (_runJest || _load_runJest()).default)({\n                      changedFilesPromise: changedFilesPromise,\n                      contexts: contexts,\n                      failedTestsCache: null,\n                      globalConfig: globalConfig,\n                      onComplete: onComplete,\n                      outputStream: outputStream,\n                      startRun: startRun,\n                      testWatcher: new (_TestWatcher || _load_TestWatcher()).default({\n                        isWatchMode: false\n                      })\n                    });\n                  case 3:\n                    return _context7.abrupt(\"return\", _context7.sent);\n                  case 4:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }, _callee7);\n            }));\n            return function startRun() {\n              return _ref12.apply(this, arguments);\n            };\n          }();\n          _context8.next = 3;\n          return startRun();\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function runWithoutWatch(_x22, _x23, _x24, _x25, _x26) {\n    return _ref11.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"TargetNames\", {\n  enumerable: true,\n  get: function get() {\n    return _options.TargetNames;\n  }\n});\nexports.default = getTargets;\nObject.defineProperty(exports, \"filterItems\", {\n  enumerable: true,\n  get: function get() {\n    return _filterItems.default;\n  }\n});\nObject.defineProperty(exports, \"getInclusionReasons\", {\n  enumerable: true,\n  get: function get() {\n    return _debug.getInclusionReasons;\n  }\n});\nexports.isBrowsersQueryValid = isBrowsersQueryValid;\nObject.defineProperty(exports, \"isRequired\", {\n  enumerable: true,\n  get: function get() {\n    return _filterItems.isRequired;\n  }\n});\nObject.defineProperty(exports, \"prettifyTargets\", {\n  enumerable: true,\n  get: function get() {\n    return _pretty.prettifyTargets;\n  }\n});\nObject.defineProperty(exports, \"unreleasedLabels\", {\n  enumerable: true,\n  get: function get() {\n    return _targets.unreleasedLabels;\n  }\n});\nvar _browserslist = require(\"browserslist\");\nvar _helperValidatorOption = require(\"@babel/helper-validator-option\");\nvar _nativeModules = require(\"@babel/compat-data/native-modules\");\nvar _lruCache = require(\"lru-cache\");\nvar _utils = require(\"./utils\");\nvar _targets = require(\"./targets\");\nvar _options = require(\"./options\");\nvar _pretty = require(\"./pretty\");\nvar _debug = require(\"./debug\");\nvar _filterItems = require(\"./filter-items\");\nvar ESM_SUPPORT = _nativeModules[\"es6.module\"];\nvar v = new _helperValidatorOption.OptionValidator(\"@babel/helper-compilation-targets\");\nfunction validateTargetNames(targets) {\n  var validTargets = Object.keys(_options.TargetNames);\n  for (var _i = 0, _Object$keys = Object.keys(targets); _i < _Object$keys.length; _i++) {\n    var target = _Object$keys[_i];\n    if (!(target in _options.TargetNames)) {\n      throw new Error(v.formatMessage(\"'\".concat(target, \"' is not a valid target\\n- Did you mean '\").concat((0, _helperValidatorOption.findSuggestion)(target, validTargets), \"'?\")));\n    }\n  }\n  return targets;\n}\nfunction isBrowsersQueryValid(browsers) {\n  return typeof browsers === \"string\" || Array.isArray(browsers) && browsers.every(function (b) {\n    return typeof b === \"string\";\n  });\n}\nfunction validateBrowsers(browsers) {\n  v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), \"'\".concat(String(browsers), \"' is not a valid browserslist query\"));\n  return browsers;\n}\nfunction getLowestVersions(browsers) {\n  return browsers.reduce(function (all, browser) {\n    var _browser$split = browser.split(\" \"),\n      _browser$split2 = _slicedToArray(_browser$split, 2),\n      browserName = _browser$split2[0],\n      browserVersion = _browser$split2[1];\n    var target = _targets.browserNameMap[browserName];\n    if (!target) {\n      return all;\n    }\n    try {\n      var splitVersion = browserVersion.split(\"-\")[0].toLowerCase();\n      var isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);\n      if (!all[target]) {\n        all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);\n        return all;\n      }\n      var version = all[target];\n      var isUnreleased = (0, _utils.isUnreleasedVersion)(version, target);\n      if (isUnreleased && isSplitUnreleased) {\n        all[target] = (0, _utils.getLowestUnreleased)(version, splitVersion, target);\n      } else if (isUnreleased) {\n        all[target] = (0, _utils.semverify)(splitVersion);\n      } else if (!isUnreleased && !isSplitUnreleased) {\n        var parsedBrowserVersion = (0, _utils.semverify)(splitVersion);\n        all[target] = (0, _utils.semverMin)(version, parsedBrowserVersion);\n      }\n    } catch (e) {}\n    return all;\n  }, {});\n}\nfunction outputDecimalWarning(decimalTargets) {\n  if (!decimalTargets.length) {\n    return;\n  }\n  console.warn(\"Warning, the following targets are using a decimal version:\\n\");\n  decimalTargets.forEach(function (_ref) {\n    var target = _ref.target,\n      value = _ref.value;\n    return console.warn(\"  \".concat(target, \": \").concat(value));\n  });\n  console.warn(\"\\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\\ngetting parsed as 6.1, which can lead to unexpected behavior.\\n\");\n}\nfunction semverifyTarget(target, value) {\n  try {\n    return (0, _utils.semverify)(value);\n  } catch (error) {\n    throw new Error(v.formatMessage(\"'\".concat(value, \"' is not a valid value for 'targets.\").concat(target, \"'.\")));\n  }\n}\nfunction nodeTargetParser(value) {\n  var parsed = value === true || value === \"current\" ? process.versions.node : semverifyTarget(\"node\", value);\n  return [\"node\", parsed];\n}\nfunction defaultTargetParser(target, value) {\n  var version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);\n  return [target, version];\n}\nfunction generateTargets(inputTargets) {\n  var input = Object.assign({}, inputTargets);\n  delete input.esmodules;\n  delete input.browsers;\n  return input;\n}\nfunction resolveTargets(queries, env) {\n  var resolved = _browserslist(queries, {\n    mobileToDesktop: true,\n    env: env\n  });\n  return getLowestVersions(resolved);\n}\nvar targetsCache = new _lruCache({\n  max: 64\n});\nfunction resolveTargetsCached(queries, env) {\n  var cacheKey = typeof queries === \"string\" ? queries : queries.join() + env;\n  var cached = targetsCache.get(cacheKey);\n  if (!cached) {\n    cached = resolveTargets(queries, env);\n    targetsCache.set(cacheKey, cached);\n  }\n  return Object.assign({}, cached);\n}\nfunction getTargets() {\n  var inputTargets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _browsers, _browsers2;\n  var browsers = inputTargets.browsers,\n    esmodules = inputTargets.esmodules;\n  var _options$configPath = options.configPath,\n    configPath = _options$configPath === void 0 ? \".\" : _options$configPath;\n  validateBrowsers(browsers);\n  var input = generateTargets(inputTargets);\n  var targets = validateTargetNames(input);\n  var shouldParseBrowsers = !!browsers;\n  var hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;\n  var shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;\n  if (!browsers && shouldSearchForConfig) {\n    browsers = _browserslist.loadConfig({\n      config: options.configFile,\n      path: configPath,\n      env: options.browserslistEnv\n    });\n    if (browsers == null) {\n      {\n        browsers = [];\n      }\n    }\n  }\n  if (esmodules && (esmodules !== \"intersect\" || !((_browsers = browsers) != null && _browsers.length))) {\n    browsers = Object.keys(ESM_SUPPORT).map(function (browser) {\n      return \"\".concat(browser, \" >= \").concat(ESM_SUPPORT[browser]);\n    }).join(\", \");\n    esmodules = false;\n  }\n  if ((_browsers2 = browsers) != null && _browsers2.length) {\n    var queryBrowsers = resolveTargetsCached(browsers, options.browserslistEnv);\n    if (esmodules === \"intersect\") {\n      for (var _i2 = 0, _Object$keys2 = Object.keys(queryBrowsers); _i2 < _Object$keys2.length; _i2++) {\n        var browser = _Object$keys2[_i2];\n        var version = queryBrowsers[browser];\n        var esmSupportVersion = ESM_SUPPORT[browser];\n        if (esmSupportVersion) {\n          queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(esmSupportVersion), browser);\n        } else {\n          delete queryBrowsers[browser];\n        }\n      }\n    }\n    targets = Object.assign(queryBrowsers, targets);\n  }\n  var result = {};\n  var decimalWarnings = [];\n  var _iterator = _createForOfIteratorHelper(Object.keys(targets).sort()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var target = _step.value;\n      var value = targets[target];\n      if (typeof value === \"number\" && value % 1 !== 0) {\n        decimalWarnings.push({\n          target: target,\n          value: value\n        });\n      }\n      var _ref2 = target === \"node\" ? nodeTargetParser(value) : defaultTargetParser(target, value),\n        _ref3 = _slicedToArray(_ref2, 2),\n        parsedTarget = _ref3[0],\n        parsedValue = _ref3[1];\n      if (parsedValue) {\n        result[parsedTarget] = parsedValue;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  outputDecimalWarning(decimalWarnings);\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}
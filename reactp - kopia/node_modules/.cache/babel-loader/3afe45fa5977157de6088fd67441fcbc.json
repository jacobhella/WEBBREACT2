{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _assert = require(\"assert\");\nvar _t = require(\"@babel/types\");\nvar callExpression = _t.callExpression,\n  cloneNode = _t.cloneNode,\n  expressionStatement = _t.expressionStatement,\n  identifier = _t.identifier,\n  importDeclaration = _t.importDeclaration,\n  importDefaultSpecifier = _t.importDefaultSpecifier,\n  importNamespaceSpecifier = _t.importNamespaceSpecifier,\n  importSpecifier = _t.importSpecifier,\n  memberExpression = _t.memberExpression,\n  stringLiteral = _t.stringLiteral,\n  variableDeclaration = _t.variableDeclaration,\n  variableDeclarator = _t.variableDeclarator;\nvar ImportBuilder = /*#__PURE__*/function () {\n  function ImportBuilder(importedSource, scope, hub) {\n    _classCallCheck(this, ImportBuilder);\n    this._statements = [];\n    this._resultName = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n  _createClass(ImportBuilder, [{\n    key: \"done\",\n    value: function done() {\n      return {\n        statements: this._statements,\n        resultName: this._resultName\n      };\n    }\n  }, {\n    key: \"import\",\n    value: function _import() {\n      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n      return this;\n    }\n  }, {\n    key: \"require\",\n    value: function require() {\n      this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n      return this;\n    }\n  }, {\n    key: \"namespace\",\n    value: function namespace() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"namespace\";\n      var local = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n      _assert(statement.type === \"ImportDeclaration\");\n      _assert(statement.specifiers.length === 0);\n      statement.specifiers = [importNamespaceSpecifier(local)];\n      this._resultName = cloneNode(local);\n      return this;\n    }\n  }, {\n    key: \"default\",\n    value: function _default(name) {\n      var id = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n      _assert(statement.type === \"ImportDeclaration\");\n      _assert(statement.specifiers.length === 0);\n      statement.specifiers = [importDefaultSpecifier(id)];\n      this._resultName = cloneNode(id);\n      return this;\n    }\n  }, {\n    key: \"named\",\n    value: function named(name, importName) {\n      if (importName === \"default\") return this.default(name);\n      var id = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n      _assert(statement.type === \"ImportDeclaration\");\n      _assert(statement.specifiers.length === 0);\n      statement.specifiers = [importSpecifier(id, identifier(importName))];\n      this._resultName = cloneNode(id);\n      return this;\n    }\n  }, {\n    key: \"var\",\n    value: function _var(name) {\n      var id = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n      if (statement.type !== \"ExpressionStatement\") {\n        _assert(this._resultName);\n        statement = expressionStatement(this._resultName);\n        this._statements.push(statement);\n      }\n      this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(id, statement.expression)]);\n      this._resultName = cloneNode(id);\n      return this;\n    }\n  }, {\n    key: \"defaultInterop\",\n    value: function defaultInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n    }\n  }, {\n    key: \"wildcardInterop\",\n    value: function wildcardInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n    }\n  }, {\n    key: \"_interop\",\n    value: function _interop(callee) {\n      var statement = this._statements[this._statements.length - 1];\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = callExpression(callee, [statement.expression]);\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n      } else {\n        _assert.fail(\"Unexpected type.\");\n      }\n      return this;\n    }\n  }, {\n    key: \"prop\",\n    value: function prop(name) {\n      var statement = this._statements[this._statements.length - 1];\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = memberExpression(statement.expression, identifier(name));\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n      } else {\n        _assert.fail(\"Unexpected type:\" + statement.type);\n      }\n      return this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(name) {\n      this._resultName = memberExpression(this._resultName, identifier(name));\n    }\n  }]);\n  return ImportBuilder;\n}();\nexports.default = ImportBuilder;","map":null,"metadata":{},"sourceType":"script"}
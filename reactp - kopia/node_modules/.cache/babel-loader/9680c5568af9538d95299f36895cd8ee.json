{"ast":null,"code":"\"use strict\";\n\n// These use the global symbol registry so that multiple copies of this\n// library can work together in case they are not deduped.\nvar _toConsumableArray = require(\"C:\\\\Users\\\\legoj\\\\OneDrive\\\\Dokument\\\\Uni\\\\VT 2023\\\\Webbteknik\\\\hemsidan\\\\reactp\\\\myprojectapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar GENSYNC_START = Symbol.for(\"gensync:v1:start\");\nvar GENSYNC_SUSPEND = Symbol.for(\"gensync:v1:suspend\");\nvar GENSYNC_EXPECTED_START = \"GENSYNC_EXPECTED_START\";\nvar GENSYNC_EXPECTED_SUSPEND = \"GENSYNC_EXPECTED_SUSPEND\";\nvar GENSYNC_OPTIONS_ERROR = \"GENSYNC_OPTIONS_ERROR\";\nvar GENSYNC_RACE_NONEMPTY = \"GENSYNC_RACE_NONEMPTY\";\nvar GENSYNC_ERRBACK_NO_CALLBACK = \"GENSYNC_ERRBACK_NO_CALLBACK\";\nmodule.exports = Object.assign(function gensync(optsOrFn) {\n  var genFn = optsOrFn;\n  if (typeof optsOrFn !== \"function\") {\n    genFn = newGenerator(optsOrFn);\n  } else {\n    genFn = wrapGenerator(optsOrFn);\n  }\n  return Object.assign(genFn, makeFunctionAPI(genFn));\n}, {\n  all: buildOperation({\n    name: \"all\",\n    arity: 1,\n    sync: function sync(args) {\n      var items = Array.from(args[0]);\n      return items.map(function (item) {\n        return evaluateSync(item);\n      });\n    },\n    async: function async(args, resolve, reject) {\n      var items = Array.from(args[0]);\n      if (items.length === 0) {\n        Promise.resolve().then(function () {\n          return resolve([]);\n        });\n        return;\n      }\n      var count = 0;\n      var results = items.map(function () {\n        return undefined;\n      });\n      items.forEach(function (item, i) {\n        evaluateAsync(item, function (val) {\n          results[i] = val;\n          count += 1;\n          if (count === results.length) resolve(results);\n        }, reject);\n      });\n    }\n  }),\n  race: buildOperation({\n    name: \"race\",\n    arity: 1,\n    sync: function sync(args) {\n      var items = Array.from(args[0]);\n      if (items.length === 0) {\n        throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n      }\n      return evaluateSync(items[0]);\n    },\n    async: function async(args, resolve, reject) {\n      var items = Array.from(args[0]);\n      if (items.length === 0) {\n        throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n      }\n      for (var _i = 0, _items = items; _i < _items.length; _i++) {\n        var item = _items[_i];\n        evaluateAsync(item, resolve, reject);\n      }\n    }\n  })\n});\n\n/**\n * Given a generator function, return the standard API object that executes\n * the generator and calls the callbacks.\n */\nfunction makeFunctionAPI(genFn) {\n  var fns = {\n    sync: function sync() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return evaluateSync(genFn.apply(this, args));\n    },\n    async: function async() {\n      var _this = this;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return new Promise(function (resolve, reject) {\n        evaluateAsync(genFn.apply(_this, args), resolve, reject);\n      });\n    },\n    errback: function errback() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      var cb = args.pop();\n      if (typeof cb !== \"function\") {\n        throw makeError(\"Asynchronous function called without callback\", GENSYNC_ERRBACK_NO_CALLBACK);\n      }\n      var gen;\n      try {\n        gen = genFn.apply(this, args);\n      } catch (err) {\n        cb(err);\n        return;\n      }\n      evaluateAsync(gen, function (val) {\n        return cb(undefined, val);\n      }, function (err) {\n        return cb(err);\n      });\n    }\n  };\n  return fns;\n}\nfunction assertTypeof(type, name, value, allowUndefined) {\n  if (typeof value === type || allowUndefined && typeof value === \"undefined\") {\n    return;\n  }\n  var msg;\n  if (allowUndefined) {\n    msg = \"Expected opts.\".concat(name, \" to be either a \").concat(type, \", or undefined.\");\n  } else {\n    msg = \"Expected opts.\".concat(name, \" to be a \").concat(type, \".\");\n  }\n  throw makeError(msg, GENSYNC_OPTIONS_ERROR);\n}\nfunction makeError(msg, code) {\n  return Object.assign(new Error(msg), {\n    code: code\n  });\n}\n\n/**\n * Given an options object, return a new generator that dispatches the\n * correct handler based on sync or async execution.\n */\nfunction newGenerator(_ref) {\n  var name = _ref.name,\n    arity = _ref.arity,\n    _sync = _ref.sync,\n    _async = _ref.async,\n    errback = _ref.errback;\n  assertTypeof(\"string\", \"name\", name, true /* allowUndefined */);\n  assertTypeof(\"number\", \"arity\", arity, true /* allowUndefined */);\n  assertTypeof(\"function\", \"sync\", _sync);\n  assertTypeof(\"function\", \"async\", _async, true /* allowUndefined */);\n  assertTypeof(\"function\", \"errback\", errback, true /* allowUndefined */);\n  if (_async && errback) {\n    throw makeError(\"Expected one of either opts.async or opts.errback, but got _both_.\", GENSYNC_OPTIONS_ERROR);\n  }\n  if (typeof name !== \"string\") {\n    var fnName;\n    if (errback && errback.name && errback.name !== \"errback\") {\n      fnName = errback.name;\n    }\n    if (_async && _async.name && _async.name !== \"async\") {\n      fnName = _async.name.replace(/Async$/, \"\");\n    }\n    if (_sync && _sync.name && _sync.name !== \"sync\") {\n      fnName = _sync.name.replace(/Sync$/, \"\");\n    }\n    if (typeof fnName === \"string\") {\n      name = fnName;\n    }\n  }\n  if (typeof arity !== \"number\") {\n    arity = _sync.length;\n  }\n  return buildOperation({\n    name: name,\n    arity: arity,\n    sync: function sync(args) {\n      return _sync.apply(this, args);\n    },\n    async: function async(args, resolve, reject) {\n      if (_async) {\n        _async.apply(this, args).then(resolve, reject);\n      } else if (errback) {\n        errback.call.apply(errback, [this].concat(_toConsumableArray(args), [function (err, value) {\n          if (err == null) resolve(value);else reject(err);\n        }]));\n      } else {\n        resolve(_sync.apply(this, args));\n      }\n    }\n  });\n}\nfunction wrapGenerator(genFn) {\n  return setFunctionMetadata(genFn.name, genFn.length, function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return genFn.apply(this, args);\n  });\n}\nfunction buildOperation(_ref2) {\n  var name = _ref2.name,\n    arity = _ref2.arity,\n    sync = _ref2.sync,\n    async = _ref2.async;\n  return setFunctionMetadata(name, arity, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var resume,\n      _len5,\n      args,\n      _key5,\n      res,\n      result,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return GENSYNC_START;\n        case 2:\n          resume = _context.sent;\n          for (_len5 = _args.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = _args[_key5];\n          }\n          if (resume) {\n            _context.next = 7;\n            break;\n          }\n          // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.\n          res = sync.call(this, args);\n          return _context.abrupt(\"return\", res);\n        case 7:\n          try {\n            async.call(this, args, function (value) {\n              if (result) return;\n              result = {\n                value: value\n              };\n              resume();\n            }, function (err) {\n              if (result) return;\n              result = {\n                err: err\n              };\n              resume();\n            });\n          } catch (err) {\n            result = {\n              err: err\n            };\n            resume();\n          }\n\n          // Suspend until the callbacks run. Will resume synchronously if the\n          // callback was already called.\n          _context.next = 10;\n          return GENSYNC_SUSPEND;\n        case 10:\n          if (!result.hasOwnProperty(\"err\")) {\n            _context.next = 12;\n            break;\n          }\n          throw result.err;\n        case 12:\n          return _context.abrupt(\"return\", result.value);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, this);\n  }));\n}\nfunction evaluateSync(gen) {\n  var value;\n  while (!(_gen$next = gen.next(), value = _gen$next.value, _gen$next).done) {\n    var _gen$next;\n    assertStart(value, gen);\n  }\n  return value;\n}\nfunction evaluateAsync(gen, resolve, reject) {\n  (function step() {\n    try {\n      var value;\n      var _loop = function _loop() {\n        assertStart(value, gen);\n\n        // If this throws, it is considered to have broken the contract\n        // established for async handlers. If these handlers are called\n        // synchronously, it is also considered bad behavior.\n        var sync = true;\n        var didSyncResume = false;\n        var out = gen.next(function () {\n          if (sync) {\n            didSyncResume = true;\n          } else {\n            step();\n          }\n        });\n        sync = false;\n        assertSuspend(out, gen);\n        if (!didSyncResume) {\n          // Callback wasn't called synchronously, so break out of the loop\n          // and let it call 'step' later.\n          return {\n            v: void 0\n          };\n        }\n      };\n      while (!(_gen$next2 = gen.next(), value = _gen$next2.value, _gen$next2).done) {\n        var _gen$next2;\n        var _ret = _loop();\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n      return resolve(value);\n    } catch (err) {\n      return reject(err);\n    }\n  })();\n}\nfunction assertStart(value, gen) {\n  if (value === GENSYNC_START) return;\n  throwError(gen, makeError(\"Got unexpected yielded value in gensync generator: \".concat(JSON.stringify(value), \". Did you perhaps mean to use 'yield*' instead of 'yield'?\"), GENSYNC_EXPECTED_START));\n}\nfunction assertSuspend(_ref3, gen) {\n  var value = _ref3.value,\n    done = _ref3.done;\n  if (!done && value === GENSYNC_SUSPEND) return;\n  throwError(gen, makeError(done ? \"Unexpected generator completion. If you get this, it is probably a gensync bug.\" : \"Expected GENSYNC_SUSPEND, got \".concat(JSON.stringify(value), \". If you get this, it is probably a gensync bug.\"), GENSYNC_EXPECTED_SUSPEND));\n}\nfunction throwError(gen, err) {\n  // Call `.throw` so that users can step in a debugger to easily see which\n  // 'yield' passed an unexpected value. If the `.throw` call didn't throw\n  // back to the generator, we explicitly do it to stop the error\n  // from being swallowed by user code try/catches.\n  if (gen.throw) gen.throw(err);\n  throw err;\n}\nfunction isIterable(value) {\n  return !!value && (typeof value === \"object\" || typeof value === \"function\") && !value[Symbol.iterator];\n}\nfunction setFunctionMetadata(name, arity, fn) {\n  if (typeof name === \"string\") {\n    // This should always work on the supported Node versions, but for the\n    // sake of users that are compiling to older versions, we check for\n    // configurability so we don't throw.\n    var nameDesc = Object.getOwnPropertyDescriptor(fn, \"name\");\n    if (!nameDesc || nameDesc.configurable) {\n      Object.defineProperty(fn, \"name\", Object.assign(nameDesc || {}, {\n        configurable: true,\n        value: name\n      }));\n    }\n  }\n  if (typeof arity === \"number\") {\n    var lengthDesc = Object.getOwnPropertyDescriptor(fn, \"length\");\n    if (!lengthDesc || lengthDesc.configurable) {\n      Object.defineProperty(fn, \"length\", Object.assign(lengthDesc || {}, {\n        configurable: true,\n        value: arity\n      }));\n    }\n  }\n  return fn;\n}","map":null,"metadata":{},"sourceType":"script"}